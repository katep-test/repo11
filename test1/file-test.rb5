        "user_id": "{{user_id}}",
        "session_id": "{{session_id}}",	
		
		        "user_id": "8783711111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "session_id": "b6dc6eee1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
		
		


 // Вывод для отладки
    console.log("Ожидаемый паттерн:", expectedPattern);
    console.log("Фактическое значение:", jsonData.response.text);		
		
_____________________ 


pm.test("1. Проверка text", function () {
    var jsonData = pm.response.json();
    
    // Проверка наличия объекта
    pm.expect(jsonData).to.have.property('response');
    
    // Проверка, что объект_тест является объектом
    pm.expect(jsonData.response).to.be.an('object');
    
    // Проверка наличия ключа внутри объекта
    pm.expect(jsonData.response).to.have.property('text');
    pm.expect(jsonData.response).to.have.property('end_session');
    
    // Проверка значения ключа внутри объекта
    pm.expect(jsonData.response.text).to.eql('Планировщик недели прощается с вами! До свидания!');
    pm.expect(jsonData.response.end_session).to.eql(false);
    });
_____________________ 
pm.expect(jsonData.response.end_session).to.eql(false);

true

//-------------------------------------------------------------------------------
pm.test("3. Проверка структуры ответа и значения 'prevActions.number'", function () {
    var jsonData = pm.response.json();

    // Проверяем наличие session_state в ответе
    pm.expect(jsonData).to.have.property('session_state');
    pm.expect(jsonData.session_state).to.be.an('object');

    // Проверяем наличие actions внутри session_state
    pm.expect(jsonData.session_state).to.have.property('actions');
    pm.expect(jsonData.session_state.actions).to.be.an('object');

    // Проверяем наличие prevActions внутри actions
    pm.expect(jsonData.session_state.actions).to.have.property('prevActions');
    pm.expect(jsonData.session_state.actions.prevActions).to.be.an('array');

    // Проверяем, что prevActions не пустой
    pm.expect(jsonData.session_state.actions.prevActions).to.have.length.above(0);

    // Проверяем наличие number в первом элементе prevActions
    pm.expect(jsonData.session_state.actions.prevActions[0]).to.have.property('number');

    // Проверяем, что number равен 0
    pm.expect(jsonData.session_state.actions.prevActions[0].number).to.equal(0);

});

//-------------------------------------------------------------------------------
pm.test("3. Проверка структуры ответа и значения 'prevActions.number'", function () {
    var jsonData = pm.response.json();

    // Проверяем наличие session_state в ответе
    pm.expect(jsonData).to.have.property('session_state');
    pm.expect(jsonData.session_state).to.be.an('object');

    // Проверяем наличие actions внутри session_state
    pm.expect(jsonData.session_state).to.have.property('actions');
    pm.expect(jsonData.session_state.actions).to.be.an('object');

    // Проверяем наличие prevActions внутри actions
    pm.expect(jsonData.session_state.actions).to.have.property('prevActions');
    pm.expect(jsonData.session_state.actions.prevActions).to.be.an('array');

    // Проверяем, что prevActions не пустой
    pm.expect(jsonData.session_state.actions.prevActions).to.have.length.above(0);

    // Проверяем ключи в первом элементе prevActions
    pm.expect(jsonData.session_state.actions.prevActions[0]).to.have.property('number');
    pm.expect(jsonData.session_state.actions.prevActions[0]).to.have.property('operation');
    pm.expect(jsonData.session_state.actions.prevActions[0]).to.have.property('valueAction');

    // Проверяем значения ключей
    pm.expect(jsonData.session_state.actions.prevActions[0].number).to.equal(0);
    pm.expect(jsonData.session_state.actions.prevActions[0].operation).to.equal("ADD_EVENT");
    pm.expect(jsonData.session_state.actions.prevActions[0].valueAction).to.equal("добавь событие");

});


//-------------------------------------------------------------------------------
pm.test("3. Проверка 'prevActions'", function () {
    var jsonData = pm.response.json();

    // Проверяем наличие session_state в ответе
    pm.expect(jsonData).to.have.property('session_state');
    pm.expect(jsonData.session_state).to.be.an('object');

    // Проверяем наличие actions внутри session_state
    pm.expect(jsonData.session_state).to.have.property('actions');
    pm.expect(jsonData.session_state.actions).to.be.an('object');

    // Проверяем наличие prevActions внутри actions
    pm.expect(jsonData.session_state.actions).to.have.property('prevActions');
    pm.expect(jsonData.session_state.actions.prevActions).to.be.an('array');

    // Проверяем, что prevActions не пустой
    pm.expect(jsonData.session_state.actions.prevActions).to.have.length.above(0);

    // Проверяем ключи в первом элементе prevActions
    pm.expect(jsonData.session_state.actions.prevActions[0]).to.have.property('number');
    pm.expect(jsonData.session_state.actions.prevActions[0]).to.have.property('operation');
    pm.expect(jsonData.session_state.actions.prevActions[0]).to.have.property('valueAction');

    // Проверяем значения ключей
    pm.expect(jsonData.session_state.actions.prevActions[0].number).to.equal(0);
    pm.expect(jsonData.session_state.actions.prevActions[0].operation).to.equal("ADD_EVENT");
    pm.expect(jsonData.session_state.actions.prevActions[0].valueAction).to.equal("добавь событие");

    // Проверяем ключи во втором элементе prevActions
    pm.expect(jsonData.session_state.actions.prevActions[1]).to.have.property('number');
    pm.expect(jsonData.session_state.actions.prevActions[1]).to.have.property('operation');
    pm.expect(jsonData.session_state.actions.prevActions[1]).to.have.property('prevOperation');
    pm.expect(jsonData.session_state.actions.prevActions[1]).to.have.property('valueAction');

    // Проверяем значения ключей
    pm.expect(jsonData.session_state.actions.prevActions[1].number).to.equal(1);
    pm.expect(jsonData.session_state.actions.prevActions[1].operation).to.equal("ADD_DAY");
    pm.expect(jsonData.session_state.actions.prevActions[1].prevOperation).to.equal("ADD_EVENT");
    pm.expect(jsonData.session_state.actions.prevActions[1].valueAction).to.equal("сегодня");

});
//-------------------------------------------------------------------------------
  pm.test("2. Значение ключей 'message_id' внутри 'session'", function () {
    var jsonData = pm.response.json();
    
    // Проверяем наличие объекта 'session' в ответе
    pm.expect(jsonData).to.have.property('session'); 
   
    // Проверяем наличие ключей внутри 'session'
	pm.expect(jsonData.session).to.have.property('message_id');
	
    // Проверяем, что значение ключей
	 pm.expect(jsonData.session.message_id).to.equal(3);
    
});

//-------------------------------------------------------------------------------

pm.test("5. Проверка структуры ответа и значений в user_state_update", function () {
    var jsonData = pm.response.json();

     // Дополнительные проверки значений
    if (jsonData.user_state_update.week.days["{{currentDate}}"][0].time !== "12:00") {
        console.log("Ошибка: ожидалось значение '01:00' для time в первом элементе, но получено", jsonData.user_state_update.week.days["{{currentDate}}"][0].time);
    }
    if (jsonData.user_state_update.week.days["{{currentDate}}"][0].name !== "Прогулка на берегу моря") {
        console.log("Ошибка: ожидалось значение 'Прогулка на берегу моря' для name в первом элементе, но получено", jsonData.user_state_update.week.days["{{currentDate}}"][0].name);
    }
	
	 if (jsonData.user_state_update.week.days["{{currentDate}}"][1].time !== "14:00") {
        console.log("Ошибка: ожидалось значение '14:00' для time во втором элементе, но получено", jsonData.user_state_update.week.days["{{currentDate}}"][1].time);	
	}
	
    if (jsonData.user_state_update.week.days["{{currentDate}}"][1].name !== "Поздний обед") {
        console.log("Ошибка: ожидалось значение 'Поздний обед' для name во втором элементе, но получено", jsonData.user_state_update.week.days["{{currentDate}}"][1].name);
    }
	

    // Проверяем наличие и тип user_state_update
    pm.expect(jsonData).to.have.property('user_state_update');
    pm.expect(jsonData.user_state_update).to.be.an('object');

    // Проверяем наличие и тип object3 внутри user_state_update
    pm.expect(jsonData.user_state_update).to.have.property('week');
    pm.expect(jsonData.user_state_update.week).to.be.an('object');

    // Проверяем наличие и тип days внутри week
    pm.expect(jsonData.user_state_update.week).to.have.property('days');
    pm.expect(jsonData.user_state_update.week.days).to.be.an('object');

    // Проверяем наличие и тип {{currentDate}} внутри days
    pm.expect(jsonData.user_state_update.week.days).to.have.property('{{currentDate}}');
    pm.expect(jsonData.user_state_update.week.days["{{currentDate}}"]).to.be.an('array');

    // Проверяем, что "{{currentDate}}" содержит 2 элемента
    pm.expect(jsonData.user_state_update.week.days["{{currentDate}}"]).to.have.lengthOf(2);

    // Проверяем первый элемент "{{currentDate}}"
    pm.expect(jsonData.user_state_update.week.days["{{currentDate}}"][0]).to.have.property('time', "12:00");
    pm.expect(jsonData.user_state_update.week.days["{{currentDate}}"][0]).to.have.property('name', "Прогулка на берегу моря");

    // Проверяем второй элемент "{{currentDate}}"
    pm.expect(jsonData.user_state_update.week.days["{{currentDate}}"][1]).to.have.property('time', "14:00");
    pm.expect(jsonData.user_state_update.week.days["{{currentDate}}"][1]).to.have.property('name', "Поздний обед");

});


//когда нет pre реквеста

pm.test("3. Проверка user_state_update", function () {
    var jsonData = pm.response.json();

     // Дополнительные проверки значений
    if (jsonData.user_state_update.week.days[formattedDate][0].time !== "00:00") {
        console.log("Ошибка: ожидалось значение '00:00' для time в первом элементе, но получено", jsonData.user_state_update.week.days[formattedDate][0].time);
    }
    if (jsonData.user_state_update.week.days[formattedDate][0].name !== "тест событие 1") {
        console.log("Ошибка: ожидалось значение 'тест событие 1' для name в первом элементе, но получено", jsonData.user_state_update.week.days[formattedDate][0].name);
    }	
	 
    // Проверяем наличие и тип user_state_update
    pm.expect(jsonData).to.have.property('user_state_update');
    pm.expect(jsonData.user_state_update).to.be.an('object');

    // Проверяем наличие и тип object3 внутри user_state_update
    pm.expect(jsonData.user_state_update).to.have.property('week');
    pm.expect(jsonData.user_state_update.week).to.be.an('object');

    // Проверяем наличие и тип days внутри week
    pm.expect(jsonData.user_state_update.week).to.have.property('days');
    pm.expect(jsonData.user_state_update.week.days).to.be.an('object');

    // Проверяем наличие и тип {{currentDate}} внутри days
    pm.expect(jsonData.user_state_update.week.days).to.have.property(formattedDate);
    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.be.an('array');

    // Проверяем, что formattedDate содержит 2 элемента
    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.have.lengthOf(1);

    // Проверяем первый элемент formattedDate
    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('time', "00:00");
    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('name', "тест событие 1");   

});

//-------------------------------------------------------------------------------
pm.test("3. Проверка структуры ответа и значений в user_state_update, pastDate и futureDate", function () {
    var jsonData = pm.response.json();

     // Дополнительные проверки значений
    if (jsonData.user_state_update.week.days[pm.variables.get('pastDate')][0].time !== "12:00") {
        console.log("Ошибка: ожидалось значение '01:00' для time в первом элементе, но получено", jsonData.user_state_update.week.days[pm.variables.get('pastDate')][0].time);
    }
    if (jsonData.user_state_update.week.days[pm.variables.get('pastDate')][0].name !== "Прогулка на берегу моря") {
        console.log("Ошибка: ожидалось значение 'Прогулка на берегу моря' для name в первом элементе, но получено", jsonData.user_state_update.week.days[pm.variables.get('pastDate')][0].name);
    }	
	if (jsonData.user_state_update.week.days[pm.variables.get('pastDate')][1].time !== "14:00") {
        console.log("Ошибка: ожидалось значение '14:00' для time во втором элементе, но получено", jsonData.user_state_update.week.days[pm.variables.get('pastDate')][1].time);	
	}	
    if (jsonData.user_state_update.week.days[pm.variables.get('pastDate')][1].name !== "Поздний обед") {
        console.log("Ошибка: ожидалось значение 'Поздний обед' для name во втором элементе, но получено", jsonData.user_state_update.week.days[pm.variables.get('pastDate')][1].name);
    }
	
	if (jsonData.user_state_update.week.days[pm.variables.get('futureDate')][0].time !== "13:30") {
        console.log("Ошибка: ожидалось значение '13:30' для time в первом элементе, но получено", jsonData.user_state_update.week.days[pm.variables.get('futureDate')][0].time);
    }
    if (jsonData.user_state_update.week.days[pm.variables.get('futureDate')][0].name !== "Приготовить асаду") {
        console.log("Ошибка: ожидалось значение 'Приготовить асаду' для name в первом элементе, но получено", jsonData.user_state_update.week.days[pm.variables.get('futureDate')][0].name);
    }
	
	 if (jsonData.user_state_update.week.days[pm.variables.get('futureDate')][1].time !== "09:10") {
        console.log("Ошибка: ожидалось значение '09:10' для time во втором элементе, но получено", jsonData.user_state_update.week.days[pm.variables.get('futureDate')][1].time);	
	}
	
    if (jsonData.user_state_update.week.days[pm.variables.get('futureDate')][1].name !== "Прогуляться по утреннему Буэнос- Айресу и выругаться по поводу эмиграции") {
        console.log("Ошибка: ожидалось значение 'Прогуляться по утреннему Буэнос- Айресу и выругаться по поводу эмиграции' для name во втором элементе, но получено", jsonData.user_state_update.week.days[pm.variables.get('futureDate')][1].name);
    }
	
    // Проверяем наличие и тип user_state_update
    pm.expect(jsonData).to.have.property('user_state_update');
    pm.expect(jsonData.user_state_update).to.be.an('object');

    // Проверяем наличие и тип object3 внутри user_state_update
    pm.expect(jsonData.user_state_update).to.have.property('week');
    pm.expect(jsonData.user_state_update.week).to.be.an('object');

    // Проверяем наличие и тип days внутри week
    pm.expect(jsonData.user_state_update.week).to.have.property('days');
    pm.expect(jsonData.user_state_update.week.days).to.be.an('object');

    // Проверяем наличие и тип {{pastDate}} внутри days
    pm.expect(jsonData.user_state_update.week.days).to.have.property(pm.variables.get('pastDate'));
    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('pastDate')]).to.be.an('array');
	
	    // Проверяем наличие и тип {{futureDate}} внутри days
    pm.expect(jsonData.user_state_update.week.days).to.have.property(pm.variables.get('futureDate'));
    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('futureDate')]).to.be.an('array');

    // Проверяем, что 'pastDate' содержит 2 элемента
    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('pastDate')]).to.have.lengthOf(2);
	
	// Проверяем, что 'futureDate' содержит 2 элемента
    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('futureDate')]).to.have.lengthOf(2);

    // Проверяем первый элемент 'pastDate'
    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('pastDate')][0]).to.have.property('time', "12:00");
    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('pastDate')][0]).to.have.property('name', "Прогулка на берегу моря");

    // Проверяем второй элемент 'pastDate'
    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('pastDate')][1]).to.have.property('time', "14:00");
    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('pastDate')][1]).to.have.property('name', "Поздний обед");
	
	// Проверяем первый элемент 'futureDate'
    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('futureDate')][0]).to.have.property('time', "13:30");
    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('futureDate')][0]).to.have.property('name', "Приготовить асаду");

    // Проверяем второй элемент 'futureDate'
    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('futureDate')][1]).to.have.property('time', "09:10");
    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('futureDate')][1]).to.have.property('name', "Прогуляться по утреннему Буэнос- Айресу и выругаться по поводу эмиграции");
});

//-------------------------------------------------------------------------------
с фунцией, когда нет пререквеста

// Генерация текущей даты в формате DD-MM-YYYY

function generateCurrentDate() {
    var currentDate = new Date();
    var day = String(currentDate.getDate()).padStart(2, '0');
    var month = String(currentDate.getMonth() + 1).padStart(2, '0'); // Январь - это 0!
    var year = currentDate.getFullYear();
    return day + '-' + month + '-' + year;
}
// 
pm.test("1. Проверка text с currentDate", function () {
    var jsonData = pm.response.json();
    var formattedDate = generateCurrentDate()

    // Создание регулярного выражения с текущей датой
    var expectedPattern = new RegExp('^Ваши события на сегодня ' + formattedDate + " 00:00 Поздний обед00, 01:00 Поздний обед01, 02:00 Поздний обед02, 03:00 Поздний обед03, 04:00 Поздний обед04, 10:00 Поздний обед10, 11:00 Поздний обед11, 12:00 Прогулка на берегу моря12, 14:00 Поздний обед14, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 17:00 Поздний обед17");

    // Проверка наличия объекта
    pm.expect(jsonData).to.have.property('response');

    // Проверка, что response является объектом
    pm.expect(jsonData.response).to.be.an('object');

    // Проверка наличия ключа внутри объекта
    pm.expect(jsonData.response).to.have.property('text');
    pm.expect(jsonData.response).to.have.property('end_session');

    // Проверка значения ключа внутри объекта
    pm.expect(jsonData.response.text).to.match(expectedPattern);
    pm.expect(jsonData.response.end_session).to.eql(false);

});
//-------------------------------------------------------------------------------




//-------------------------------------------------------------------------------
pm.test("0.2 Значение ключей user_id, session_id внутри 'session'", function () {
    var jsonData = pm.response.json();
    
    // Проверяем наличие объекта 'session' в ответе
    pm.expect(jsonData).to.have.property('session');
    
    // Проверяем наличие ключей'  
    pm.expect(jsonData.session).to.have.property('user_id');
     pm.expect(jsonData.session).to.have.property('session_id');
    
    // Проверяем значения ключей 
    pm.expect(jsonData.session.user_id).to.equal('b4fde534');
    pm.expect(jsonData.session.session_id).to.equal('ffb392fd');  
});

//-------------------------------------------------------------------------------

pm.test("1. Проверка text", function () {
    var jsonData = pm.response.json();
    
    // Генерация текущей даты в формате DD-MM-YYYY
    var currentDate = new Date();
    var day = String(currentDate.getDate()).padStart(2, '0');
    var month = String(currentDate.getMonth() + 1).padStart(2, '0'); // Январь - это 0!
    var year = currentDate.getFullYear();
    var formattedDate = day + '-' + month + '-' + year;
    
    // Создание регулярного выражения с текущей датой
    var expectedPattern = new RegExp('^Ваши события на сегодня ' + formattedDate + ' 12:00 Прогулка на берегу моря, 14:00 Поздний обед');
    
    // Проверка наличия объекта
    pm.expect(jsonData).to.have.property('response');
    
    // Проверка, что response является объектом
    pm.expect(jsonData.response).to.be.an('object');
    
    // Проверка наличия ключа внутри объекта
    pm.expect(jsonData.response).to.have.property('text');
    
    // Проверка значения ключа внутри объекта
    pm.expect(jsonData.response.text).to.match(expectedPattern);   
   
});

//-------------------------------------------------------------------------------
pm.test("1. Проверка text", function () {
    var jsonData = pm.response.json();
    
    
    // Создание регулярного выражения с текущей датой
    var expectedPattern = new RegExp('^Ваши события ' + pm.variables.get('pastDate') + ' 17:00 Велосипедная прогулка, 20:00 Ужин, ' + pm.variables.get('curDate') + ' 17:00 Ужин, 17:01 Велосипедная прогулка, ' + pm.variables.get('futureDate') + ' 09:00 Поздний обед, 15:00 Прогулка на берегу моря');
    
    // Проверка наличия объекта
    pm.expect(jsonData).to.have.property('response');
    
    // Проверка, что response является объектом
    pm.expect(jsonData.response).to.be.an('object');
    
    // Проверка наличия ключа внутри объекта
    pm.expect(jsonData.response).to.have.property('text');
    
    // Проверка значения ключа внутри объекта
    pm.expect(jsonData.response.text).to.match(expectedPattern);   
   
});
//-------------------------------------------------------------------------------
pm.test("1. Проверка text", function () {
    var jsonData = pm.response.json();
    
    
    // Создание регулярного выражения с текущей датой
    var expectedPattern = new RegExp('^Событие успешно добавлено на ' + pm.variables.get('curDate') + ' 00:00 тест событие 1! Выполнен выход в главное меню ');
    
    // Проверка наличия объекта
    pm.expect(jsonData).to.have.property('response');
    
    // Проверка, что response является объектом
    pm.expect(jsonData.response).to.be.an('object');
    
    // Проверка наличия ключа внутри объекта
    pm.expect(jsonData.response).to.have.property('text');
	pm.expect(jsonData.response).to.have.property('end_session');
    
    // Проверка значения ключа внутри объекта
    pm.expect(jsonData.response.text).to.match(expectedPattern); 
	pm.expect(jsonData.response.end_session).to.eql(false);
   
});

//------------------------------------------------------------------------------


pm.test("1. Проверка text с currentDate", function () {
    var jsonData = pm.response.json();

    // Генерация текущей даты в формате DD-MM-YYYY
    var currentDate = new Date();
    var day = String(currentDate.getDate()).padStart(2, '0');
    var month = String(currentDate.getMonth() + 1).padStart(2, '0'); // Январь - это 0!
    var year = currentDate.getFullYear();
    var formattedDate = day + '-' + month + '-' + year;

    // Создание регулярного выражения с текущей датой
    var expectedPattern = new RegExp('^Событие успешно добавлено на ' + formattedDate + " 00:00 тест событие 1! Выполнен выход в главное меню ");

    // Проверка наличия объекта
    pm.expect(jsonData).to.have.property('response');

    // Проверка, что response является объектом
    pm.expect(jsonData.response).to.be.an('object');

    // Проверка наличия ключа внутри объекта
    pm.expect(jsonData.response).to.have.property('text');
    pm.expect(jsonData.response).to.have.property('end_session');

    // Проверка значения ключа внутри объекта
    pm.expect(jsonData.response.text).to.match(expectedPattern);
    pm.expect(jsonData.response.end_session).to.eql(false);

});

//------------------------------------------------------------------------------

pm.test("1. Проверка text", function () {
    let jsonData = pm.response.json();

    // Получаем день недели из запроса
    let requestBody = JSON.parse(pm.request.body.raw);
    let actions =  requestBody.state.session.actions;
     console.log(actions);

    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction
     
    let command = requestBody.request.command;
    let is_valid_command = jsonData.response.text.includes(command);
   

    // Функция для получения следующей даты определенного дня недели
    function getNextvalueAction(dayName) {
        const days = ['воскресенье', 'понедельник', 'вторник', 'среда', 'четверг', 'пятница', 'суббота'];
        const today = new Date();
        const dayIndex = days.indexOf(dayName);
        if (dayIndex === -1) return null;
        
        const targetDate = new Date(today);
        targetDate.setDate(today.getDate() + (dayIndex + 7 - today.getDay()) % 7);
        return targetDate;
    }
    
    // Получаем ближайшую дату для указанного дня недели
    let targetDate = getNextvalueAction(valueAction);
    console.log(targetDate);
   
    // Форматируем дату в DD-MM-YYYY
    let formattedDate = targetDate.getDate().toString().padStart(2, '0') + '-' +
                        (targetDate.getMonth() + 1).toString().padStart(2, '0') + '-' +
                        targetDate.getFullYear();
   

 /*   let is_expect_date = jsonData.response.text.includes("Событие успешно добавлено на " + formattedDate);
    console.log("Ожидаемая дата?:", is_expect_date);  
 */
     // Создание регулярного выражения с ожидаемой датой
    let expectedPattern = new RegExp('^Событие успешно добавлено на ' + formattedDate + " 00:00 тест событие 1! Выполнен выход в главное меню ");

    
    // Проверка command
    pm.expect(jsonData).to.have.property('response');
    
    // Проверка, что response является объектом
    pm.expect(jsonData.response).to.be.an('object');
    
    // Проверка наличия ключа внутри объекта
    pm.expect(jsonData.response).to.have.property('text');
    pm.expect(jsonData.response).to.have.property('end_session');
    
    // Проверка значения ключа внутри объекта
    pm.expect(jsonData.response.text).to.match(expectedPattern);
    pm.expect(jsonData.response.text).to.include(command); 
    pm.expect(jsonData.response.end_session).to.eql(false);

});

_________________ 
pm.test("3. Проверка'days' {}", function () {
    var jsonData = pm.response.json();
    
    // Проверяем наличие user_state_update в ответе
    pm.expect(jsonData).to.have.property('user_state_update');
    pm.expect(jsonData.user_state_update).to.be.an('object');

    // Проверяем наличие week внутри user_state_update
    pm.expect(jsonData.user_state_update).to.have.property('week');
    pm.expect(jsonData.user_state_update.week).to.be.an('object');

    // Проверяем наличие days внутри week
    pm.expect(jsonData.user_state_update.week).to.have.property('days');

    // Проверяем, что days является пустым объектом
    pm.expect(jsonData.user_state_update.week.days).to.be.an('object').that.is.empty;   
});

//---------------------------------------------------------------------------
Функция 
// Генерация текущей даты в формате DD-MM-YYYY

function generateCurrentDate() {
    var currentDate = new Date();
    var day = String(currentDate.getDate()).padStart(2, '0');
    var month = String(currentDate.getMonth() + 1).padStart(2, '0'); // Январь - это 0!
    var year = currentDate.getFullYear();
    return day + '-' + month + '-' + year;
}
// --------------------------------------------------------------------------
pm.test("1. Проверка text с currentDate", function () {
    var jsonData = pm.response.json();
    var formattedDate = generateCurrentDate()

    // Создание регулярного выражения с текущей датой
    var expectedPattern = new RegExp('^Событие успешно добавлено на ' + formattedDate + " 00:00 тест событие 1! Выполнен выход в главное меню ");

    // Проверка наличия объекта
    pm.expect(jsonData).to.have.property('response');

    // Проверка, что response является объектом
    pm.expect(jsonData.response).to.be.an('object');

    // Проверка наличия ключа внутри объекта
    pm.expect(jsonData.response).to.have.property('text');
    pm.expect(jsonData.response).to.have.property('end_session');

    // Проверка значения ключа внутри объекта
    pm.expect(jsonData.response.text).to.match(expectedPattern);
    pm.expect(jsonData.response.end_session).to.eql(false);

});
//-------------------------------------------------------------------------------
  pm.test("2. Значение ключей 'message_id' внутри 'session'", function () {
    var jsonData = pm.response.json();
    
    // Проверяем наличие объекта 'session' в ответе
    pm.expect(jsonData).to.have.property('session'); 
   
    // Проверяем наличие ключей внутри 'session'
	pm.expect(jsonData.session).to.have.property('message_id');
	
    // Проверяем, что значение ключей
	 pm.expect(jsonData.session.message_id).to.equal(3);
    
});
//------------------------------------------------------------------------------

pm.test("3. Проверка user_state_update", function () {
    var jsonData = pm.response.json();
    var formattedDate = generateCurrentDate()

    // Дополнительные проверки значений
    if (jsonData.user_state_update.week.days[formattedDate][0].time !== "00:00") {
        console.log("Ошибка: ожидалось значение '00:00' для time в первом элементе, но получено", jsonData.user_state_update.week.days[formattedDate][0].time);
    }
    if (jsonData.user_state_update.week.days[formattedDate][0].name !== "тест событие 1") {
        console.log("Ошибка: ожидалось значение 'тест событие 1' для name в первом элементе, но получено", jsonData.user_state_update.week.days[formattedDate][0].name);
    }	
    
    // Проверяем наличие и тип user_state_update
    pm.expect(jsonData).to.have.property('user_state_update');
    pm.expect(jsonData.user_state_update).to.be.an('object');

    // Проверяем наличие и тип object3 внутри user_state_update
    pm.expect(jsonData.user_state_update).to.have.property('week');
    pm.expect(jsonData.user_state_update.week).to.be.an('object');

    // Проверяем наличие и тип days внутри week
    pm.expect(jsonData.user_state_update.week).to.have.property('days');
    pm.expect(jsonData.user_state_update.week.days).to.be.an('object');

    // Проверяем наличие и тип {{currentDate}} внутри days
    pm.expect(jsonData.user_state_update.week.days).to.have.property(formattedDate);
    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.be.an('array');

    // Проверяем, что formattedDate содержит 2 элемента
    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.have.lengthOf(1);

    // Проверяем первый элемент formattedDate
    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('time', "00:00");
    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('name', "тест событие 1");  
});


//-------------------------------------------------------------------------------
pm.test("4. Проверка отсутствия user_state_update", function () {
    var jsonData = pm.response.json();
    pm.expect(jsonData).to.not.have.property('user_state_update');
});

_____________________________________ 
{
                        "number": 0,
                        "valueAction": "добавь событие",
                        "operation": "ADD_EVENT"
                    },
                    {
                        "number": 1,
                        "prevOperation": "ADD_EVENT",
                        "valueAction": "вторник",
                        "operation": "ADD_DAY"
                    },
                    {
                        "number": 2,
                        "prevOperation": "ADD_DAY",
                        "valueAction": "десять часов",
                        "operation": "ADD_TIME"
                    }
					
					
__________________________________________
исправление для текущей даты от AI 

pm.test("1. Проверка text", function () {
    var jsonData = pm.response.json();

    // Получаем день недели из запроса
    let requestBody = JSON.parse(pm.request.body.raw);
    let actions =  requestBody.state.session.actions;

    var valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction

    // Функция для получения следующей даты определенного дня недели
    function getNextvalueAction(dayName) {
        const days = ['воскресенье', 'понедельник', 'вторник', 'среда', 'четверг', 'пятница', 'суббота'];
        const today = new Date();
        const dayIndex = days.indexOf(dayName);
        if (dayIndex === -1) return null;
        
        const targetDate = new Date(today);
        targetDate.setDate(today.getDate() + (dayIndex + 7 - today.getDay()) % 7);
        return targetDate;
    }
    
    // Получаем ближайшую дату для указанного дня недели
    var targetDate = getNextvalueAction(valueAction);
    if (!targetDate) {
        console.log("Некорректное значение дня недели");
        return; // Exit the test if the day name is incorrect
    }
    console.log(targetDate);
   
    // Форматируем дату в DD-MM-YYYY
    var formattedDate = targetDate.getDate().toString().padStart(2, '0') + '-' +
                        (targetDate.getMonth() + 1).toString().padStart(2, '0') + '-' +
                        targetDate.getFullYear();
    console.log("Ожидаемая дата:", formattedDate);  


     // Создание регулярного выражения с ожидаемой датой
    var expectedPattern = new RegExp('^Событие успешно добавлено на ' + formattedDate );

    
    // Проверка наличия объекта
    pm.expect(jsonData).to.have.property('response');
    
    // Проверка, что response является объектом
    pm.expect(jsonData.response).to.be.an('object');
    
    // Проверка наличия ключа внутри объекта
    pm.expect(jsonData.response).to.have.property('text');
    pm.expect(jsonData.response).to.have.property('end_session');
    
    // Проверка значения ключа внутри объекта
    pm.expect(jsonData.response.text).to.match(expectedPattern);
    pm.expect(jsonData.response.end_session).to.eql(false);

});


//-------------------------------------------------------------------------------
pm.test("3. Проверка 'prevActions'", function () {
    var jsonData = pm.response.json();

    // Проверяем наличие session_state в ответе
    pm.expect(jsonData).to.have.property('session_state');
    pm.expect(jsonData.session_state).to.be.an('object');

    // Проверяем наличие actions внутри session_state
    pm.expect(jsonData.session_state).to.have.property('actions');
    pm.expect(jsonData.session_state.actions).to.be.an('object');

    // Проверяем наличие prevActions внутри actions
    pm.expect(jsonData.session_state.actions).to.have.property('prevActions');
    pm.expect(jsonData.session_state.actions.prevActions).to.be.an('array');

    // Проверяем, что prevActions не пустой
    pm.expect(jsonData.session_state.actions.prevActions).to.have.length.above(0);

    // Проверяем ключи в первом элементе prevActions
    pm.expect(jsonData.session_state.actions.prevActions[0]).to.have.property('number');
    pm.expect(jsonData.session_state.actions.prevActions[0]).to.have.property('operation');
    pm.expect(jsonData.session_state.actions.prevActions[0]).to.have.property('valueAction');

    // Проверяем значения ключей
    pm.expect(jsonData.session_state.actions.prevActions[0].number).to.equal(0);
    pm.expect(jsonData.session_state.actions.prevActions[0].operation).to.equal("ADD_EVENT");
    pm.expect(jsonData.session_state.actions.prevActions[0].valueAction).to.equal("добавь событие");

    // Проверяем ключи во втором элементе prevActions
    pm.expect(jsonData.session_state.actions.prevActions[1]).to.have.property('number');
    pm.expect(jsonData.session_state.actions.prevActions[1]).to.have.property('operation');
    pm.expect(jsonData.session_state.actions.prevActions[1]).to.have.property('prevOperation');
    pm.expect(jsonData.session_state.actions.prevActions[1]).to.have.property('valueAction');

    // Проверяем значения ключей
    pm.expect(jsonData.session_state.actions.prevActions[1].number).to.equal(1);
    pm.expect(jsonData.session_state.actions.prevActions[1].operation).to.equal("ADD_DAY");
    pm.expect(jsonData.session_state.actions.prevActions[1].prevOperation).to.equal("ADD_EVENT");
    pm.expect(jsonData.session_state.actions.prevActions[1].valueAction).to.equal("сегодня");

        // Проверяем ключи во третьем элементе prevActions
    pm.expect(jsonData.session_state.actions.prevActions[1]).to.have.property('number');
    pm.expect(jsonData.session_state.actions.prevActions[1]).to.have.property('operation');
    pm.expect(jsonData.session_state.actions.prevActions[1]).to.have.property('prevOperation');
    pm.expect(jsonData.session_state.actions.prevActions[1]).to.have.property('valueAction');

    // Проверяем значения ключей
    pm.expect(jsonData.session_state.actions.prevActions[1].number).to.equal(2);
    pm.expect(jsonData.session_state.actions.prevActions[1].operation).to.equal("ADD_TIME");
    pm.expect(jsonData.session_state.actions.prevActions[1].prevOperation).to.equal("ADD_DAY");
    pm.expect(jsonData.session_state.actions.prevActions[1].valueAction).to.equal("ноль часов ноль");

});

        "user_id": "{{user_id}}",
        "session_id": "{{session_id}}",	
		
		        "user_id": "8783711111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "session_id": "b6dc6eee1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
		
		


 // Вывод для отладки
    console.log("Ожидаемый паттерн:", expectedPattern);
    console.log("Фактическое значение:", jsonData.response.text);		
		
_____________________ 


pm.test("1. Проверка text", function () {
    var jsonData = pm.response.json();
    
    // Проверка наличия объекта
    pm.expect(jsonData).to.have.property('response');
    
    // Проверка, что объект_тест является объектом
    pm.expect(jsonData.response).to.be.an('object');
    
    // Проверка наличия ключа внутри объекта
    pm.expect(jsonData.response).to.have.property('text');
    pm.expect(jsonData.response).to.have.property('end_session');
    
    // Проверка значения ключа внутри объекта
    pm.expect(jsonData.response.text).to.eql('Планировщик недели прощается с вами! До свидания!');
    pm.expect(jsonData.response.end_session).to.eql(false);
    });
_____________________ 
pm.expect(jsonData.response.end_session).to.eql(false);

true

//-------------------------------------------------------------------------------
pm.test("3. Проверка структуры ответа и значения 'prevActions.number'", function () {
    var jsonData = pm.response.json();

    // Проверяем наличие session_state в ответе
    pm.expect(jsonData).to.have.property('session_state');
    pm.expect(jsonData.session_state).to.be.an('object');

    // Проверяем наличие actions внутри session_state
    pm.expect(jsonData.session_state).to.have.property('actions');
    pm.expect(jsonData.session_state.actions).to.be.an('object');

    // Проверяем наличие prevActions внутри actions
    pm.expect(jsonData.session_state.actions).to.have.property('prevActions');
    pm.expect(jsonData.session_state.actions.prevActions).to.be.an('array');

    // Проверяем, что prevActions не пустой
    pm.expect(jsonData.session_state.actions.prevActions).to.have.length.above(0);

    // Проверяем наличие number в первом элементе prevActions
    pm.expect(jsonData.session_state.actions.prevActions[0]).to.have.property('number');

    // Проверяем, что number равен 0
    pm.expect(jsonData.session_state.actions.prevActions[0].number).to.equal(0);

});

//-------------------------------------------------------------------------------
pm.test("3. Проверка структуры ответа и значения 'prevActions.number'", function () {
    var jsonData = pm.response.json();

    // Проверяем наличие session_state в ответе
    pm.expect(jsonData).to.have.property('session_state');
    pm.expect(jsonData.session_state).to.be.an('object');

    // Проверяем наличие actions внутри session_state
    pm.expect(jsonData.session_state).to.have.property('actions');
    pm.expect(jsonData.session_state.actions).to.be.an('object');

    // Проверяем наличие prevActions внутри actions
    pm.expect(jsonData.session_state.actions).to.have.property('prevActions');
    pm.expect(jsonData.session_state.actions.prevActions).to.be.an('array');

    // Проверяем, что prevActions не пустой
    pm.expect(jsonData.session_state.actions.prevActions).to.have.length.above(0);

    // Проверяем ключи в первом элементе prevActions
    pm.expect(jsonData.session_state.actions.prevActions[0]).to.have.property('number');
    pm.expect(jsonData.session_state.actions.prevActions[0]).to.have.property('operation');
    pm.expect(jsonData.session_state.actions.prevActions[0]).to.have.property('valueAction');

    // Проверяем значения ключей
    pm.expect(jsonData.session_state.actions.prevActions[0].number).to.equal(0);
    pm.expect(jsonData.session_state.actions.prevActions[0].operation).to.equal("ADD_EVENT");
    pm.expect(jsonData.session_state.actions.prevActions[0].valueAction).to.equal("добавь событие");

});


//-------------------------------------------------------------------------------
pm.test("3. Проверка 'prevActions'", function () {
    var jsonData = pm.response.json();

    // Проверяем наличие session_state в ответе
    pm.expect(jsonData).to.have.property('session_state');
    pm.expect(jsonData.session_state).to.be.an('object');

    // Проверяем наличие actions внутри session_state
    pm.expect(jsonData.session_state).to.have.property('actions');
    pm.expect(jsonData.session_state.actions).to.be.an('object');

    // Проверяем наличие prevActions внутри actions
    pm.expect(jsonData.session_state.actions).to.have.property('prevActions');
    pm.expect(jsonData.session_state.actions.prevActions).to.be.an('array');

    // Проверяем, что prevActions не пустой
    pm.expect(jsonData.session_state.actions.prevActions).to.have.length.above(0);

    // Проверяем ключи в первом элементе prevActions
    pm.expect(jsonData.session_state.actions.prevActions[0]).to.have.property('number');
    pm.expect(jsonData.session_state.actions.prevActions[0]).to.have.property('operation');
    pm.expect(jsonData.session_state.actions.prevActions[0]).to.have.property('valueAction');

    // Проверяем значения ключей
    pm.expect(jsonData.session_state.actions.prevActions[0].number).to.equal(0);
    pm.expect(jsonData.session_state.actions.prevActions[0].operation).to.equal("ADD_EVENT");
    pm.expect(jsonData.session_state.actions.prevActions[0].valueAction).to.equal("добавь событие");

    // Проверяем ключи во втором элементе prevActions
    pm.expect(jsonData.session_state.actions.prevActions[1]).to.have.property('number');
    pm.expect(jsonData.session_state.actions.prevActions[1]).to.have.property('operation');
    pm.expect(jsonData.session_state.actions.prevActions[1]).to.have.property('prevOperation');
    pm.expect(jsonData.session_state.actions.prevActions[1]).to.have.property('valueAction');

    // Проверяем значения ключей
    pm.expect(jsonData.session_state.actions.prevActions[1].number).to.equal(1);
    pm.expect(jsonData.session_state.actions.prevActions[1].operation).to.equal("ADD_DAY");
    pm.expect(jsonData.session_state.actions.prevActions[1].prevOperation).to.equal("ADD_EVENT");
    pm.expect(jsonData.session_state.actions.prevActions[1].valueAction).to.equal("сегодня");

});
//-------------------------------------------------------------------------------
  pm.test("2. Значение ключей 'message_id' внутри 'session'", function () {
    var jsonData = pm.response.json();
    
    // Проверяем наличие объекта 'session' в ответе
    pm.expect(jsonData).to.have.property('session'); 
   
    // Проверяем наличие ключей внутри 'session'
	pm.expect(jsonData.session).to.have.property('message_id');
	
    // Проверяем, что значение ключей
	 pm.expect(jsonData.session.message_id).to.equal(3);
    
});

//-------------------------------------------------------------------------------

pm.test("5. Проверка структуры ответа и значений в user_state_update", function () {
    var jsonData = pm.response.json();

     // Дополнительные проверки значений
    if (jsonData.user_state_update.week.days["{{currentDate}}"][0].time !== "12:00") {
        console.log("Ошибка: ожидалось значение '01:00' для time в первом элементе, но получено", jsonData.user_state_update.week.days["{{currentDate}}"][0].time);
    }
    if (jsonData.user_state_update.week.days["{{currentDate}}"][0].name !== "Прогулка на берегу моря") {
        console.log("Ошибка: ожидалось значение 'Прогулка на берегу моря' для name в первом элементе, но получено", jsonData.user_state_update.week.days["{{currentDate}}"][0].name);
    }
	
	 if (jsonData.user_state_update.week.days["{{currentDate}}"][1].time !== "14:00") {
        console.log("Ошибка: ожидалось значение '14:00' для time во втором элементе, но получено", jsonData.user_state_update.week.days["{{currentDate}}"][1].time);	
	}
	
    if (jsonData.user_state_update.week.days["{{currentDate}}"][1].name !== "Поздний обед") {
        console.log("Ошибка: ожидалось значение 'Поздний обед' для name во втором элементе, но получено", jsonData.user_state_update.week.days["{{currentDate}}"][1].name);
    }
	

    // Проверяем наличие и тип user_state_update
    pm.expect(jsonData).to.have.property('user_state_update');
    pm.expect(jsonData.user_state_update).to.be.an('object');

    // Проверяем наличие и тип object3 внутри user_state_update
    pm.expect(jsonData.user_state_update).to.have.property('week');
    pm.expect(jsonData.user_state_update.week).to.be.an('object');

    // Проверяем наличие и тип days внутри week
    pm.expect(jsonData.user_state_update.week).to.have.property('days');
    pm.expect(jsonData.user_state_update.week.days).to.be.an('object');

    // Проверяем наличие и тип {{currentDate}} внутри days
    pm.expect(jsonData.user_state_update.week.days).to.have.property('{{currentDate}}');
    pm.expect(jsonData.user_state_update.week.days["{{currentDate}}"]).to.be.an('array');

    // Проверяем, что "{{currentDate}}" содержит 2 элемента
    pm.expect(jsonData.user_state_update.week.days["{{currentDate}}"]).to.have.lengthOf(2);

    // Проверяем первый элемент "{{currentDate}}"
    pm.expect(jsonData.user_state_update.week.days["{{currentDate}}"][0]).to.have.property('time', "12:00");
    pm.expect(jsonData.user_state_update.week.days["{{currentDate}}"][0]).to.have.property('name', "Прогулка на берегу моря");

    // Проверяем второй элемент "{{currentDate}}"
    pm.expect(jsonData.user_state_update.week.days["{{currentDate}}"][1]).to.have.property('time', "14:00");
    pm.expect(jsonData.user_state_update.week.days["{{currentDate}}"][1]).to.have.property('name', "Поздний обед");

});


//когда нет pre реквеста

pm.test("3. Проверка user_state_update", function () {
    var jsonData = pm.response.json();

     // Дополнительные проверки значений
    if (jsonData.user_state_update.week.days[formattedDate][0].time !== "00:00") {
        console.log("Ошибка: ожидалось значение '00:00' для time в первом элементе, но получено", jsonData.user_state_update.week.days[formattedDate][0].time);
    }
    if (jsonData.user_state_update.week.days[formattedDate][0].name !== "тест событие 1") {
        console.log("Ошибка: ожидалось значение 'тест событие 1' для name в первом элементе, но получено", jsonData.user_state_update.week.days[formattedDate][0].name);
    }	
	 
    // Проверяем наличие и тип user_state_update
    pm.expect(jsonData).to.have.property('user_state_update');
    pm.expect(jsonData.user_state_update).to.be.an('object');

    // Проверяем наличие и тип object3 внутри user_state_update
    pm.expect(jsonData.user_state_update).to.have.property('week');
    pm.expect(jsonData.user_state_update.week).to.be.an('object');

    // Проверяем наличие и тип days внутри week
    pm.expect(jsonData.user_state_update.week).to.have.property('days');
    pm.expect(jsonData.user_state_update.week.days).to.be.an('object');

    // Проверяем наличие и тип {{currentDate}} внутри days
    pm.expect(jsonData.user_state_update.week.days).to.have.property(formattedDate);
    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.be.an('array');

    // Проверяем, что formattedDate содержит 2 элемента
    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.have.lengthOf(1);

    // Проверяем первый элемент formattedDate
    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('time', "00:00");
    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('name', "тест событие 1");   

});

//-------------------------------------------------------------------------------
pm.test("3. Проверка структуры ответа и значений в user_state_update, pastDate и futureDate", function () {
    var jsonData = pm.response.json();

     // Дополнительные проверки значений
    if (jsonData.user_state_update.week.days[pm.variables.get('pastDate')][0].time !== "12:00") {
        console.log("Ошибка: ожидалось значение '01:00' для time в первом элементе, но получено", jsonData.user_state_update.week.days[pm.variables.get('pastDate')][0].time);
    }
    if (jsonData.user_state_update.week.days[pm.variables.get('pastDate')][0].name !== "Прогулка на берегу моря") {
        console.log("Ошибка: ожидалось значение 'Прогулка на берегу моря' для name в первом элементе, но получено", jsonData.user_state_update.week.days[pm.variables.get('pastDate')][0].name);
    }	
	if (jsonData.user_state_update.week.days[pm.variables.get('pastDate')][1].time !== "14:00") {
        console.log("Ошибка: ожидалось значение '14:00' для time во втором элементе, но получено", jsonData.user_state_update.week.days[pm.variables.get('pastDate')][1].time);	
	}	
    if (jsonData.user_state_update.week.days[pm.variables.get('pastDate')][1].name !== "Поздний обед") {
        console.log("Ошибка: ожидалось значение 'Поздний обед' для name во втором элементе, но получено", jsonData.user_state_update.week.days[pm.variables.get('pastDate')][1].name);
    }
	
	if (jsonData.user_state_update.week.days[pm.variables.get('futureDate')][0].time !== "13:30") {
        console.log("Ошибка: ожидалось значение '13:30' для time в первом элементе, но получено", jsonData.user_state_update.week.days[pm.variables.get('futureDate')][0].time);
    }
    if (jsonData.user_state_update.week.days[pm.variables.get('futureDate')][0].name !== "Приготовить асаду") {
        console.log("Ошибка: ожидалось значение 'Приготовить асаду' для name в первом элементе, но получено", jsonData.user_state_update.week.days[pm.variables.get('futureDate')][0].name);
    }
	
	 if (jsonData.user_state_update.week.days[pm.variables.get('futureDate')][1].time !== "09:10") {
        console.log("Ошибка: ожидалось значение '09:10' для time во втором элементе, но получено", jsonData.user_state_update.week.days[pm.variables.get('futureDate')][1].time);	
	}
	
    if (jsonData.user_state_update.week.days[pm.variables.get('futureDate')][1].name !== "Прогуляться по утреннему Буэнос- Айресу и выругаться по поводу эмиграции") {
        console.log("Ошибка: ожидалось значение 'Прогуляться по утреннему Буэнос- Айресу и выругаться по поводу эмиграции' для name во втором элементе, но получено", jsonData.user_state_update.week.days[pm.variables.get('futureDate')][1].name);
    }
	
    // Проверяем наличие и тип user_state_update
    pm.expect(jsonData).to.have.property('user_state_update');
    pm.expect(jsonData.user_state_update).to.be.an('object');

    // Проверяем наличие и тип object3 внутри user_state_update
    pm.expect(jsonData.user_state_update).to.have.property('week');
    pm.expect(jsonData.user_state_update.week).to.be.an('object');

    // Проверяем наличие и тип days внутри week
    pm.expect(jsonData.user_state_update.week).to.have.property('days');
    pm.expect(jsonData.user_state_update.week.days).to.be.an('object');

    // Проверяем наличие и тип {{pastDate}} внутри days
    pm.expect(jsonData.user_state_update.week.days).to.have.property(pm.variables.get('pastDate'));
    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('pastDate')]).to.be.an('array');
	
	    // Проверяем наличие и тип {{futureDate}} внутри days
    pm.expect(jsonData.user_state_update.week.days).to.have.property(pm.variables.get('futureDate'));
    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('futureDate')]).to.be.an('array');

    // Проверяем, что 'pastDate' содержит 2 элемента
    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('pastDate')]).to.have.lengthOf(2);
	
	// Проверяем, что 'futureDate' содержит 2 элемента
    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('futureDate')]).to.have.lengthOf(2);

    // Проверяем первый элемент 'pastDate'
    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('pastDate')][0]).to.have.property('time', "12:00");
    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('pastDate')][0]).to.have.property('name', "Прогулка на берегу моря");

    // Проверяем второй элемент 'pastDate'
    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('pastDate')][1]).to.have.property('time', "14:00");
    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('pastDate')][1]).to.have.property('name', "Поздний обед");
	
	// Проверяем первый элемент 'futureDate'
    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('futureDate')][0]).to.have.property('time', "13:30");
    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('futureDate')][0]).to.have.property('name', "Приготовить асаду");

    // Проверяем второй элемент 'futureDate'
    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('futureDate')][1]).to.have.property('time', "09:10");
    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('futureDate')][1]).to.have.property('name', "Прогуляться по утреннему Буэнос- Айресу и выругаться по поводу эмиграции");
});

//-------------------------------------------------------------------------------
с фунцией, когда нет пререквеста

// Генерация текущей даты в формате DD-MM-YYYY

function generateCurrentDate() {
    var currentDate = new Date();
    var day = String(currentDate.getDate()).padStart(2, '0');
    var month = String(currentDate.getMonth() + 1).padStart(2, '0'); // Январь - это 0!
    var year = currentDate.getFullYear();
    return day + '-' + month + '-' + year;
}
// 
pm.test("1. Проверка text с currentDate", function () {
    var jsonData = pm.response.json();
    var formattedDate = generateCurrentDate()

    // Создание регулярного выражения с текущей датой
    var expectedPattern = new RegExp('^Ваши события на сегодня ' + formattedDate + " 00:00 Поздний обед00, 01:00 Поздний обед01, 02:00 Поздний обед02, 03:00 Поздний обед03, 04:00 Поздний обед04, 10:00 Поздний обед10, 11:00 Поздний обед11, 12:00 Прогулка на берегу моря12, 14:00 Поздний обед14, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 17:00 Поздний обед17");

    // Проверка наличия объекта
    pm.expect(jsonData).to.have.property('response');

    // Проверка, что response является объектом
    pm.expect(jsonData.response).to.be.an('object');

    // Проверка наличия ключа внутри объекта
    pm.expect(jsonData.response).to.have.property('text');
    pm.expect(jsonData.response).to.have.property('end_session');

    // Проверка значения ключа внутри объекта
    pm.expect(jsonData.response.text).to.match(expectedPattern);
    pm.expect(jsonData.response.end_session).to.eql(false);

});
//-------------------------------------------------------------------------------




//-------------------------------------------------------------------------------
pm.test("0.2 Значение ключей user_id, session_id внутри 'session'", function () {
    var jsonData = pm.response.json();
    
    // Проверяем наличие объекта 'session' в ответе
    pm.expect(jsonData).to.have.property('session');
    
    // Проверяем наличие ключей'  
    pm.expect(jsonData.session).to.have.property('user_id');
     pm.expect(jsonData.session).to.have.property('session_id');
    
    // Проверяем значения ключей 
    pm.expect(jsonData.session.user_id).to.equal('b4fde534');
    pm.expect(jsonData.session.session_id).to.equal('ffb392fd');  
});

//-------------------------------------------------------------------------------

pm.test("1. Проверка text", function () {
    var jsonData = pm.response.json();
    
    // Генерация текущей даты в формате DD-MM-YYYY
    var currentDate = new Date();
    var day = String(currentDate.getDate()).padStart(2, '0');
    var month = String(currentDate.getMonth() + 1).padStart(2, '0'); // Январь - это 0!
    var year = currentDate.getFullYear();
    var formattedDate = day + '-' + month + '-' + year;
    
    // Создание регулярного выражения с текущей датой
    var expectedPattern = new RegExp('^Ваши события на сегодня ' + formattedDate + ' 12:00 Прогулка на берегу моря, 14:00 Поздний обед');
    
    // Проверка наличия объекта
    pm.expect(jsonData).to.have.property('response');
    
    // Проверка, что response является объектом
    pm.expect(jsonData.response).to.be.an('object');
    
    // Проверка наличия ключа внутри объекта
    pm.expect(jsonData.response).to.have.property('text');
    
    // Проверка значения ключа внутри объекта
    pm.expect(jsonData.response.text).to.match(expectedPattern);   
   
});

//-------------------------------------------------------------------------------
pm.test("1. Проверка text", function () {
    var jsonData = pm.response.json();
    
    
    // Создание регулярного выражения с текущей датой
    var expectedPattern = new RegExp('^Ваши события ' + pm.variables.get('pastDate') + ' 17:00 Велосипедная прогулка, 20:00 Ужин, ' + pm.variables.get('curDate') + ' 17:00 Ужин, 17:01 Велосипедная прогулка, ' + pm.variables.get('futureDate') + ' 09:00 Поздний обед, 15:00 Прогулка на берегу моря');
    
    // Проверка наличия объекта
    pm.expect(jsonData).to.have.property('response');
    
    // Проверка, что response является объектом
    pm.expect(jsonData.response).to.be.an('object');
    
    // Проверка наличия ключа внутри объекта
    pm.expect(jsonData.response).to.have.property('text');
    
    // Проверка значения ключа внутри объекта
    pm.expect(jsonData.response.text).to.match(expectedPattern);   
   
});
//-------------------------------------------------------------------------------
pm.test("1. Проверка text", function () {
    var jsonData = pm.response.json();
    
    
    // Создание регулярного выражения с текущей датой
    var expectedPattern = new RegExp('^Событие успешно добавлено на ' + pm.variables.get('curDate') + ' 00:00 тест событие 1! Выполнен выход в главное меню ');
    
    // Проверка наличия объекта
    pm.expect(jsonData).to.have.property('response');
    
    // Проверка, что response является объектом
    pm.expect(jsonData.response).to.be.an('object');
    
    // Проверка наличия ключа внутри объекта
    pm.expect(jsonData.response).to.have.property('text');
	pm.expect(jsonData.response).to.have.property('end_session');
    
    // Проверка значения ключа внутри объекта
    pm.expect(jsonData.response.text).to.match(expectedPattern); 
	pm.expect(jsonData.response.end_session).to.eql(false);
   
});

//------------------------------------------------------------------------------


pm.test("1. Проверка text с currentDate", function () {
    var jsonData = pm.response.json();

    // Генерация текущей даты в формате DD-MM-YYYY
    var currentDate = new Date();
    var day = String(currentDate.getDate()).padStart(2, '0');
    var month = String(currentDate.getMonth() + 1).padStart(2, '0'); // Январь - это 0!
    var year = currentDate.getFullYear();
    var formattedDate = day + '-' + month + '-' + year;

    // Создание регулярного выражения с текущей датой
    var expectedPattern = new RegExp('^Событие успешно добавлено на ' + formattedDate + " 00:00 тест событие 1! Выполнен выход в главное меню ");

    // Проверка наличия объекта
    pm.expect(jsonData).to.have.property('response');

    // Проверка, что response является объектом
    pm.expect(jsonData.response).to.be.an('object');

    // Проверка наличия ключа внутри объекта
    pm.expect(jsonData.response).to.have.property('text');
    pm.expect(jsonData.response).to.have.property('end_session');

    // Проверка значения ключа внутри объекта
    pm.expect(jsonData.response.text).to.match(expectedPattern);
    pm.expect(jsonData.response.end_session).to.eql(false);

});

//------------------------------------------------------------------------------

pm.test("1. Проверка text", function () {
    let jsonData = pm.response.json();

    // Получаем день недели из запроса
    let requestBody = JSON.parse(pm.request.body.raw);
    let actions =  requestBody.state.session.actions;
     console.log(actions);

    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction
     
    let command = requestBody.request.command;
    let is_valid_command = jsonData.response.text.includes(command);
   

    // Функция для получения следующей даты определенного дня недели
    function getNextvalueAction(dayName) {
        const days = ['воскресенье', 'понедельник', 'вторник', 'среда', 'четверг', 'пятница', 'суббота'];
        const today = new Date();
        const dayIndex = days.indexOf(dayName);
        if (dayIndex === -1) return null;
        
        const targetDate = new Date(today);
        targetDate.setDate(today.getDate() + (dayIndex + 7 - today.getDay()) % 7);
        return targetDate;
    }
    
    // Получаем ближайшую дату для указанного дня недели
    let targetDate = getNextvalueAction(valueAction);
    console.log(targetDate);
   
    // Форматируем дату в DD-MM-YYYY
    let formattedDate = targetDate.getDate().toString().padStart(2, '0') + '-' +
                        (targetDate.getMonth() + 1).toString().padStart(2, '0') + '-' +
                        targetDate.getFullYear();
   

 /*   let is_expect_date = jsonData.response.text.includes("Событие успешно добавлено на " + formattedDate);
    console.log("Ожидаемая дата?:", is_expect_date);  
 */
     // Создание регулярного выражения с ожидаемой датой
    let expectedPattern = new RegExp('^Событие успешно добавлено на ' + formattedDate + " 00:00 тест событие 1! Выполнен выход в главное меню ");

    
    // Проверка command
    pm.expect(jsonData).to.have.property('response');
    
    // Проверка, что response является объектом
    pm.expect(jsonData.response).to.be.an('object');
    
    // Проверка наличия ключа внутри объекта
    pm.expect(jsonData.response).to.have.property('text');
    pm.expect(jsonData.response).to.have.property('end_session');
    
    // Проверка значения ключа внутри объекта
    pm.expect(jsonData.response.text).to.match(expectedPattern);
    pm.expect(jsonData.response.text).to.include(command); 
    pm.expect(jsonData.response.end_session).to.eql(false);

});

_________________ 
pm.test("3. Проверка'days' {}", function () {
    var jsonData = pm.response.json();
    
    // Проверяем наличие user_state_update в ответе
    pm.expect(jsonData).to.have.property('user_state_update');
    pm.expect(jsonData.user_state_update).to.be.an('object');

    // Проверяем наличие week внутри user_state_update
    pm.expect(jsonData.user_state_update).to.have.property('week');
    pm.expect(jsonData.user_state_update.week).to.be.an('object');

    // Проверяем наличие days внутри week
    pm.expect(jsonData.user_state_update.week).to.have.property('days');

    // Проверяем, что days является пустым объектом
    pm.expect(jsonData.user_state_update.week.days).to.be.an('object').that.is.empty;   
});

//---------------------------------------------------------------------------
Функция 
// Генерация текущей даты в формате DD-MM-YYYY

function generateCurrentDate() {
    var currentDate = new Date();
    var day = String(currentDate.getDate()).padStart(2, '0');
    var month = String(currentDate.getMonth() + 1).padStart(2, '0'); // Январь - это 0!
    var year = currentDate.getFullYear();
    return day + '-' + month + '-' + year;
}
// --------------------------------------------------------------------------
pm.test("1. Проверка text с currentDate", function () {
    var jsonData = pm.response.json();
    var formattedDate = generateCurrentDate()

    // Создание регулярного выражения с текущей датой
    var expectedPattern = new RegExp('^Событие успешно добавлено на ' + formattedDate + " 00:00 тест событие 1! Выполнен выход в главное меню ");

    // Проверка наличия объекта
    pm.expect(jsonData).to.have.property('response');

    // Проверка, что response является объектом
    pm.expect(jsonData.response).to.be.an('object');

    // Проверка наличия ключа внутри объекта
    pm.expect(jsonData.response).to.have.property('text');
    pm.expect(jsonData.response).to.have.property('end_session');

    // Проверка значения ключа внутри объекта
    pm.expect(jsonData.response.text).to.match(expectedPattern);
    pm.expect(jsonData.response.end_session).to.eql(false);

});
//-------------------------------------------------------------------------------
  pm.test("2. Значение ключей 'message_id' внутри 'session'", function () {
    var jsonData = pm.response.json();
    
    // Проверяем наличие объекта 'session' в ответе
    pm.expect(jsonData).to.have.property('session'); 
   
    // Проверяем наличие ключей внутри 'session'
	pm.expect(jsonData.session).to.have.property('message_id');
	
    // Проверяем, что значение ключей
	 pm.expect(jsonData.session.message_id).to.equal(3);
    
});
//------------------------------------------------------------------------------

pm.test("3. Проверка user_state_update", function () {
    var jsonData = pm.response.json();
    var formattedDate = generateCurrentDate()

    // Дополнительные проверки значений
    if (jsonData.user_state_update.week.days[formattedDate][0].time !== "00:00") {
        console.log("Ошибка: ожидалось значение '00:00' для time в первом элементе, но получено", jsonData.user_state_update.week.days[formattedDate][0].time);
    }
    if (jsonData.user_state_update.week.days[formattedDate][0].name !== "тест событие 1") {
        console.log("Ошибка: ожидалось значение 'тест событие 1' для name в первом элементе, но получено", jsonData.user_state_update.week.days[formattedDate][0].name);
    }	
    
    // Проверяем наличие и тип user_state_update
    pm.expect(jsonData).to.have.property('user_state_update');
    pm.expect(jsonData.user_state_update).to.be.an('object');

    // Проверяем наличие и тип object3 внутри user_state_update
    pm.expect(jsonData.user_state_update).to.have.property('week');
    pm.expect(jsonData.user_state_update.week).to.be.an('object');

    // Проверяем наличие и тип days внутри week
    pm.expect(jsonData.user_state_update.week).to.have.property('days');
    pm.expect(jsonData.user_state_update.week.days).to.be.an('object');

    // Проверяем наличие и тип {{currentDate}} внутри days
    pm.expect(jsonData.user_state_update.week.days).to.have.property(formattedDate);
    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.be.an('array');

    // Проверяем, что formattedDate содержит 2 элемента
    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.have.lengthOf(1);

    // Проверяем первый элемент formattedDate
    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('time', "00:00");
    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('name', "тест событие 1");  
});


//-------------------------------------------------------------------------------
pm.test("4. Проверка отсутствия user_state_update", function () {
    var jsonData = pm.response.json();
    pm.expect(jsonData).to.not.have.property('user_state_update');
});

_____________________________________ 
{
                        "number": 0,
                        "valueAction": "добавь событие",
                        "operation": "ADD_EVENT"
                    },
                    {
                        "number": 1,
                        "prevOperation": "ADD_EVENT",
                        "valueAction": "вторник",
                        "operation": "ADD_DAY"
                    },
                    {
                        "number": 2,
                        "prevOperation": "ADD_DAY",
                        "valueAction": "десять часов",
                        "operation": "ADD_TIME"
                    }
					
					
__________________________________________
исправление для текущей даты от AI 

pm.test("1. Проверка text", function () {
    var jsonData = pm.response.json();

    // Получаем день недели из запроса
    let requestBody = JSON.parse(pm.request.body.raw);
    let actions =  requestBody.state.session.actions;

    var valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction

    // Функция для получения следующей даты определенного дня недели
    function getNextvalueAction(dayName) {
        const days = ['воскресенье', 'понедельник', 'вторник', 'среда', 'четверг', 'пятница', 'суббота'];
        const today = new Date();
        const dayIndex = days.indexOf(dayName);
        if (dayIndex === -1) return null;
        
        const targetDate = new Date(today);
        targetDate.setDate(today.getDate() + (dayIndex + 7 - today.getDay()) % 7);
        return targetDate;
    }
    
    // Получаем ближайшую дату для указанного дня недели
    var targetDate = getNextvalueAction(valueAction);
    if (!targetDate) {
        console.log("Некорректное значение дня недели");
        return; // Exit the test if the day name is incorrect
    }
    console.log(targetDate);
   
    // Форматируем дату в DD-MM-YYYY
    var formattedDate = targetDate.getDate().toString().padStart(2, '0') + '-' +
                        (targetDate.getMonth() + 1).toString().padStart(2, '0') + '-' +
                        targetDate.getFullYear();
    console.log("Ожидаемая дата:", formattedDate);  


     // Создание регулярного выражения с ожидаемой датой
    var expectedPattern = new RegExp('^Событие успешно добавлено на ' + formattedDate );

    
    // Проверка наличия объекта
    pm.expect(jsonData).to.have.property('response');
    
    // Проверка, что response является объектом
    pm.expect(jsonData.response).to.be.an('object');
    
    // Проверка наличия ключа внутри объекта
    pm.expect(jsonData.response).to.have.property('text');
    pm.expect(jsonData.response).to.have.property('end_session');
    
    // Проверка значения ключа внутри объекта
    pm.expect(jsonData.response.text).to.match(expectedPattern);
    pm.expect(jsonData.response.end_session).to.eql(false);

});


//-------------------------------------------------------------------------------
pm.test("3. Проверка 'prevActions'", function () {
    var jsonData = pm.response.json();

    // Проверяем наличие session_state в ответе
    pm.expect(jsonData).to.have.property('session_state');
    pm.expect(jsonData.session_state).to.be.an('object');

    // Проверяем наличие actions внутри session_state
    pm.expect(jsonData.session_state).to.have.property('actions');
    pm.expect(jsonData.session_state.actions).to.be.an('object');

    // Проверяем наличие prevActions внутри actions
    pm.expect(jsonData.session_state.actions).to.have.property('prevActions');
    pm.expect(jsonData.session_state.actions.prevActions).to.be.an('array');

    // Проверяем, что prevActions не пустой
    pm.expect(jsonData.session_state.actions.prevActions).to.have.length.above(0);

    // Проверяем ключи в первом элементе prevActions
    pm.expect(jsonData.session_state.actions.prevActions[0]).to.have.property('number');
    pm.expect(jsonData.session_state.actions.prevActions[0]).to.have.property('operation');
    pm.expect(jsonData.session_state.actions.prevActions[0]).to.have.property('valueAction');

    // Проверяем значения ключей
    pm.expect(jsonData.session_state.actions.prevActions[0].number).to.equal(0);
    pm.expect(jsonData.session_state.actions.prevActions[0].operation).to.equal("ADD_EVENT");
    pm.expect(jsonData.session_state.actions.prevActions[0].valueAction).to.equal("добавь событие");

    // Проверяем ключи во втором элементе prevActions
    pm.expect(jsonData.session_state.actions.prevActions[1]).to.have.property('number');
    pm.expect(jsonData.session_state.actions.prevActions[1]).to.have.property('operation');
    pm.expect(jsonData.session_state.actions.prevActions[1]).to.have.property('prevOperation');
    pm.expect(jsonData.session_state.actions.prevActions[1]).to.have.property('valueAction');

    // Проверяем значения ключей
    pm.expect(jsonData.session_state.actions.prevActions[1].number).to.equal(1);
    pm.expect(jsonData.session_state.actions.prevActions[1].operation).to.equal("ADD_DAY");
    pm.expect(jsonData.session_state.actions.prevActions[1].prevOperation).to.equal("ADD_EVENT");
    pm.expect(jsonData.session_state.actions.prevActions[1].valueAction).to.equal("сегодня");

        // Проверяем ключи во третьем элементе prevActions
    pm.expect(jsonData.session_state.actions.prevActions[1]).to.have.property('number');
    pm.expect(jsonData.session_state.actions.prevActions[1]).to.have.property('operation');
    pm.expect(jsonData.session_state.actions.prevActions[1]).to.have.property('prevOperation');
    pm.expect(jsonData.session_state.actions.prevActions[1]).to.have.property('valueAction');

    // Проверяем значения ключей
    pm.expect(jsonData.session_state.actions.prevActions[1].number).to.equal(2);
    pm.expect(jsonData.session_state.actions.prevActions[1].operation).to.equal("ADD_TIME");
    pm.expect(jsonData.session_state.actions.prevActions[1].prevOperation).to.equal("ADD_DAY");
    pm.expect(jsonData.session_state.actions.prevActions[1].valueAction).to.equal("ноль часов ноль");

});

        "user_id": "{{user_id}}",
        "session_id": "{{session_id}}",	
		
		        "user_id": "8783711111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "session_id": "b6dc6eee1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
		
		


 // Вывод для отладки
    console.log("Ожидаемый паттерн:", expectedPattern);
    console.log("Фактическое значение:", jsonData.response.text);		
		
_____________________ 


pm.test("1. Проверка text", function () {
    var jsonData = pm.response.json();
    
    // Проверка наличия объекта
    pm.expect(jsonData).to.have.property('response');
    
    // Проверка, что объект_тест является объектом
    pm.expect(jsonData.response).to.be.an('object');
    
    // Проверка наличия ключа внутри объекта
    pm.expect(jsonData.response).to.have.property('text');
    pm.expect(jsonData.response).to.have.property('end_session');
    
    // Проверка значения ключа внутри объекта
    pm.expect(jsonData.response.text).to.eql('Планировщик недели прощается с вами! До свидания!');
    pm.expect(jsonData.response.end_session).to.eql(false);
    });
_____________________ 
pm.expect(jsonData.response.end_session).to.eql(false);

true

//-------------------------------------------------------------------------------
pm.test("3. Проверка структуры ответа и значения 'prevActions.number'", function () {
    var jsonData = pm.response.json();

    // Проверяем наличие session_state в ответе
    pm.expect(jsonData).to.have.property('session_state');
    pm.expect(jsonData.session_state).to.be.an('object');

    // Проверяем наличие actions внутри session_state
    pm.expect(jsonData.session_state).to.have.property('actions');
    pm.expect(jsonData.session_state.actions).to.be.an('object');

    // Проверяем наличие prevActions внутри actions
    pm.expect(jsonData.session_state.actions).to.have.property('prevActions');
    pm.expect(jsonData.session_state.actions.prevActions).to.be.an('array');

    // Проверяем, что prevActions не пустой
    pm.expect(jsonData.session_state.actions.prevActions).to.have.length.above(0);

    // Проверяем наличие number в первом элементе prevActions
    pm.expect(jsonData.session_state.actions.prevActions[0]).to.have.property('number');

    // Проверяем, что number равен 0
    pm.expect(jsonData.session_state.actions.prevActions[0].number).to.equal(0);

});

//-------------------------------------------------------------------------------
pm.test("3. Проверка структуры ответа и значения 'prevActions.number'", function () {
    var jsonData = pm.response.json();

    // Проверяем наличие session_state в ответе
    pm.expect(jsonData).to.have.property('session_state');
    pm.expect(jsonData.session_state).to.be.an('object');

    // Проверяем наличие actions внутри session_state
    pm.expect(jsonData.session_state).to.have.property('actions');
    pm.expect(jsonData.session_state.actions).to.be.an('object');

    // Проверяем наличие prevActions внутри actions
    pm.expect(jsonData.session_state.actions).to.have.property('prevActions');
    pm.expect(jsonData.session_state.actions.prevActions).to.be.an('array');

    // Проверяем, что prevActions не пустой
    pm.expect(jsonData.session_state.actions.prevActions).to.have.length.above(0);

    // Проверяем ключи в первом элементе prevActions
    pm.expect(jsonData.session_state.actions.prevActions[0]).to.have.property('number');
    pm.expect(jsonData.session_state.actions.prevActions[0]).to.have.property('operation');
    pm.expect(jsonData.session_state.actions.prevActions[0]).to.have.property('valueAction');

    // Проверяем значения ключей
    pm.expect(jsonData.session_state.actions.prevActions[0].number).to.equal(0);
    pm.expect(jsonData.session_state.actions.prevActions[0].operation).to.equal("ADD_EVENT");
    pm.expect(jsonData.session_state.actions.prevActions[0].valueAction).to.equal("добавь событие");

});


//-------------------------------------------------------------------------------
pm.test("3. Проверка 'prevActions'", function () {
    var jsonData = pm.response.json();

    // Проверяем наличие session_state в ответе
    pm.expect(jsonData).to.have.property('session_state');
    pm.expect(jsonData.session_state).to.be.an('object');

    // Проверяем наличие actions внутри session_state
    pm.expect(jsonData.session_state).to.have.property('actions');
    pm.expect(jsonData.session_state.actions).to.be.an('object');

    // Проверяем наличие prevActions внутри actions
    pm.expect(jsonData.session_state.actions).to.have.property('prevActions');
    pm.expect(jsonData.session_state.actions.prevActions).to.be.an('array');

    // Проверяем, что prevActions не пустой
    pm.expect(jsonData.session_state.actions.prevActions).to.have.length.above(0);

    // Проверяем ключи в первом элементе prevActions
    pm.expect(jsonData.session_state.actions.prevActions[0]).to.have.property('number');
    pm.expect(jsonData.session_state.actions.prevActions[0]).to.have.property('operation');
    pm.expect(jsonData.session_state.actions.prevActions[0]).to.have.property('valueAction');

    // Проверяем значения ключей
    pm.expect(jsonData.session_state.actions.prevActions[0].number).to.equal(0);
    pm.expect(jsonData.session_state.actions.prevActions[0].operation).to.equal("ADD_EVENT");
    pm.expect(jsonData.session_state.actions.prevActions[0].valueAction).to.equal("добавь событие");

    // Проверяем ключи во втором элементе prevActions
    pm.expect(jsonData.session_state.actions.prevActions[1]).to.have.property('number');
    pm.expect(jsonData.session_state.actions.prevActions[1]).to.have.property('operation');
    pm.expect(jsonData.session_state.actions.prevActions[1]).to.have.property('prevOperation');
    pm.expect(jsonData.session_state.actions.prevActions[1]).to.have.property('valueAction');

    // Проверяем значения ключей
    pm.expect(jsonData.session_state.actions.prevActions[1].number).to.equal(1);
    pm.expect(jsonData.session_state.actions.prevActions[1].operation).to.equal("ADD_DAY");
    pm.expect(jsonData.session_state.actions.prevActions[1].prevOperation).to.equal("ADD_EVENT");
    pm.expect(jsonData.session_state.actions.prevActions[1].valueAction).to.equal("сегодня");

});
//-------------------------------------------------------------------------------
  pm.test("2. Значение ключей 'message_id' внутри 'session'", function () {
    var jsonData = pm.response.json();
    
    // Проверяем наличие объекта 'session' в ответе
    pm.expect(jsonData).to.have.property('session'); 
   
    // Проверяем наличие ключей внутри 'session'
	pm.expect(jsonData.session).to.have.property('message_id');
	
    // Проверяем, что значение ключей
	 pm.expect(jsonData.session.message_id).to.equal(3);
    
});

//-------------------------------------------------------------------------------

pm.test("5. Проверка структуры ответа и значений в user_state_update", function () {
    var jsonData = pm.response.json();

     // Дополнительные проверки значений
    if (jsonData.user_state_update.week.days["{{currentDate}}"][0].time !== "12:00") {
        console.log("Ошибка: ожидалось значение '01:00' для time в первом элементе, но получено", jsonData.user_state_update.week.days["{{currentDate}}"][0].time);
    }
    if (jsonData.user_state_update.week.days["{{currentDate}}"][0].name !== "Прогулка на берегу моря") {
        console.log("Ошибка: ожидалось значение 'Прогулка на берегу моря' для name в первом элементе, но получено", jsonData.user_state_update.week.days["{{currentDate}}"][0].name);
    }
	
	 if (jsonData.user_state_update.week.days["{{currentDate}}"][1].time !== "14:00") {
        console.log("Ошибка: ожидалось значение '14:00' для time во втором элементе, но получено", jsonData.user_state_update.week.days["{{currentDate}}"][1].time);	
	}
	
    if (jsonData.user_state_update.week.days["{{currentDate}}"][1].name !== "Поздний обед") {
        console.log("Ошибка: ожидалось значение 'Поздний обед' для name во втором элементе, но получено", jsonData.user_state_update.week.days["{{currentDate}}"][1].name);
    }
	

    // Проверяем наличие и тип user_state_update
    pm.expect(jsonData).to.have.property('user_state_update');
    pm.expect(jsonData.user_state_update).to.be.an('object');

    // Проверяем наличие и тип object3 внутри user_state_update
    pm.expect(jsonData.user_state_update).to.have.property('week');
    pm.expect(jsonData.user_state_update.week).to.be.an('object');

    // Проверяем наличие и тип days внутри week
    pm.expect(jsonData.user_state_update.week).to.have.property('days');
    pm.expect(jsonData.user_state_update.week.days).to.be.an('object');

    // Проверяем наличие и тип {{currentDate}} внутри days
    pm.expect(jsonData.user_state_update.week.days).to.have.property('{{currentDate}}');
    pm.expect(jsonData.user_state_update.week.days["{{currentDate}}"]).to.be.an('array');

    // Проверяем, что "{{currentDate}}" содержит 2 элемента
    pm.expect(jsonData.user_state_update.week.days["{{currentDate}}"]).to.have.lengthOf(2);

    // Проверяем первый элемент "{{currentDate}}"
    pm.expect(jsonData.user_state_update.week.days["{{currentDate}}"][0]).to.have.property('time', "12:00");
    pm.expect(jsonData.user_state_update.week.days["{{currentDate}}"][0]).to.have.property('name', "Прогулка на берегу моря");

    // Проверяем второй элемент "{{currentDate}}"
    pm.expect(jsonData.user_state_update.week.days["{{currentDate}}"][1]).to.have.property('time', "14:00");
    pm.expect(jsonData.user_state_update.week.days["{{currentDate}}"][1]).to.have.property('name', "Поздний обед");

});


//когда нет pre реквеста

pm.test("3. Проверка user_state_update", function () {
    var jsonData = pm.response.json();

     // Дополнительные проверки значений
    if (jsonData.user_state_update.week.days[formattedDate][0].time !== "00:00") {
        console.log("Ошибка: ожидалось значение '00:00' для time в первом элементе, но получено", jsonData.user_state_update.week.days[formattedDate][0].time);
    }
    if (jsonData.user_state_update.week.days[formattedDate][0].name !== "тест событие 1") {
        console.log("Ошибка: ожидалось значение 'тест событие 1' для name в первом элементе, но получено", jsonData.user_state_update.week.days[formattedDate][0].name);
    }	
	 
    // Проверяем наличие и тип user_state_update
    pm.expect(jsonData).to.have.property('user_state_update');
    pm.expect(jsonData.user_state_update).to.be.an('object');

    // Проверяем наличие и тип object3 внутри user_state_update
    pm.expect(jsonData.user_state_update).to.have.property('week');
    pm.expect(jsonData.user_state_update.week).to.be.an('object');

    // Проверяем наличие и тип days внутри week
    pm.expect(jsonData.user_state_update.week).to.have.property('days');
    pm.expect(jsonData.user_state_update.week.days).to.be.an('object');

    // Проверяем наличие и тип {{currentDate}} внутри days
    pm.expect(jsonData.user_state_update.week.days).to.have.property(formattedDate);
    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.be.an('array');

    // Проверяем, что formattedDate содержит 2 элемента
    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.have.lengthOf(1);

    // Проверяем первый элемент formattedDate
    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('time', "00:00");
    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('name', "тест событие 1");   

});

//-------------------------------------------------------------------------------
pm.test("3. Проверка структуры ответа и значений в user_state_update, pastDate и futureDate", function () {
    var jsonData = pm.response.json();

     // Дополнительные проверки значений
    if (jsonData.user_state_update.week.days[pm.variables.get('pastDate')][0].time !== "12:00") {
        console.log("Ошибка: ожидалось значение '01:00' для time в первом элементе, но получено", jsonData.user_state_update.week.days[pm.variables.get('pastDate')][0].time);
    }
    if (jsonData.user_state_update.week.days[pm.variables.get('pastDate')][0].name !== "Прогулка на берегу моря") {
        console.log("Ошибка: ожидалось значение 'Прогулка на берегу моря' для name в первом элементе, но получено", jsonData.user_state_update.week.days[pm.variables.get('pastDate')][0].name);
    }	
	if (jsonData.user_state_update.week.days[pm.variables.get('pastDate')][1].time !== "14:00") {
        console.log("Ошибка: ожидалось значение '14:00' для time во втором элементе, но получено", jsonData.user_state_update.week.days[pm.variables.get('pastDate')][1].time);	
	}	
    if (jsonData.user_state_update.week.days[pm.variables.get('pastDate')][1].name !== "Поздний обед") {
        console.log("Ошибка: ожидалось значение 'Поздний обед' для name во втором элементе, но получено", jsonData.user_state_update.week.days[pm.variables.get('pastDate')][1].name);
    }
	
	if (jsonData.user_state_update.week.days[pm.variables.get('futureDate')][0].time !== "13:30") {
        console.log("Ошибка: ожидалось значение '13:30' для time в первом элементе, но получено", jsonData.user_state_update.week.days[pm.variables.get('futureDate')][0].time);
    }
    if (jsonData.user_state_update.week.days[pm.variables.get('futureDate')][0].name !== "Приготовить асаду") {
        console.log("Ошибка: ожидалось значение 'Приготовить асаду' для name в первом элементе, но получено", jsonData.user_state_update.week.days[pm.variables.get('futureDate')][0].name);
    }
	
	 if (jsonData.user_state_update.week.days[pm.variables.get('futureDate')][1].time !== "09:10") {
        console.log("Ошибка: ожидалось значение '09:10' для time во втором элементе, но получено", jsonData.user_state_update.week.days[pm.variables.get('futureDate')][1].time);	
	}
	
    if (jsonData.user_state_update.week.days[pm.variables.get('futureDate')][1].name !== "Прогуляться по утреннему Буэнос- Айресу и выругаться по поводу эмиграции") {
        console.log("Ошибка: ожидалось значение 'Прогуляться по утреннему Буэнос- Айресу и выругаться по поводу эмиграции' для name во втором элементе, но получено", jsonData.user_state_update.week.days[pm.variables.get('futureDate')][1].name);
    }
	
    // Проверяем наличие и тип user_state_update
    pm.expect(jsonData).to.have.property('user_state_update');
    pm.expect(jsonData.user_state_update).to.be.an('object');

    // Проверяем наличие и тип object3 внутри user_state_update
    pm.expect(jsonData.user_state_update).to.have.property('week');
    pm.expect(jsonData.user_state_update.week).to.be.an('object');

    // Проверяем наличие и тип days внутри week
    pm.expect(jsonData.user_state_update.week).to.have.property('days');
    pm.expect(jsonData.user_state_update.week.days).to.be.an('object');

    // Проверяем наличие и тип {{pastDate}} внутри days
    pm.expect(jsonData.user_state_update.week.days).to.have.property(pm.variables.get('pastDate'));
    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('pastDate')]).to.be.an('array');
	
	    // Проверяем наличие и тип {{futureDate}} внутри days
    pm.expect(jsonData.user_state_update.week.days).to.have.property(pm.variables.get('futureDate'));
    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('futureDate')]).to.be.an('array');

    // Проверяем, что 'pastDate' содержит 2 элемента
    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('pastDate')]).to.have.lengthOf(2);
	
	// Проверяем, что 'futureDate' содержит 2 элемента
    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('futureDate')]).to.have.lengthOf(2);

    // Проверяем первый элемент 'pastDate'
    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('pastDate')][0]).to.have.property('time', "12:00");
    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('pastDate')][0]).to.have.property('name', "Прогулка на берегу моря");

    // Проверяем второй элемент 'pastDate'
    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('pastDate')][1]).to.have.property('time', "14:00");
    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('pastDate')][1]).to.have.property('name', "Поздний обед");
	
	// Проверяем первый элемент 'futureDate'
    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('futureDate')][0]).to.have.property('time', "13:30");
    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('futureDate')][0]).to.have.property('name', "Приготовить асаду");

    // Проверяем второй элемент 'futureDate'
    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('futureDate')][1]).to.have.property('time', "09:10");
    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('futureDate')][1]).to.have.property('name', "Прогуляться по утреннему Буэнос- Айресу и выругаться по поводу эмиграции");
});

//-------------------------------------------------------------------------------
с фунцией, когда нет пререквеста

// Генерация текущей даты в формате DD-MM-YYYY

function generateCurrentDate() {
    var currentDate = new Date();
    var day = String(currentDate.getDate()).padStart(2, '0');
    var month = String(currentDate.getMonth() + 1).padStart(2, '0'); // Январь - это 0!
    var year = currentDate.getFullYear();
    return day + '-' + month + '-' + year;
}
// 
pm.test("1. Проверка text с currentDate", function () {
    var jsonData = pm.response.json();
    var formattedDate = generateCurrentDate()

    // Создание регулярного выражения с текущей датой
    var expectedPattern = new RegExp('^Ваши события на сегодня ' + formattedDate + " 00:00 Поздний обед00, 01:00 Поздний обед01, 02:00 Поздний обед02, 03:00 Поздний обед03, 04:00 Поздний обед04, 10:00 Поздний обед10, 11:00 Поздний обед11, 12:00 Прогулка на берегу моря12, 14:00 Поздний обед14, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 17:00 Поздний обед17");

    // Проверка наличия объекта
    pm.expect(jsonData).to.have.property('response');

    // Проверка, что response является объектом
    pm.expect(jsonData.response).to.be.an('object');

    // Проверка наличия ключа внутри объекта
    pm.expect(jsonData.response).to.have.property('text');
    pm.expect(jsonData.response).to.have.property('end_session');

    // Проверка значения ключа внутри объекта
    pm.expect(jsonData.response.text).to.match(expectedPattern);
    pm.expect(jsonData.response.end_session).to.eql(false);

});
//-------------------------------------------------------------------------------




//-------------------------------------------------------------------------------
pm.test("0.2 Значение ключей user_id, session_id внутри 'session'", function () {
    var jsonData = pm.response.json();
    
    // Проверяем наличие объекта 'session' в ответе
    pm.expect(jsonData).to.have.property('session');
    
    // Проверяем наличие ключей'  
    pm.expect(jsonData.session).to.have.property('user_id');
     pm.expect(jsonData.session).to.have.property('session_id');
    
    // Проверяем значения ключей 
    pm.expect(jsonData.session.user_id).to.equal('b4fde534');
    pm.expect(jsonData.session.session_id).to.equal('ffb392fd');  
});

//-------------------------------------------------------------------------------

pm.test("1. Проверка text", function () {
    var jsonData = pm.response.json();
    
    // Генерация текущей даты в формате DD-MM-YYYY
    var currentDate = new Date();
    var day = String(currentDate.getDate()).padStart(2, '0');
    var month = String(currentDate.getMonth() + 1).padStart(2, '0'); // Январь - это 0!
    var year = currentDate.getFullYear();
    var formattedDate = day + '-' + month + '-' + year;
    
    // Создание регулярного выражения с текущей датой
    var expectedPattern = new RegExp('^Ваши события на сегодня ' + formattedDate + ' 12:00 Прогулка на берегу моря, 14:00 Поздний обед');
    
    // Проверка наличия объекта
    pm.expect(jsonData).to.have.property('response');
    
    // Проверка, что response является объектом
    pm.expect(jsonData.response).to.be.an('object');
    
    // Проверка наличия ключа внутри объекта
    pm.expect(jsonData.response).to.have.property('text');
    
    // Проверка значения ключа внутри объекта
    pm.expect(jsonData.response.text).to.match(expectedPattern);   
   
});

//-------------------------------------------------------------------------------
pm.test("1. Проверка text", function () {
    var jsonData = pm.response.json();
    
    
    // Создание регулярного выражения с текущей датой
    var expectedPattern = new RegExp('^Ваши события ' + pm.variables.get('pastDate') + ' 17:00 Велосипедная прогулка, 20:00 Ужин, ' + pm.variables.get('curDate') + ' 17:00 Ужин, 17:01 Велосипедная прогулка, ' + pm.variables.get('futureDate') + ' 09:00 Поздний обед, 15:00 Прогулка на берегу моря');
    
    // Проверка наличия объекта
    pm.expect(jsonData).to.have.property('response');
    
    // Проверка, что response является объектом
    pm.expect(jsonData.response).to.be.an('object');
    
    // Проверка наличия ключа внутри объекта
    pm.expect(jsonData.response).to.have.property('text');
    
    // Проверка значения ключа внутри объекта
    pm.expect(jsonData.response.text).to.match(expectedPattern);   
   
});
//-------------------------------------------------------------------------------
pm.test("1. Проверка text", function () {
    var jsonData = pm.response.json();
    
    
    // Создание регулярного выражения с текущей датой
    var expectedPattern = new RegExp('^Событие успешно добавлено на ' + pm.variables.get('curDate') + ' 00:00 тест событие 1! Выполнен выход в главное меню ');
    
    // Проверка наличия объекта
    pm.expect(jsonData).to.have.property('response');
    
    // Проверка, что response является объектом
    pm.expect(jsonData.response).to.be.an('object');
    
    // Проверка наличия ключа внутри объекта
    pm.expect(jsonData.response).to.have.property('text');
	pm.expect(jsonData.response).to.have.property('end_session');
    
    // Проверка значения ключа внутри объекта
    pm.expect(jsonData.response.text).to.match(expectedPattern); 
	pm.expect(jsonData.response.end_session).to.eql(false);
   
});

//------------------------------------------------------------------------------


pm.test("1. Проверка text с currentDate", function () {
    var jsonData = pm.response.json();

    // Генерация текущей даты в формате DD-MM-YYYY
    var currentDate = new Date();
    var day = String(currentDate.getDate()).padStart(2, '0');
    var month = String(currentDate.getMonth() + 1).padStart(2, '0'); // Январь - это 0!
    var year = currentDate.getFullYear();
    var formattedDate = day + '-' + month + '-' + year;

    // Создание регулярного выражения с текущей датой
    var expectedPattern = new RegExp('^Событие успешно добавлено на ' + formattedDate + " 00:00 тест событие 1! Выполнен выход в главное меню ");

    // Проверка наличия объекта
    pm.expect(jsonData).to.have.property('response');

    // Проверка, что response является объектом
    pm.expect(jsonData.response).to.be.an('object');

    // Проверка наличия ключа внутри объекта
    pm.expect(jsonData.response).to.have.property('text');
    pm.expect(jsonData.response).to.have.property('end_session');

    // Проверка значения ключа внутри объекта
    pm.expect(jsonData.response.text).to.match(expectedPattern);
    pm.expect(jsonData.response.end_session).to.eql(false);

});

//------------------------------------------------------------------------------

pm.test("1. Проверка text", function () {
    let jsonData = pm.response.json();

    // Получаем день недели из запроса
    let requestBody = JSON.parse(pm.request.body.raw);
    let actions =  requestBody.state.session.actions;
     console.log(actions);

    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction
     
    let command = requestBody.request.command;
    let is_valid_command = jsonData.response.text.includes(command);
   

    // Функция для получения следующей даты определенного дня недели
    function getNextvalueAction(dayName) {
        const days = ['воскресенье', 'понедельник', 'вторник', 'среда', 'четверг', 'пятница', 'суббота'];
        const today = new Date();
        const dayIndex = days.indexOf(dayName);
        if (dayIndex === -1) return null;
        
        const targetDate = new Date(today);
        targetDate.setDate(today.getDate() + (dayIndex + 7 - today.getDay()) % 7);
        return targetDate;
    }
    
    // Получаем ближайшую дату для указанного дня недели
    let targetDate = getNextvalueAction(valueAction);
    console.log(targetDate);
   
    // Форматируем дату в DD-MM-YYYY
    let formattedDate = targetDate.getDate().toString().padStart(2, '0') + '-' +
                        (targetDate.getMonth() + 1).toString().padStart(2, '0') + '-' +
                        targetDate.getFullYear();
   

 /*   let is_expect_date = jsonData.response.text.includes("Событие успешно добавлено на " + formattedDate);
    console.log("Ожидаемая дата?:", is_expect_date);  
 */
     // Создание регулярного выражения с ожидаемой датой
    let expectedPattern = new RegExp('^Событие успешно добавлено на ' + formattedDate + " 00:00 тест событие 1! Выполнен выход в главное меню ");

    
    // Проверка command
    pm.expect(jsonData).to.have.property('response');
    
    // Проверка, что response является объектом
    pm.expect(jsonData.response).to.be.an('object');
    
    // Проверка наличия ключа внутри объекта
    pm.expect(jsonData.response).to.have.property('text');
    pm.expect(jsonData.response).to.have.property('end_session');
    
    // Проверка значения ключа внутри объекта
    pm.expect(jsonData.response.text).to.match(expectedPattern);
    pm.expect(jsonData.response.text).to.include(command); 
    pm.expect(jsonData.response.end_session).to.eql(false);

});

_________________ 
pm.test("3. Проверка'days' {}", function () {
    var jsonData = pm.response.json();
    
    // Проверяем наличие user_state_update в ответе
    pm.expect(jsonData).to.have.property('user_state_update');
    pm.expect(jsonData.user_state_update).to.be.an('object');

    // Проверяем наличие week внутри user_state_update
    pm.expect(jsonData.user_state_update).to.have.property('week');
    pm.expect(jsonData.user_state_update.week).to.be.an('object');

    // Проверяем наличие days внутри week
    pm.expect(jsonData.user_state_update.week).to.have.property('days');

    // Проверяем, что days является пустым объектом
    pm.expect(jsonData.user_state_update.week.days).to.be.an('object').that.is.empty;   
});

//---------------------------------------------------------------------------
Функция 
// Генерация текущей даты в формате DD-MM-YYYY

function generateCurrentDate() {
    var currentDate = new Date();
    var day = String(currentDate.getDate()).padStart(2, '0');
    var month = String(currentDate.getMonth() + 1).padStart(2, '0'); // Январь - это 0!
    var year = currentDate.getFullYear();
    return day + '-' + month + '-' + year;
}
// --------------------------------------------------------------------------
pm.test("1. Проверка text с currentDate", function () {
    var jsonData = pm.response.json();
    var formattedDate = generateCurrentDate()

    // Создание регулярного выражения с текущей датой
    var expectedPattern = new RegExp('^Событие успешно добавлено на ' + formattedDate + " 00:00 тест событие 1! Выполнен выход в главное меню ");

    // Проверка наличия объекта
    pm.expect(jsonData).to.have.property('response');

    // Проверка, что response является объектом
    pm.expect(jsonData.response).to.be.an('object');

    // Проверка наличия ключа внутри объекта
    pm.expect(jsonData.response).to.have.property('text');
    pm.expect(jsonData.response).to.have.property('end_session');

    // Проверка значения ключа внутри объекта
    pm.expect(jsonData.response.text).to.match(expectedPattern);
    pm.expect(jsonData.response.end_session).to.eql(false);

});
//-------------------------------------------------------------------------------
  pm.test("2. Значение ключей 'message_id' внутри 'session'", function () {
    var jsonData = pm.response.json();
    
    // Проверяем наличие объекта 'session' в ответе
    pm.expect(jsonData).to.have.property('session'); 
   
    // Проверяем наличие ключей внутри 'session'
	pm.expect(jsonData.session).to.have.property('message_id');
	
    // Проверяем, что значение ключей
	 pm.expect(jsonData.session.message_id).to.equal(3);
    
});
//------------------------------------------------------------------------------

pm.test("3. Проверка user_state_update", function () {
    var jsonData = pm.response.json();
    var formattedDate = generateCurrentDate()

    // Дополнительные проверки значений
    if (jsonData.user_state_update.week.days[formattedDate][0].time !== "00:00") {
        console.log("Ошибка: ожидалось значение '00:00' для time в первом элементе, но получено", jsonData.user_state_update.week.days[formattedDate][0].time);
    }
    if (jsonData.user_state_update.week.days[formattedDate][0].name !== "тест событие 1") {
        console.log("Ошибка: ожидалось значение 'тест событие 1' для name в первом элементе, но получено", jsonData.user_state_update.week.days[formattedDate][0].name);
    }	
    
    // Проверяем наличие и тип user_state_update
    pm.expect(jsonData).to.have.property('user_state_update');
    pm.expect(jsonData.user_state_update).to.be.an('object');

    // Проверяем наличие и тип object3 внутри user_state_update
    pm.expect(jsonData.user_state_update).to.have.property('week');
    pm.expect(jsonData.user_state_update.week).to.be.an('object');

    // Проверяем наличие и тип days внутри week
    pm.expect(jsonData.user_state_update.week).to.have.property('days');
    pm.expect(jsonData.user_state_update.week.days).to.be.an('object');

    // Проверяем наличие и тип {{currentDate}} внутри days
    pm.expect(jsonData.user_state_update.week.days).to.have.property(formattedDate);
    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.be.an('array');

    // Проверяем, что formattedDate содержит 2 элемента
    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.have.lengthOf(1);

    // Проверяем первый элемент formattedDate
    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('time', "00:00");
    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('name', "тест событие 1");  
});


//-------------------------------------------------------------------------------
pm.test("4. Проверка отсутствия user_state_update", function () {
    var jsonData = pm.response.json();
    pm.expect(jsonData).to.not.have.property('user_state_update');
});

_____________________________________ 
{
                        "number": 0,
                        "valueAction": "добавь событие",
                        "operation": "ADD_EVENT"
                    },
                    {
                        "number": 1,
                        "prevOperation": "ADD_EVENT",
                        "valueAction": "вторник",
                        "operation": "ADD_DAY"
                    },
                    {
                        "number": 2,
                        "prevOperation": "ADD_DAY",
                        "valueAction": "десять часов",
                        "operation": "ADD_TIME"
                    }
					
					
__________________________________________
исправление для текущей даты от AI 

pm.test("1. Проверка text", function () {
    var jsonData = pm.response.json();

    // Получаем день недели из запроса
    let requestBody = JSON.parse(pm.request.body.raw);
    let actions =  requestBody.state.session.actions;

    var valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction

    // Функция для получения следующей даты определенного дня недели
    function getNextvalueAction(dayName) {
        const days = ['воскресенье', 'понедельник', 'вторник', 'среда', 'четверг', 'пятница', 'суббота'];
        const today = new Date();
        const dayIndex = days.indexOf(dayName);
        if (dayIndex === -1) return null;
        
        const targetDate = new Date(today);
        targetDate.setDate(today.getDate() + (dayIndex + 7 - today.getDay()) % 7);
        return targetDate;
    }
    
    // Получаем ближайшую дату для указанного дня недели
    var targetDate = getNextvalueAction(valueAction);
    if (!targetDate) {
        console.log("Некорректное значение дня недели");
        return; // Exit the test if the day name is incorrect
    }
    console.log(targetDate);
   
    // Форматируем дату в DD-MM-YYYY
    var formattedDate = targetDate.getDate().toString().padStart(2, '0') + '-' +
                        (targetDate.getMonth() + 1).toString().padStart(2, '0') + '-' +
                        targetDate.getFullYear();
    console.log("Ожидаемая дата:", formattedDate);  


     // Создание регулярного выражения с ожидаемой датой
    var expectedPattern = new RegExp('^Событие успешно добавлено на ' + formattedDate );

    
    // Проверка наличия объекта
    pm.expect(jsonData).to.have.property('response');
    
    // Проверка, что response является объектом
    pm.expect(jsonData.response).to.be.an('object');
    
    // Проверка наличия ключа внутри объекта
    pm.expect(jsonData.response).to.have.property('text');
    pm.expect(jsonData.response).to.have.property('end_session');
    
    // Проверка значения ключа внутри объекта
    pm.expect(jsonData.response.text).to.match(expectedPattern);
    pm.expect(jsonData.response.end_session).to.eql(false);

});


//-------------------------------------------------------------------------------
pm.test("3. Проверка 'prevActions'", function () {
    var jsonData = pm.response.json();

    // Проверяем наличие session_state в ответе
    pm.expect(jsonData).to.have.property('session_state');
    pm.expect(jsonData.session_state).to.be.an('object');

    // Проверяем наличие actions внутри session_state
    pm.expect(jsonData.session_state).to.have.property('actions');
    pm.expect(jsonData.session_state.actions).to.be.an('object');

    // Проверяем наличие prevActions внутри actions
    pm.expect(jsonData.session_state.actions).to.have.property('prevActions');
    pm.expect(jsonData.session_state.actions.prevActions).to.be.an('array');

    // Проверяем, что prevActions не пустой
    pm.expect(jsonData.session_state.actions.prevActions).to.have.length.above(0);

    // Проверяем ключи в первом элементе prevActions
    pm.expect(jsonData.session_state.actions.prevActions[0]).to.have.property('number');
    pm.expect(jsonData.session_state.actions.prevActions[0]).to.have.property('operation');
    pm.expect(jsonData.session_state.actions.prevActions[0]).to.have.property('valueAction');

    // Проверяем значения ключей
    pm.expect(jsonData.session_state.actions.prevActions[0].number).to.equal(0);
    pm.expect(jsonData.session_state.actions.prevActions[0].operation).to.equal("ADD_EVENT");
    pm.expect(jsonData.session_state.actions.prevActions[0].valueAction).to.equal("добавь событие");

    // Проверяем ключи во втором элементе prevActions
    pm.expect(jsonData.session_state.actions.prevActions[1]).to.have.property('number');
    pm.expect(jsonData.session_state.actions.prevActions[1]).to.have.property('operation');
    pm.expect(jsonData.session_state.actions.prevActions[1]).to.have.property('prevOperation');
    pm.expect(jsonData.session_state.actions.prevActions[1]).to.have.property('valueAction');

    // Проверяем значения ключей
    pm.expect(jsonData.session_state.actions.prevActions[1].number).to.equal(1);
    pm.expect(jsonData.session_state.actions.prevActions[1].operation).to.equal("ADD_DAY");
    pm.expect(jsonData.session_state.actions.prevActions[1].prevOperation).to.equal("ADD_EVENT");
    pm.expect(jsonData.session_state.actions.prevActions[1].valueAction).to.equal("сегодня");

        // Проверяем ключи во третьем элементе prevActions
    pm.expect(jsonData.session_state.actions.prevActions[1]).to.have.property('number');
    pm.expect(jsonData.session_state.actions.prevActions[1]).to.have.property('operation');
    pm.expect(jsonData.session_state.actions.prevActions[1]).to.have.property('prevOperation');
    pm.expect(jsonData.session_state.actions.prevActions[1]).to.have.property('valueAction');

    // Проверяем значения ключей
    pm.expect(jsonData.session_state.actions.prevActions[1].number).to.equal(2);
    pm.expect(jsonData.session_state.actions.prevActions[1].operation).to.equal("ADD_TIME");
    pm.expect(jsonData.session_state.actions.prevActions[1].prevOperation).to.equal("ADD_DAY");
    pm.expect(jsonData.session_state.actions.prevActions[1].valueAction).to.equal("ноль часов ноль");

});

        "user_id": "{{user_id}}",
        "session_id": "{{session_id}}",	
		
		        "user_id": "8783711111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "session_id": "b6dc6eee1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
		
		


 // Вывод для отладки
    console.log("Ожидаемый паттерн:", expectedPattern);
    console.log("Фактическое значение:", jsonData.response.text);		
		
_____________________ 


pm.test("1. Проверка text", function () {
    var jsonData = pm.response.json();
    
    // Проверка наличия объекта
    pm.expect(jsonData).to.have.property('response');
    
    // Проверка, что объект_тест является объектом
    pm.expect(jsonData.response).to.be.an('object');
    
    // Проверка наличия ключа внутри объекта
    pm.expect(jsonData.response).to.have.property('text');
    pm.expect(jsonData.response).to.have.property('end_session');
    
    // Проверка значения ключа внутри объекта
    pm.expect(jsonData.response.text).to.eql('Планировщик недели прощается с вами! До свидания!');
    pm.expect(jsonData.response.end_session).to.eql(false);
    });
_____________________ 
pm.expect(jsonData.response.end_session).to.eql(false);

true

//-------------------------------------------------------------------------------
pm.test("3. Проверка структуры ответа и значения 'prevActions.number'", function () {
    var jsonData = pm.response.json();

    // Проверяем наличие session_state в ответе
    pm.expect(jsonData).to.have.property('session_state');
    pm.expect(jsonData.session_state).to.be.an('object');

    // Проверяем наличие actions внутри session_state
    pm.expect(jsonData.session_state).to.have.property('actions');
    pm.expect(jsonData.session_state.actions).to.be.an('object');

    // Проверяем наличие prevActions внутри actions
    pm.expect(jsonData.session_state.actions).to.have.property('prevActions');
    pm.expect(jsonData.session_state.actions.prevActions).to.be.an('array');

    // Проверяем, что prevActions не пустой
    pm.expect(jsonData.session_state.actions.prevActions).to.have.length.above(0);

    // Проверяем наличие number в первом элементе prevActions
    pm.expect(jsonData.session_state.actions.prevActions[0]).to.have.property('number');

    // Проверяем, что number равен 0
    pm.expect(jsonData.session_state.actions.prevActions[0].number).to.equal(0);

});

//-------------------------------------------------------------------------------
pm.test("3. Проверка структуры ответа и значения 'prevActions.number'", function () {
    var jsonData = pm.response.json();

    // Проверяем наличие session_state в ответе
    pm.expect(jsonData).to.have.property('session_state');
    pm.expect(jsonData.session_state).to.be.an('object');

    // Проверяем наличие actions внутри session_state
    pm.expect(jsonData.session_state).to.have.property('actions');
    pm.expect(jsonData.session_state.actions).to.be.an('object');

    // Проверяем наличие prevActions внутри actions
    pm.expect(jsonData.session_state.actions).to.have.property('prevActions');
    pm.expect(jsonData.session_state.actions.prevActions).to.be.an('array');

    // Проверяем, что prevActions не пустой
    pm.expect(jsonData.session_state.actions.prevActions).to.have.length.above(0);

    // Проверяем ключи в первом элементе prevActions
    pm.expect(jsonData.session_state.actions.prevActions[0]).to.have.property('number');
    pm.expect(jsonData.session_state.actions.prevActions[0]).to.have.property('operation');
    pm.expect(jsonData.session_state.actions.prevActions[0]).to.have.property('valueAction');

    // Проверяем значения ключей
    pm.expect(jsonData.session_state.actions.prevActions[0].number).to.equal(0);
    pm.expect(jsonData.session_state.actions.prevActions[0].operation).to.equal("ADD_EVENT");
    pm.expect(jsonData.session_state.actions.prevActions[0].valueAction).to.equal("добавь событие");

});


//-------------------------------------------------------------------------------
pm.test("3. Проверка 'prevActions'", function () {
    var jsonData = pm.response.json();

    // Проверяем наличие session_state в ответе
    pm.expect(jsonData).to.have.property('session_state');
    pm.expect(jsonData.session_state).to.be.an('object');

    // Проверяем наличие actions внутри session_state
    pm.expect(jsonData.session_state).to.have.property('actions');
    pm.expect(jsonData.session_state.actions).to.be.an('object');

    // Проверяем наличие prevActions внутри actions
    pm.expect(jsonData.session_state.actions).to.have.property('prevActions');
    pm.expect(jsonData.session_state.actions.prevActions).to.be.an('array');

    // Проверяем, что prevActions не пустой
    pm.expect(jsonData.session_state.actions.prevActions).to.have.length.above(0);

    // Проверяем ключи в первом элементе prevActions
    pm.expect(jsonData.session_state.actions.prevActions[0]).to.have.property('number');
    pm.expect(jsonData.session_state.actions.prevActions[0]).to.have.property('operation');
    pm.expect(jsonData.session_state.actions.prevActions[0]).to.have.property('valueAction');

    // Проверяем значения ключей
    pm.expect(jsonData.session_state.actions.prevActions[0].number).to.equal(0);
    pm.expect(jsonData.session_state.actions.prevActions[0].operation).to.equal("ADD_EVENT");
    pm.expect(jsonData.session_state.actions.prevActions[0].valueAction).to.equal("добавь событие");

    // Проверяем ключи во втором элементе prevActions
    pm.expect(jsonData.session_state.actions.prevActions[1]).to.have.property('number');
    pm.expect(jsonData.session_state.actions.prevActions[1]).to.have.property('operation');
    pm.expect(jsonData.session_state.actions.prevActions[1]).to.have.property('prevOperation');
    pm.expect(jsonData.session_state.actions.prevActions[1]).to.have.property('valueAction');

    // Проверяем значения ключей
    pm.expect(jsonData.session_state.actions.prevActions[1].number).to.equal(1);
    pm.expect(jsonData.session_state.actions.prevActions[1].operation).to.equal("ADD_DAY");
    pm.expect(jsonData.session_state.actions.prevActions[1].prevOperation).to.equal("ADD_EVENT");
    pm.expect(jsonData.session_state.actions.prevActions[1].valueAction).to.equal("сегодня");

});
//-------------------------------------------------------------------------------
  pm.test("2. Значение ключей 'message_id' внутри 'session'", function () {
    var jsonData = pm.response.json();
    
    // Проверяем наличие объекта 'session' в ответе
    pm.expect(jsonData).to.have.property('session'); 
   
    // Проверяем наличие ключей внутри 'session'
	pm.expect(jsonData.session).to.have.property('message_id');
	
    // Проверяем, что значение ключей
	 pm.expect(jsonData.session.message_id).to.equal(3);
    
});

//-------------------------------------------------------------------------------

pm.test("5. Проверка структуры ответа и значений в user_state_update", function () {
    var jsonData = pm.response.json();

     // Дополнительные проверки значений
    if (jsonData.user_state_update.week.days["{{currentDate}}"][0].time !== "12:00") {
        console.log("Ошибка: ожидалось значение '01:00' для time в первом элементе, но получено", jsonData.user_state_update.week.days["{{currentDate}}"][0].time);
    }
    if (jsonData.user_state_update.week.days["{{currentDate}}"][0].name !== "Прогулка на берегу моря") {
        console.log("Ошибка: ожидалось значение 'Прогулка на берегу моря' для name в первом элементе, но получено", jsonData.user_state_update.week.days["{{currentDate}}"][0].name);
    }
	
	 if (jsonData.user_state_update.week.days["{{currentDate}}"][1].time !== "14:00") {
        console.log("Ошибка: ожидалось значение '14:00' для time во втором элементе, но получено", jsonData.user_state_update.week.days["{{currentDate}}"][1].time);	
	}
	
    if (jsonData.user_state_update.week.days["{{currentDate}}"][1].name !== "Поздний обед") {
        console.log("Ошибка: ожидалось значение 'Поздний обед' для name во втором элементе, но получено", jsonData.user_state_update.week.days["{{currentDate}}"][1].name);
    }
	

    // Проверяем наличие и тип user_state_update
    pm.expect(jsonData).to.have.property('user_state_update');
    pm.expect(jsonData.user_state_update).to.be.an('object');

    // Проверяем наличие и тип object3 внутри user_state_update
    pm.expect(jsonData.user_state_update).to.have.property('week');
    pm.expect(jsonData.user_state_update.week).to.be.an('object');

    // Проверяем наличие и тип days внутри week
    pm.expect(jsonData.user_state_update.week).to.have.property('days');
    pm.expect(jsonData.user_state_update.week.days).to.be.an('object');

    // Проверяем наличие и тип {{currentDate}} внутри days
    pm.expect(jsonData.user_state_update.week.days).to.have.property('{{currentDate}}');
    pm.expect(jsonData.user_state_update.week.days["{{currentDate}}"]).to.be.an('array');

    // Проверяем, что "{{currentDate}}" содержит 2 элемента
    pm.expect(jsonData.user_state_update.week.days["{{currentDate}}"]).to.have.lengthOf(2);

    // Проверяем первый элемент "{{currentDate}}"
    pm.expect(jsonData.user_state_update.week.days["{{currentDate}}"][0]).to.have.property('time', "12:00");
    pm.expect(jsonData.user_state_update.week.days["{{currentDate}}"][0]).to.have.property('name', "Прогулка на берегу моря");

    // Проверяем второй элемент "{{currentDate}}"
    pm.expect(jsonData.user_state_update.week.days["{{currentDate}}"][1]).to.have.property('time', "14:00");
    pm.expect(jsonData.user_state_update.week.days["{{currentDate}}"][1]).to.have.property('name', "Поздний обед");

});


//когда нет pre реквеста

pm.test("3. Проверка user_state_update", function () {
    var jsonData = pm.response.json();

     // Дополнительные проверки значений
    if (jsonData.user_state_update.week.days[formattedDate][0].time !== "00:00") {
        console.log("Ошибка: ожидалось значение '00:00' для time в первом элементе, но получено", jsonData.user_state_update.week.days[formattedDate][0].time);
    }
    if (jsonData.user_state_update.week.days[formattedDate][0].name !== "тест событие 1") {
        console.log("Ошибка: ожидалось значение 'тест событие 1' для name в первом элементе, но получено", jsonData.user_state_update.week.days[formattedDate][0].name);
    }	
	 
    // Проверяем наличие и тип user_state_update
    pm.expect(jsonData).to.have.property('user_state_update');
    pm.expect(jsonData.user_state_update).to.be.an('object');

    // Проверяем наличие и тип object3 внутри user_state_update
    pm.expect(jsonData.user_state_update).to.have.property('week');
    pm.expect(jsonData.user_state_update.week).to.be.an('object');

    // Проверяем наличие и тип days внутри week
    pm.expect(jsonData.user_state_update.week).to.have.property('days');
    pm.expect(jsonData.user_state_update.week.days).to.be.an('object');

    // Проверяем наличие и тип {{currentDate}} внутри days
    pm.expect(jsonData.user_state_update.week.days).to.have.property(formattedDate);
    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.be.an('array');

    // Проверяем, что formattedDate содержит 2 элемента
    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.have.lengthOf(1);

    // Проверяем первый элемент formattedDate
    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('time', "00:00");
    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('name', "тест событие 1");   

});

//-------------------------------------------------------------------------------
pm.test("3. Проверка структуры ответа и значений в user_state_update, pastDate и futureDate", function () {
    var jsonData = pm.response.json();

     // Дополнительные проверки значений
    if (jsonData.user_state_update.week.days[pm.variables.get('pastDate')][0].time !== "12:00") {
        console.log("Ошибка: ожидалось значение '01:00' для time в первом элементе, но получено", jsonData.user_state_update.week.days[pm.variables.get('pastDate')][0].time);
    }
    if (jsonData.user_state_update.week.days[pm.variables.get('pastDate')][0].name !== "Прогулка на берегу моря") {
        console.log("Ошибка: ожидалось значение 'Прогулка на берегу моря' для name в первом элементе, но получено", jsonData.user_state_update.week.days[pm.variables.get('pastDate')][0].name);
    }	
	if (jsonData.user_state_update.week.days[pm.variables.get('pastDate')][1].time !== "14:00") {
        console.log("Ошибка: ожидалось значение '14:00' для time во втором элементе, но получено", jsonData.user_state_update.week.days[pm.variables.get('pastDate')][1].time);	
	}	
    if (jsonData.user_state_update.week.days[pm.variables.get('pastDate')][1].name !== "Поздний обед") {
        console.log("Ошибка: ожидалось значение 'Поздний обед' для name во втором элементе, но получено", jsonData.user_state_update.week.days[pm.variables.get('pastDate')][1].name);
    }
	
	if (jsonData.user_state_update.week.days[pm.variables.get('futureDate')][0].time !== "13:30") {
        console.log("Ошибка: ожидалось значение '13:30' для time в первом элементе, но получено", jsonData.user_state_update.week.days[pm.variables.get('futureDate')][0].time);
    }
    if (jsonData.user_state_update.week.days[pm.variables.get('futureDate')][0].name !== "Приготовить асаду") {
        console.log("Ошибка: ожидалось значение 'Приготовить асаду' для name в первом элементе, но получено", jsonData.user_state_update.week.days[pm.variables.get('futureDate')][0].name);
    }
	
	 if (jsonData.user_state_update.week.days[pm.variables.get('futureDate')][1].time !== "09:10") {
        console.log("Ошибка: ожидалось значение '09:10' для time во втором элементе, но получено", jsonData.user_state_update.week.days[pm.variables.get('futureDate')][1].time);	
	}
	
    if (jsonData.user_state_update.week.days[pm.variables.get('futureDate')][1].name !== "Прогуляться по утреннему Буэнос- Айресу и выругаться по поводу эмиграции") {
        console.log("Ошибка: ожидалось значение 'Прогуляться по утреннему Буэнос- Айресу и выругаться по поводу эмиграции' для name во втором элементе, но получено", jsonData.user_state_update.week.days[pm.variables.get('futureDate')][1].name);
    }
	
    // Проверяем наличие и тип user_state_update
    pm.expect(jsonData).to.have.property('user_state_update');
    pm.expect(jsonData.user_state_update).to.be.an('object');

    // Проверяем наличие и тип object3 внутри user_state_update
    pm.expect(jsonData.user_state_update).to.have.property('week');
    pm.expect(jsonData.user_state_update.week).to.be.an('object');

    // Проверяем наличие и тип days внутри week
    pm.expect(jsonData.user_state_update.week).to.have.property('days');
    pm.expect(jsonData.user_state_update.week.days).to.be.an('object');

    // Проверяем наличие и тип {{pastDate}} внутри days
    pm.expect(jsonData.user_state_update.week.days).to.have.property(pm.variables.get('pastDate'));
    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('pastDate')]).to.be.an('array');
	
	    // Проверяем наличие и тип {{futureDate}} внутри days
    pm.expect(jsonData.user_state_update.week.days).to.have.property(pm.variables.get('futureDate'));
    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('futureDate')]).to.be.an('array');

    // Проверяем, что 'pastDate' содержит 2 элемента
    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('pastDate')]).to.have.lengthOf(2);
	
	// Проверяем, что 'futureDate' содержит 2 элемента
    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('futureDate')]).to.have.lengthOf(2);

    // Проверяем первый элемент 'pastDate'
    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('pastDate')][0]).to.have.property('time', "12:00");
    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('pastDate')][0]).to.have.property('name', "Прогулка на берегу моря");

    // Проверяем второй элемент 'pastDate'
    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('pastDate')][1]).to.have.property('time', "14:00");
    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('pastDate')][1]).to.have.property('name', "Поздний обед");
	
	// Проверяем первый элемент 'futureDate'
    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('futureDate')][0]).to.have.property('time', "13:30");
    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('futureDate')][0]).to.have.property('name', "Приготовить асаду");

    // Проверяем второй элемент 'futureDate'
    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('futureDate')][1]).to.have.property('time', "09:10");
    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('futureDate')][1]).to.have.property('name', "Прогуляться по утреннему Буэнос- Айресу и выругаться по поводу эмиграции");
});

//-------------------------------------------------------------------------------
с фунцией, когда нет пререквеста

// Генерация текущей даты в формате DD-MM-YYYY

function generateCurrentDate() {
    var currentDate = new Date();
    var day = String(currentDate.getDate()).padStart(2, '0');
    var month = String(currentDate.getMonth() + 1).padStart(2, '0'); // Январь - это 0!
    var year = currentDate.getFullYear();
    return day + '-' + month + '-' + year;
}
// 
pm.test("1. Проверка text с currentDate", function () {
    var jsonData = pm.response.json();
    var formattedDate = generateCurrentDate()

    // Создание регулярного выражения с текущей датой
    var expectedPattern = new RegExp('^Ваши события на сегодня ' + formattedDate + " 00:00 Поздний обед00, 01:00 Поздний обед01, 02:00 Поздний обед02, 03:00 Поздний обед03, 04:00 Поздний обед04, 10:00 Поздний обед10, 11:00 Поздний обед11, 12:00 Прогулка на берегу моря12, 14:00 Поздний обед14, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 17:00 Поздний обед17");

    // Проверка наличия объекта
    pm.expect(jsonData).to.have.property('response');

    // Проверка, что response является объектом
    pm.expect(jsonData.response).to.be.an('object');

    // Проверка наличия ключа внутри объекта
    pm.expect(jsonData.response).to.have.property('text');
    pm.expect(jsonData.response).to.have.property('end_session');

    // Проверка значения ключа внутри объекта
    pm.expect(jsonData.response.text).to.match(expectedPattern);
    pm.expect(jsonData.response.end_session).to.eql(false);

});
//-------------------------------------------------------------------------------




//-------------------------------------------------------------------------------
pm.test("0.2 Значение ключей user_id, session_id внутри 'session'", function () {
    var jsonData = pm.response.json();
    
    // Проверяем наличие объекта 'session' в ответе
    pm.expect(jsonData).to.have.property('session');
    
    // Проверяем наличие ключей'  
    pm.expect(jsonData.session).to.have.property('user_id');
     pm.expect(jsonData.session).to.have.property('session_id');
    
    // Проверяем значения ключей 
    pm.expect(jsonData.session.user_id).to.equal('b4fde534');
    pm.expect(jsonData.session.session_id).to.equal('ffb392fd');  
});

//-------------------------------------------------------------------------------

pm.test("1. Проверка text", function () {
    var jsonData = pm.response.json();
    
    // Генерация текущей даты в формате DD-MM-YYYY
    var currentDate = new Date();
    var day = String(currentDate.getDate()).padStart(2, '0');
    var month = String(currentDate.getMonth() + 1).padStart(2, '0'); // Январь - это 0!
    var year = currentDate.getFullYear();
    var formattedDate = day + '-' + month + '-' + year;
    
    // Создание регулярного выражения с текущей датой
    var expectedPattern = new RegExp('^Ваши события на сегодня ' + formattedDate + ' 12:00 Прогулка на берегу моря, 14:00 Поздний обед');
    
    // Проверка наличия объекта
    pm.expect(jsonData).to.have.property('response');
    
    // Проверка, что response является объектом
    pm.expect(jsonData.response).to.be.an('object');
    
    // Проверка наличия ключа внутри объекта
    pm.expect(jsonData.response).to.have.property('text');
    
    // Проверка значения ключа внутри объекта
    pm.expect(jsonData.response.text).to.match(expectedPattern);   
   
});

//-------------------------------------------------------------------------------
pm.test("1. Проверка text", function () {
    var jsonData = pm.response.json();
    
    
    // Создание регулярного выражения с текущей датой
    var expectedPattern = new RegExp('^Ваши события ' + pm.variables.get('pastDate') + ' 17:00 Велосипедная прогулка, 20:00 Ужин, ' + pm.variables.get('curDate') + ' 17:00 Ужин, 17:01 Велосипедная прогулка, ' + pm.variables.get('futureDate') + ' 09:00 Поздний обед, 15:00 Прогулка на берегу моря');
    
    // Проверка наличия объекта
    pm.expect(jsonData).to.have.property('response');
    
    // Проверка, что response является объектом
    pm.expect(jsonData.response).to.be.an('object');
    
    // Проверка наличия ключа внутри объекта
    pm.expect(jsonData.response).to.have.property('text');
    
    // Проверка значения ключа внутри объекта
    pm.expect(jsonData.response.text).to.match(expectedPattern);   
   
});
//-------------------------------------------------------------------------------
pm.test("1. Проверка text", function () {
    var jsonData = pm.response.json();
    
    
    // Создание регулярного выражения с текущей датой
    var expectedPattern = new RegExp('^Событие успешно добавлено на ' + pm.variables.get('curDate') + ' 00:00 тест событие 1! Выполнен выход в главное меню ');
    
    // Проверка наличия объекта
    pm.expect(jsonData).to.have.property('response');
    
    // Проверка, что response является объектом
    pm.expect(jsonData.response).to.be.an('object');
    
    // Проверка наличия ключа внутри объекта
    pm.expect(jsonData.response).to.have.property('text');
	pm.expect(jsonData.response).to.have.property('end_session');
    
    // Проверка значения ключа внутри объекта
    pm.expect(jsonData.response.text).to.match(expectedPattern); 
	pm.expect(jsonData.response.end_session).to.eql(false);
   
});

//------------------------------------------------------------------------------


pm.test("1. Проверка text с currentDate", function () {
    var jsonData = pm.response.json();

    // Генерация текущей даты в формате DD-MM-YYYY
    var currentDate = new Date();
    var day = String(currentDate.getDate()).padStart(2, '0');
    var month = String(currentDate.getMonth() + 1).padStart(2, '0'); // Январь - это 0!
    var year = currentDate.getFullYear();
    var formattedDate = day + '-' + month + '-' + year;

    // Создание регулярного выражения с текущей датой
    var expectedPattern = new RegExp('^Событие успешно добавлено на ' + formattedDate + " 00:00 тест событие 1! Выполнен выход в главное меню ");

    // Проверка наличия объекта
    pm.expect(jsonData).to.have.property('response');

    // Проверка, что response является объектом
    pm.expect(jsonData.response).to.be.an('object');

    // Проверка наличия ключа внутри объекта
    pm.expect(jsonData.response).to.have.property('text');
    pm.expect(jsonData.response).to.have.property('end_session');

    // Проверка значения ключа внутри объекта
    pm.expect(jsonData.response.text).to.match(expectedPattern);
    pm.expect(jsonData.response.end_session).to.eql(false);

});

//------------------------------------------------------------------------------

pm.test("1. Проверка text", function () {
    let jsonData = pm.response.json();

    // Получаем день недели из запроса
    let requestBody = JSON.parse(pm.request.body.raw);
    let actions =  requestBody.state.session.actions;
     console.log(actions);

    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction
     
    let command = requestBody.request.command;
    let is_valid_command = jsonData.response.text.includes(command);
   

    // Функция для получения следующей даты определенного дня недели
    function getNextvalueAction(dayName) {
        const days = ['воскресенье', 'понедельник', 'вторник', 'среда', 'четверг', 'пятница', 'суббота'];
        const today = new Date();
        const dayIndex = days.indexOf(dayName);
        if (dayIndex === -1) return null;
        
        const targetDate = new Date(today);
        targetDate.setDate(today.getDate() + (dayIndex + 7 - today.getDay()) % 7);
        return targetDate;
    }
    
    // Получаем ближайшую дату для указанного дня недели
    let targetDate = getNextvalueAction(valueAction);
    console.log(targetDate);
   
    // Форматируем дату в DD-MM-YYYY
    let formattedDate = targetDate.getDate().toString().padStart(2, '0') + '-' +
                        (targetDate.getMonth() + 1).toString().padStart(2, '0') + '-' +
                        targetDate.getFullYear();
   

 /*   let is_expect_date = jsonData.response.text.includes("Событие успешно добавлено на " + formattedDate);
    console.log("Ожидаемая дата?:", is_expect_date);  
 */
     // Создание регулярного выражения с ожидаемой датой
    let expectedPattern = new RegExp('^Событие успешно добавлено на ' + formattedDate + " 00:00 тест событие 1! Выполнен выход в главное меню ");

    
    // Проверка command
    pm.expect(jsonData).to.have.property('response');
    
    // Проверка, что response является объектом
    pm.expect(jsonData.response).to.be.an('object');
    
    // Проверка наличия ключа внутри объекта
    pm.expect(jsonData.response).to.have.property('text');
    pm.expect(jsonData.response).to.have.property('end_session');
    
    // Проверка значения ключа внутри объекта
    pm.expect(jsonData.response.text).to.match(expectedPattern);
    pm.expect(jsonData.response.text).to.include(command); 
    pm.expect(jsonData.response.end_session).to.eql(false);

});

_________________ 
pm.test("3. Проверка'days' {}", function () {
    var jsonData = pm.response.json();
    
    // Проверяем наличие user_state_update в ответе
    pm.expect(jsonData).to.have.property('user_state_update');
    pm.expect(jsonData.user_state_update).to.be.an('object');

    // Проверяем наличие week внутри user_state_update
    pm.expect(jsonData.user_state_update).to.have.property('week');
    pm.expect(jsonData.user_state_update.week).to.be.an('object');

    // Проверяем наличие days внутри week
    pm.expect(jsonData.user_state_update.week).to.have.property('days');

    // Проверяем, что days является пустым объектом
    pm.expect(jsonData.user_state_update.week.days).to.be.an('object').that.is.empty;   
});

//---------------------------------------------------------------------------
Функция 
// Генерация текущей даты в формате DD-MM-YYYY

function generateCurrentDate() {
    var currentDate = new Date();
    var day = String(currentDate.getDate()).padStart(2, '0');
    var month = String(currentDate.getMonth() + 1).padStart(2, '0'); // Январь - это 0!
    var year = currentDate.getFullYear();
    return day + '-' + month + '-' + year;
}
// --------------------------------------------------------------------------
pm.test("1. Проверка text с currentDate", function () {
    var jsonData = pm.response.json();
    var formattedDate = generateCurrentDate()

    // Создание регулярного выражения с текущей датой
    var expectedPattern = new RegExp('^Событие успешно добавлено на ' + formattedDate + " 00:00 тест событие 1! Выполнен выход в главное меню ");

    // Проверка наличия объекта
    pm.expect(jsonData).to.have.property('response');

    // Проверка, что response является объектом
    pm.expect(jsonData.response).to.be.an('object');

    // Проверка наличия ключа внутри объекта
    pm.expect(jsonData.response).to.have.property('text');
    pm.expect(jsonData.response).to.have.property('end_session');

    // Проверка значения ключа внутри объекта
    pm.expect(jsonData.response.text).to.match(expectedPattern);
    pm.expect(jsonData.response.end_session).to.eql(false);

});
//-------------------------------------------------------------------------------
  pm.test("2. Значение ключей 'message_id' внутри 'session'", function () {
    var jsonData = pm.response.json();
    
    // Проверяем наличие объекта 'session' в ответе
    pm.expect(jsonData).to.have.property('session'); 
   
    // Проверяем наличие ключей внутри 'session'
	pm.expect(jsonData.session).to.have.property('message_id');
	
    // Проверяем, что значение ключей
	 pm.expect(jsonData.session.message_id).to.equal(3);
    
});
//------------------------------------------------------------------------------

pm.test("3. Проверка user_state_update", function () {
    var jsonData = pm.response.json();
    var formattedDate = generateCurrentDate()

    // Дополнительные проверки значений
    if (jsonData.user_state_update.week.days[formattedDate][0].time !== "00:00") {
        console.log("Ошибка: ожидалось значение '00:00' для time в первом элементе, но получено", jsonData.user_state_update.week.days[formattedDate][0].time);
    }
    if (jsonData.user_state_update.week.days[formattedDate][0].name !== "тест событие 1") {
        console.log("Ошибка: ожидалось значение 'тест событие 1' для name в первом элементе, но получено", jsonData.user_state_update.week.days[formattedDate][0].name);
    }	
    
    // Проверяем наличие и тип user_state_update
    pm.expect(jsonData).to.have.property('user_state_update');
    pm.expect(jsonData.user_state_update).to.be.an('object');

    // Проверяем наличие и тип object3 внутри user_state_update
    pm.expect(jsonData.user_state_update).to.have.property('week');
    pm.expect(jsonData.user_state_update.week).to.be.an('object');

    // Проверяем наличие и тип days внутри week
    pm.expect(jsonData.user_state_update.week).to.have.property('days');
    pm.expect(jsonData.user_state_update.week.days).to.be.an('object');

    // Проверяем наличие и тип {{currentDate}} внутри days
    pm.expect(jsonData.user_state_update.week.days).to.have.property(formattedDate);
    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.be.an('array');

    // Проверяем, что formattedDate содержит 2 элемента
    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.have.lengthOf(1);

    // Проверяем первый элемент formattedDate
    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('time', "00:00");
    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('name', "тест событие 1");  
});


//-------------------------------------------------------------------------------
pm.test("4. Проверка отсутствия user_state_update", function () {
    var jsonData = pm.response.json();
    pm.expect(jsonData).to.not.have.property('user_state_update');
});

_____________________________________ 
{
                        "number": 0,
                        "valueAction": "добавь событие",
                        "operation": "ADD_EVENT"
                    },
                    {
                        "number": 1,
                        "prevOperation": "ADD_EVENT",
                        "valueAction": "вторник",
                        "operation": "ADD_DAY"
                    },
                    {
                        "number": 2,
                        "prevOperation": "ADD_DAY",
                        "valueAction": "десять часов",
                        "operation": "ADD_TIME"
                    }
					
					
__________________________________________
исправление для текущей даты от AI 

pm.test("1. Проверка text", function () {
    var jsonData = pm.response.json();

    // Получаем день недели из запроса
    let requestBody = JSON.parse(pm.request.body.raw);
    let actions =  requestBody.state.session.actions;

    var valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction

    // Функция для получения следующей даты определенного дня недели
    function getNextvalueAction(dayName) {
        const days = ['воскресенье', 'понедельник', 'вторник', 'среда', 'четверг', 'пятница', 'суббота'];
        const today = new Date();
        const dayIndex = days.indexOf(dayName);
        if (dayIndex === -1) return null;
        
        const targetDate = new Date(today);
        targetDate.setDate(today.getDate() + (dayIndex + 7 - today.getDay()) % 7);
        return targetDate;
    }
    
    // Получаем ближайшую дату для указанного дня недели
    var targetDate = getNextvalueAction(valueAction);
    if (!targetDate) {
        console.log("Некорректное значение дня недели");
        return; // Exit the test if the day name is incorrect
    }
    console.log(targetDate);
   
    // Форматируем дату в DD-MM-YYYY
    var formattedDate = targetDate.getDate().toString().padStart(2, '0') + '-' +
                        (targetDate.getMonth() + 1).toString().padStart(2, '0') + '-' +
                        targetDate.getFullYear();
    console.log("Ожидаемая дата:", formattedDate);  


     // Создание регулярного выражения с ожидаемой датой
    var expectedPattern = new RegExp('^Событие успешно добавлено на ' + formattedDate );

    
    // Проверка наличия объекта
    pm.expect(jsonData).to.have.property('response');
    
    // Проверка, что response является объектом
    pm.expect(jsonData.response).to.be.an('object');
    
    // Проверка наличия ключа внутри объекта
    pm.expect(jsonData.response).to.have.property('text');
    pm.expect(jsonData.response).to.have.property('end_session');
    
    // Проверка значения ключа внутри объекта
    pm.expect(jsonData.response.text).to.match(expectedPattern);
    pm.expect(jsonData.response.end_session).to.eql(false);

});


//-------------------------------------------------------------------------------
pm.test("3. Проверка 'prevActions'", function () {
    var jsonData = pm.response.json();

    // Проверяем наличие session_state в ответе
    pm.expect(jsonData).to.have.property('session_state');
    pm.expect(jsonData.session_state).to.be.an('object');

    // Проверяем наличие actions внутри session_state
    pm.expect(jsonData.session_state).to.have.property('actions');
    pm.expect(jsonData.session_state.actions).to.be.an('object');

    // Проверяем наличие prevActions внутри actions
    pm.expect(jsonData.session_state.actions).to.have.property('prevActions');
    pm.expect(jsonData.session_state.actions.prevActions).to.be.an('array');

    // Проверяем, что prevActions не пустой
    pm.expect(jsonData.session_state.actions.prevActions).to.have.length.above(0);

    // Проверяем ключи в первом элементе prevActions
    pm.expect(jsonData.session_state.actions.prevActions[0]).to.have.property('number');
    pm.expect(jsonData.session_state.actions.prevActions[0]).to.have.property('operation');
    pm.expect(jsonData.session_state.actions.prevActions[0]).to.have.property('valueAction');

    // Проверяем значения ключей
    pm.expect(jsonData.session_state.actions.prevActions[0].number).to.equal(0);
    pm.expect(jsonData.session_state.actions.prevActions[0].operation).to.equal("ADD_EVENT");
    pm.expect(jsonData.session_state.actions.prevActions[0].valueAction).to.equal("добавь событие");

    // Проверяем ключи во втором элементе prevActions
    pm.expect(jsonData.session_state.actions.prevActions[1]).to.have.property('number');
    pm.expect(jsonData.session_state.actions.prevActions[1]).to.have.property('operation');
    pm.expect(jsonData.session_state.actions.prevActions[1]).to.have.property('prevOperation');
    pm.expect(jsonData.session_state.actions.prevActions[1]).to.have.property('valueAction');

    // Проверяем значения ключей
    pm.expect(jsonData.session_state.actions.prevActions[1].number).to.equal(1);
    pm.expect(jsonData.session_state.actions.prevActions[1].operation).to.equal("ADD_DAY");
    pm.expect(jsonData.session_state.actions.prevActions[1].prevOperation).to.equal("ADD_EVENT");
    pm.expect(jsonData.session_state.actions.prevActions[1].valueAction).to.equal("сегодня");

        // Проверяем ключи во третьем элементе prevActions
    pm.expect(jsonData.session_state.actions.prevActions[1]).to.have.property('number');
    pm.expect(jsonData.session_state.actions.prevActions[1]).to.have.property('operation');
    pm.expect(jsonData.session_state.actions.prevActions[1]).to.have.property('prevOperation');
    pm.expect(jsonData.session_state.actions.prevActions[1]).to.have.property('valueAction');

    // Проверяем значения ключей
    pm.expect(jsonData.session_state.actions.prevActions[1].number).to.equal(2);
    pm.expect(jsonData.session_state.actions.prevActions[1].operation).to.equal("ADD_TIME");
    pm.expect(jsonData.session_state.actions.prevActions[1].prevOperation).to.equal("ADD_DAY");
    pm.expect(jsonData.session_state.actions.prevActions[1].valueAction).to.equal("ноль часов ноль");

});

        "user_id": "{{user_id}}",
        "session_id": "{{session_id}}",	
		
		        "user_id": "8783711111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "session_id": "b6dc6eee1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
		
		


 // Вывод для отладки
    console.log("Ожидаемый паттерн:", expectedPattern);
    console.log("Фактическое значение:", jsonData.response.text);		
		
_____________________ 


pm.test("1. Проверка text", function () {
    var jsonData = pm.response.json();
    
    // Проверка наличия объекта
    pm.expect(jsonData).to.have.property('response');
    
    // Проверка, что объект_тест является объектом
    pm.expect(jsonData.response).to.be.an('object');
    
    // Проверка наличия ключа внутри объекта
    pm.expect(jsonData.response).to.have.property('text');
    pm.expect(jsonData.response).to.have.property('end_session');
    
    // Проверка значения ключа внутри объекта
    pm.expect(jsonData.response.text).to.eql('Планировщик недели прощается с вами! До свидания!');
    pm.expect(jsonData.response.end_session).to.eql(false);
    });
_____________________ 
pm.expect(jsonData.response.end_session).to.eql(false);

true

//-------------------------------------------------------------------------------
pm.test("3. Проверка структуры ответа и значения 'prevActions.number'", function () {
    var jsonData = pm.response.json();

    // Проверяем наличие session_state в ответе
    pm.expect(jsonData).to.have.property('session_state');
    pm.expect(jsonData.session_state).to.be.an('object');

    // Проверяем наличие actions внутри session_state
    pm.expect(jsonData.session_state).to.have.property('actions');
    pm.expect(jsonData.session_state.actions).to.be.an('object');

    // Проверяем наличие prevActions внутри actions
    pm.expect(jsonData.session_state.actions).to.have.property('prevActions');
    pm.expect(jsonData.session_state.actions.prevActions).to.be.an('array');

    // Проверяем, что prevActions не пустой
    pm.expect(jsonData.session_state.actions.prevActions).to.have.length.above(0);

    // Проверяем наличие number в первом элементе prevActions
    pm.expect(jsonData.session_state.actions.prevActions[0]).to.have.property('number');

    // Проверяем, что number равен 0
    pm.expect(jsonData.session_state.actions.prevActions[0].number).to.equal(0);

});

//-------------------------------------------------------------------------------
pm.test("3. Проверка структуры ответа и значения 'prevActions.number'", function () {
    var jsonData = pm.response.json();

    // Проверяем наличие session_state в ответе
    pm.expect(jsonData).to.have.property('session_state');
    pm.expect(jsonData.session_state).to.be.an('object');

    // Проверяем наличие actions внутри session_state
    pm.expect(jsonData.session_state).to.have.property('actions');
    pm.expect(jsonData.session_state.actions).to.be.an('object');

    // Проверяем наличие prevActions внутри actions
    pm.expect(jsonData.session_state.actions).to.have.property('prevActions');
    pm.expect(jsonData.session_state.actions.prevActions).to.be.an('array');

    // Проверяем, что prevActions не пустой
    pm.expect(jsonData.session_state.actions.prevActions).to.have.length.above(0);

    // Проверяем ключи в первом элементе prevActions
    pm.expect(jsonData.session_state.actions.prevActions[0]).to.have.property('number');
    pm.expect(jsonData.session_state.actions.prevActions[0]).to.have.property('operation');
    pm.expect(jsonData.session_state.actions.prevActions[0]).to.have.property('valueAction');

    // Проверяем значения ключей
    pm.expect(jsonData.session_state.actions.prevActions[0].number).to.equal(0);
    pm.expect(jsonData.session_state.actions.prevActions[0].operation).to.equal("ADD_EVENT");
    pm.expect(jsonData.session_state.actions.prevActions[0].valueAction).to.equal("добавь событие");

});


//-------------------------------------------------------------------------------
pm.test("3. Проверка 'prevActions'", function () {
    var jsonData = pm.response.json();

    // Проверяем наличие session_state в ответе
    pm.expect(jsonData).to.have.property('session_state');
    pm.expect(jsonData.session_state).to.be.an('object');

    // Проверяем наличие actions внутри session_state
    pm.expect(jsonData.session_state).to.have.property('actions');
    pm.expect(jsonData.session_state.actions).to.be.an('object');

    // Проверяем наличие prevActions внутри actions
    pm.expect(jsonData.session_state.actions).to.have.property('prevActions');
    pm.expect(jsonData.session_state.actions.prevActions).to.be.an('array');

    // Проверяем, что prevActions не пустой
    pm.expect(jsonData.session_state.actions.prevActions).to.have.length.above(0);

    // Проверяем ключи в первом элементе prevActions
    pm.expect(jsonData.session_state.actions.prevActions[0]).to.have.property('number');
    pm.expect(jsonData.session_state.actions.prevActions[0]).to.have.property('operation');
    pm.expect(jsonData.session_state.actions.prevActions[0]).to.have.property('valueAction');

    // Проверяем значения ключей
    pm.expect(jsonData.session_state.actions.prevActions[0].number).to.equal(0);
    pm.expect(jsonData.session_state.actions.prevActions[0].operation).to.equal("ADD_EVENT");
    pm.expect(jsonData.session_state.actions.prevActions[0].valueAction).to.equal("добавь событие");

    // Проверяем ключи во втором элементе prevActions
    pm.expect(jsonData.session_state.actions.prevActions[1]).to.have.property('number');
    pm.expect(jsonData.session_state.actions.prevActions[1]).to.have.property('operation');
    pm.expect(jsonData.session_state.actions.prevActions[1]).to.have.property('prevOperation');
    pm.expect(jsonData.session_state.actions.prevActions[1]).to.have.property('valueAction');

    // Проверяем значения ключей
    pm.expect(jsonData.session_state.actions.prevActions[1].number).to.equal(1);
    pm.expect(jsonData.session_state.actions.prevActions[1].operation).to.equal("ADD_DAY");
    pm.expect(jsonData.session_state.actions.prevActions[1].prevOperation).to.equal("ADD_EVENT");
    pm.expect(jsonData.session_state.actions.prevActions[1].valueAction).to.equal("сегодня");

});
//-------------------------------------------------------------------------------
  pm.test("2. Значение ключей 'message_id' внутри 'session'", function () {
    var jsonData = pm.response.json();
    
    // Проверяем наличие объекта 'session' в ответе
    pm.expect(jsonData).to.have.property('session'); 
   
    // Проверяем наличие ключей внутри 'session'
	pm.expect(jsonData.session).to.have.property('message_id');
	
    // Проверяем, что значение ключей
	 pm.expect(jsonData.session.message_id).to.equal(3);
    
});

//-------------------------------------------------------------------------------

pm.test("5. Проверка структуры ответа и значений в user_state_update", function () {
    var jsonData = pm.response.json();

     // Дополнительные проверки значений
    if (jsonData.user_state_update.week.days["{{currentDate}}"][0].time !== "12:00") {
        console.log("Ошибка: ожидалось значение '01:00' для time в первом элементе, но получено", jsonData.user_state_update.week.days["{{currentDate}}"][0].time);
    }
    if (jsonData.user_state_update.week.days["{{currentDate}}"][0].name !== "Прогулка на берегу моря") {
        console.log("Ошибка: ожидалось значение 'Прогулка на берегу моря' для name в первом элементе, но получено", jsonData.user_state_update.week.days["{{currentDate}}"][0].name);
    }
	
	 if (jsonData.user_state_update.week.days["{{currentDate}}"][1].time !== "14:00") {
        console.log("Ошибка: ожидалось значение '14:00' для time во втором элементе, но получено", jsonData.user_state_update.week.days["{{currentDate}}"][1].time);	
	}
	
    if (jsonData.user_state_update.week.days["{{currentDate}}"][1].name !== "Поздний обед") {
        console.log("Ошибка: ожидалось значение 'Поздний обед' для name во втором элементе, но получено", jsonData.user_state_update.week.days["{{currentDate}}"][1].name);
    }
	

    // Проверяем наличие и тип user_state_update
    pm.expect(jsonData).to.have.property('user_state_update');
    pm.expect(jsonData.user_state_update).to.be.an('object');

    // Проверяем наличие и тип object3 внутри user_state_update
    pm.expect(jsonData.user_state_update).to.have.property('week');
    pm.expect(jsonData.user_state_update.week).to.be.an('object');

    // Проверяем наличие и тип days внутри week
    pm.expect(jsonData.user_state_update.week).to.have.property('days');
    pm.expect(jsonData.user_state_update.week.days).to.be.an('object');

    // Проверяем наличие и тип {{currentDate}} внутри days
    pm.expect(jsonData.user_state_update.week.days).to.have.property('{{currentDate}}');
    pm.expect(jsonData.user_state_update.week.days["{{currentDate}}"]).to.be.an('array');

    // Проверяем, что "{{currentDate}}" содержит 2 элемента
    pm.expect(jsonData.user_state_update.week.days["{{currentDate}}"]).to.have.lengthOf(2);

    // Проверяем первый элемент "{{currentDate}}"
    pm.expect(jsonData.user_state_update.week.days["{{currentDate}}"][0]).to.have.property('time', "12:00");
    pm.expect(jsonData.user_state_update.week.days["{{currentDate}}"][0]).to.have.property('name', "Прогулка на берегу моря");

    // Проверяем второй элемент "{{currentDate}}"
    pm.expect(jsonData.user_state_update.week.days["{{currentDate}}"][1]).to.have.property('time', "14:00");
    pm.expect(jsonData.user_state_update.week.days["{{currentDate}}"][1]).to.have.property('name', "Поздний обед");

});


//когда нет pre реквеста

pm.test("3. Проверка user_state_update", function () {
    var jsonData = pm.response.json();

     // Дополнительные проверки значений
    if (jsonData.user_state_update.week.days[formattedDate][0].time !== "00:00") {
        console.log("Ошибка: ожидалось значение '00:00' для time в первом элементе, но получено", jsonData.user_state_update.week.days[formattedDate][0].time);
    }
    if (jsonData.user_state_update.week.days[formattedDate][0].name !== "тест событие 1") {
        console.log("Ошибка: ожидалось значение 'тест событие 1' для name в первом элементе, но получено", jsonData.user_state_update.week.days[formattedDate][0].name);
    }	
	 
    // Проверяем наличие и тип user_state_update
    pm.expect(jsonData).to.have.property('user_state_update');
    pm.expect(jsonData.user_state_update).to.be.an('object');

    // Проверяем наличие и тип object3 внутри user_state_update
    pm.expect(jsonData.user_state_update).to.have.property('week');
    pm.expect(jsonData.user_state_update.week).to.be.an('object');

    // Проверяем наличие и тип days внутри week
    pm.expect(jsonData.user_state_update.week).to.have.property('days');
    pm.expect(jsonData.user_state_update.week.days).to.be.an('object');

    // Проверяем наличие и тип {{currentDate}} внутри days
    pm.expect(jsonData.user_state_update.week.days).to.have.property(formattedDate);
    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.be.an('array');

    // Проверяем, что formattedDate содержит 2 элемента
    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.have.lengthOf(1);

    // Проверяем первый элемент formattedDate
    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('time', "00:00");
    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('name', "тест событие 1");   

});

//-------------------------------------------------------------------------------
pm.test("3. Проверка структуры ответа и значений в user_state_update, pastDate и futureDate", function () {
    var jsonData = pm.response.json();

     // Дополнительные проверки значений
    if (jsonData.user_state_update.week.days[pm.variables.get('pastDate')][0].time !== "12:00") {
        console.log("Ошибка: ожидалось значение '01:00' для time в первом элементе, но получено", jsonData.user_state_update.week.days[pm.variables.get('pastDate')][0].time);
    }
    if (jsonData.user_state_update.week.days[pm.variables.get('pastDate')][0].name !== "Прогулка на берегу моря") {
        console.log("Ошибка: ожидалось значение 'Прогулка на берегу моря' для name в первом элементе, но получено", jsonData.user_state_update.week.days[pm.variables.get('pastDate')][0].name);
    }	
	if (jsonData.user_state_update.week.days[pm.variables.get('pastDate')][1].time !== "14:00") {
        console.log("Ошибка: ожидалось значение '14:00' для time во втором элементе, но получено", jsonData.user_state_update.week.days[pm.variables.get('pastDate')][1].time);	
	}	
    if (jsonData.user_state_update.week.days[pm.variables.get('pastDate')][1].name !== "Поздний обед") {
        console.log("Ошибка: ожидалось значение 'Поздний обед' для name во втором элементе, но получено", jsonData.user_state_update.week.days[pm.variables.get('pastDate')][1].name);
    }
	
	if (jsonData.user_state_update.week.days[pm.variables.get('futureDate')][0].time !== "13:30") {
        console.log("Ошибка: ожидалось значение '13:30' для time в первом элементе, но получено", jsonData.user_state_update.week.days[pm.variables.get('futureDate')][0].time);
    }
    if (jsonData.user_state_update.week.days[pm.variables.get('futureDate')][0].name !== "Приготовить асаду") {
        console.log("Ошибка: ожидалось значение 'Приготовить асаду' для name в первом элементе, но получено", jsonData.user_state_update.week.days[pm.variables.get('futureDate')][0].name);
    }
	
	 if (jsonData.user_state_update.week.days[pm.variables.get('futureDate')][1].time !== "09:10") {
        console.log("Ошибка: ожидалось значение '09:10' для time во втором элементе, но получено", jsonData.user_state_update.week.days[pm.variables.get('futureDate')][1].time);	
	}
	
    if (jsonData.user_state_update.week.days[pm.variables.get('futureDate')][1].name !== "Прогуляться по утреннему Буэнос- Айресу и выругаться по поводу эмиграции") {
        console.log("Ошибка: ожидалось значение 'Прогуляться по утреннему Буэнос- Айресу и выругаться по поводу эмиграции' для name во втором элементе, но получено", jsonData.user_state_update.week.days[pm.variables.get('futureDate')][1].name);
    }
	
    // Проверяем наличие и тип user_state_update
    pm.expect(jsonData).to.have.property('user_state_update');
    pm.expect(jsonData.user_state_update).to.be.an('object');

    // Проверяем наличие и тип object3 внутри user_state_update
    pm.expect(jsonData.user_state_update).to.have.property('week');
    pm.expect(jsonData.user_state_update.week).to.be.an('object');

    // Проверяем наличие и тип days внутри week
    pm.expect(jsonData.user_state_update.week).to.have.property('days');
    pm.expect(jsonData.user_state_update.week.days).to.be.an('object');

    // Проверяем наличие и тип {{pastDate}} внутри days
    pm.expect(jsonData.user_state_update.week.days).to.have.property(pm.variables.get('pastDate'));
    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('pastDate')]).to.be.an('array');
	
	    // Проверяем наличие и тип {{futureDate}} внутри days
    pm.expect(jsonData.user_state_update.week.days).to.have.property(pm.variables.get('futureDate'));
    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('futureDate')]).to.be.an('array');

    // Проверяем, что 'pastDate' содержит 2 элемента
    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('pastDate')]).to.have.lengthOf(2);
	
	// Проверяем, что 'futureDate' содержит 2 элемента
    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('futureDate')]).to.have.lengthOf(2);

    // Проверяем первый элемент 'pastDate'
    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('pastDate')][0]).to.have.property('time', "12:00");
    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('pastDate')][0]).to.have.property('name', "Прогулка на берегу моря");

    // Проверяем второй элемент 'pastDate'
    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('pastDate')][1]).to.have.property('time', "14:00");
    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('pastDate')][1]).to.have.property('name', "Поздний обед");
	
	// Проверяем первый элемент 'futureDate'
    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('futureDate')][0]).to.have.property('time', "13:30");
    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('futureDate')][0]).to.have.property('name', "Приготовить асаду");

    // Проверяем второй элемент 'futureDate'
    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('futureDate')][1]).to.have.property('time', "09:10");
    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('futureDate')][1]).to.have.property('name', "Прогуляться по утреннему Буэнос- Айресу и выругаться по поводу эмиграции");
});

//-------------------------------------------------------------------------------
с фунцией, когда нет пререквеста

// Генерация текущей даты в формате DD-MM-YYYY

function generateCurrentDate() {
    var currentDate = new Date();
    var day = String(currentDate.getDate()).padStart(2, '0');
    var month = String(currentDate.getMonth() + 1).padStart(2, '0'); // Январь - это 0!
    var year = currentDate.getFullYear();
    return day + '-' + month + '-' + year;
}
// 
pm.test("1. Проверка text с currentDate", function () {
    var jsonData = pm.response.json();
    var formattedDate = generateCurrentDate()

    // Создание регулярного выражения с текущей датой
    var expectedPattern = new RegExp('^Ваши события на сегодня ' + formattedDate + " 00:00 Поздний обед00, 01:00 Поздний обед01, 02:00 Поздний обед02, 03:00 Поздний обед03, 04:00 Поздний обед04, 10:00 Поздний обед10, 11:00 Поздний обед11, 12:00 Прогулка на берегу моря12, 14:00 Поздний обед14, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 17:00 Поздний обед17");

    // Проверка наличия объекта
    pm.expect(jsonData).to.have.property('response');

    // Проверка, что response является объектом
    pm.expect(jsonData.response).to.be.an('object');

    // Проверка наличия ключа внутри объекта
    pm.expect(jsonData.response).to.have.property('text');
    pm.expect(jsonData.response).to.have.property('end_session');

    // Проверка значения ключа внутри объекта
    pm.expect(jsonData.response.text).to.match(expectedPattern);
    pm.expect(jsonData.response.end_session).to.eql(false);

});
//-------------------------------------------------------------------------------




//-------------------------------------------------------------------------------
pm.test("0.2 Значение ключей user_id, session_id внутри 'session'", function () {
    var jsonData = pm.response.json();
    
    // Проверяем наличие объекта 'session' в ответе
    pm.expect(jsonData).to.have.property('session');
    
    // Проверяем наличие ключей'  
    pm.expect(jsonData.session).to.have.property('user_id');
     pm.expect(jsonData.session).to.have.property('session_id');
    
    // Проверяем значения ключей 
    pm.expect(jsonData.session.user_id).to.equal('b4fde534');
    pm.expect(jsonData.session.session_id).to.equal('ffb392fd');  
});

//-------------------------------------------------------------------------------

pm.test("1. Проверка text", function () {
    var jsonData = pm.response.json();
    
    // Генерация текущей даты в формате DD-MM-YYYY
    var currentDate = new Date();
    var day = String(currentDate.getDate()).padStart(2, '0');
    var month = String(currentDate.getMonth() + 1).padStart(2, '0'); // Январь - это 0!
    var year = currentDate.getFullYear();
    var formattedDate = day + '-' + month + '-' + year;
    
    // Создание регулярного выражения с текущей датой
    var expectedPattern = new RegExp('^Ваши события на сегодня ' + formattedDate + ' 12:00 Прогулка на берегу моря, 14:00 Поздний обед');
    
    // Проверка наличия объекта
    pm.expect(jsonData).to.have.property('response');
    
    // Проверка, что response является объектом
    pm.expect(jsonData.response).to.be.an('object');
    
    // Проверка наличия ключа внутри объекта
    pm.expect(jsonData.response).to.have.property('text');
    
    // Проверка значения ключа внутри объекта
    pm.expect(jsonData.response.text).to.match(expectedPattern);   
   
});

//-------------------------------------------------------------------------------
pm.test("1. Проверка text", function () {
    var jsonData = pm.response.json();
    
    
    // Создание регулярного выражения с текущей датой
    var expectedPattern = new RegExp('^Ваши события ' + pm.variables.get('pastDate') + ' 17:00 Велосипедная прогулка, 20:00 Ужин, ' + pm.variables.get('curDate') + ' 17:00 Ужин, 17:01 Велосипедная прогулка, ' + pm.variables.get('futureDate') + ' 09:00 Поздний обед, 15:00 Прогулка на берегу моря');
    
    // Проверка наличия объекта
    pm.expect(jsonData).to.have.property('response');
    
    // Проверка, что response является объектом
    pm.expect(jsonData.response).to.be.an('object');
    
    // Проверка наличия ключа внутри объекта
    pm.expect(jsonData.response).to.have.property('text');
    
    // Проверка значения ключа внутри объекта
    pm.expect(jsonData.response.text).to.match(expectedPattern);   
   
});
//-------------------------------------------------------------------------------
pm.test("1. Проверка text", function () {
    var jsonData = pm.response.json();
    
    
    // Создание регулярного выражения с текущей датой
    var expectedPattern = new RegExp('^Событие успешно добавлено на ' + pm.variables.get('curDate') + ' 00:00 тест событие 1! Выполнен выход в главное меню ');
    
    // Проверка наличия объекта
    pm.expect(jsonData).to.have.property('response');
    
    // Проверка, что response является объектом
    pm.expect(jsonData.response).to.be.an('object');
    
    // Проверка наличия ключа внутри объекта
    pm.expect(jsonData.response).to.have.property('text');
	pm.expect(jsonData.response).to.have.property('end_session');
    
    // Проверка значения ключа внутри объекта
    pm.expect(jsonData.response.text).to.match(expectedPattern); 
	pm.expect(jsonData.response.end_session).to.eql(false);
   
});

//------------------------------------------------------------------------------


pm.test("1. Проверка text с currentDate", function () {
    var jsonData = pm.response.json();

    // Генерация текущей даты в формате DD-MM-YYYY
    var currentDate = new Date();
    var day = String(currentDate.getDate()).padStart(2, '0');
    var month = String(currentDate.getMonth() + 1).padStart(2, '0'); // Январь - это 0!
    var year = currentDate.getFullYear();
    var formattedDate = day + '-' + month + '-' + year;

    // Создание регулярного выражения с текущей датой
    var expectedPattern = new RegExp('^Событие успешно добавлено на ' + formattedDate + " 00:00 тест событие 1! Выполнен выход в главное меню ");

    // Проверка наличия объекта
    pm.expect(jsonData).to.have.property('response');

    // Проверка, что response является объектом
    pm.expect(jsonData.response).to.be.an('object');

    // Проверка наличия ключа внутри объекта
    pm.expect(jsonData.response).to.have.property('text');
    pm.expect(jsonData.response).to.have.property('end_session');

    // Проверка значения ключа внутри объекта
    pm.expect(jsonData.response.text).to.match(expectedPattern);
    pm.expect(jsonData.response.end_session).to.eql(false);

});

//------------------------------------------------------------------------------

pm.test("1. Проверка text", function () {
    let jsonData = pm.response.json();

    // Получаем день недели из запроса
    let requestBody = JSON.parse(pm.request.body.raw);
    let actions =  requestBody.state.session.actions;
     console.log(actions);

    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction
     
    let command = requestBody.request.command;
    let is_valid_command = jsonData.response.text.includes(command);
   

    // Функция для получения следующей даты определенного дня недели
    function getNextvalueAction(dayName) {
        const days = ['воскресенье', 'понедельник', 'вторник', 'среда', 'четверг', 'пятница', 'суббота'];
        const today = new Date();
        const dayIndex = days.indexOf(dayName);
        if (dayIndex === -1) return null;
        
        const targetDate = new Date(today);
        targetDate.setDate(today.getDate() + (dayIndex + 7 - today.getDay()) % 7);
        return targetDate;
    }
    
    // Получаем ближайшую дату для указанного дня недели
    let targetDate = getNextvalueAction(valueAction);
    console.log(targetDate);
   
    // Форматируем дату в DD-MM-YYYY
    let formattedDate = targetDate.getDate().toString().padStart(2, '0') + '-' +
                        (targetDate.getMonth() + 1).toString().padStart(2, '0') + '-' +
                        targetDate.getFullYear();
   

 /*   let is_expect_date = jsonData.response.text.includes("Событие успешно добавлено на " + formattedDate);
    console.log("Ожидаемая дата?:", is_expect_date);  
 */
     // Создание регулярного выражения с ожидаемой датой
    let expectedPattern = new RegExp('^Событие успешно добавлено на ' + formattedDate + " 00:00 тест событие 1! Выполнен выход в главное меню ");

    
    // Проверка command
    pm.expect(jsonData).to.have.property('response');
    
    // Проверка, что response является объектом
    pm.expect(jsonData.response).to.be.an('object');
    
    // Проверка наличия ключа внутри объекта
    pm.expect(jsonData.response).to.have.property('text');
    pm.expect(jsonData.response).to.have.property('end_session');
    
    // Проверка значения ключа внутри объекта
    pm.expect(jsonData.response.text).to.match(expectedPattern);
    pm.expect(jsonData.response.text).to.include(command); 
    pm.expect(jsonData.response.end_session).to.eql(false);

});

_________________ 
pm.test("3. Проверка'days' {}", function () {
    var jsonData = pm.response.json();
    
    // Проверяем наличие user_state_update в ответе
    pm.expect(jsonData).to.have.property('user_state_update');
    pm.expect(jsonData.user_state_update).to.be.an('object');

    // Проверяем наличие week внутри user_state_update
    pm.expect(jsonData.user_state_update).to.have.property('week');
    pm.expect(jsonData.user_state_update.week).to.be.an('object');

    // Проверяем наличие days внутри week
    pm.expect(jsonData.user_state_update.week).to.have.property('days');

    // Проверяем, что days является пустым объектом
    pm.expect(jsonData.user_state_update.week.days).to.be.an('object').that.is.empty;   
});

//---------------------------------------------------------------------------
Функция 
// Генерация текущей даты в формате DD-MM-YYYY

function generateCurrentDate() {
    var currentDate = new Date();
    var day = String(currentDate.getDate()).padStart(2, '0');
    var month = String(currentDate.getMonth() + 1).padStart(2, '0'); // Январь - это 0!
    var year = currentDate.getFullYear();
    return day + '-' + month + '-' + year;
}
// --------------------------------------------------------------------------
pm.test("1. Проверка text с currentDate", function () {
    var jsonData = pm.response.json();
    var formattedDate = generateCurrentDate()

    // Создание регулярного выражения с текущей датой
    var expectedPattern = new RegExp('^Событие успешно добавлено на ' + formattedDate + " 00:00 тест событие 1! Выполнен выход в главное меню ");

    // Проверка наличия объекта
    pm.expect(jsonData).to.have.property('response');

    // Проверка, что response является объектом
    pm.expect(jsonData.response).to.be.an('object');

    // Проверка наличия ключа внутри объекта
    pm.expect(jsonData.response).to.have.property('text');
    pm.expect(jsonData.response).to.have.property('end_session');

    // Проверка значения ключа внутри объекта
    pm.expect(jsonData.response.text).to.match(expectedPattern);
    pm.expect(jsonData.response.end_session).to.eql(false);

});
//-------------------------------------------------------------------------------
  pm.test("2. Значение ключей 'message_id' внутри 'session'", function () {
    var jsonData = pm.response.json();
    
    // Проверяем наличие объекта 'session' в ответе
    pm.expect(jsonData).to.have.property('session'); 
   
    // Проверяем наличие ключей внутри 'session'
	pm.expect(jsonData.session).to.have.property('message_id');
	
    // Проверяем, что значение ключей
	 pm.expect(jsonData.session.message_id).to.equal(3);
    
});
//------------------------------------------------------------------------------

pm.test("3. Проверка user_state_update", function () {
    var jsonData = pm.response.json();
    var formattedDate = generateCurrentDate()

    // Дополнительные проверки значений
    if (jsonData.user_state_update.week.days[formattedDate][0].time !== "00:00") {
        console.log("Ошибка: ожидалось значение '00:00' для time в первом элементе, но получено", jsonData.user_state_update.week.days[formattedDate][0].time);
    }
    if (jsonData.user_state_update.week.days[formattedDate][0].name !== "тест событие 1") {
        console.log("Ошибка: ожидалось значение 'тест событие 1' для name в первом элементе, но получено", jsonData.user_state_update.week.days[formattedDate][0].name);
    }	
    
    // Проверяем наличие и тип user_state_update
    pm.expect(jsonData).to.have.property('user_state_update');
    pm.expect(jsonData.user_state_update).to.be.an('object');

    // Проверяем наличие и тип object3 внутри user_state_update
    pm.expect(jsonData.user_state_update).to.have.property('week');
    pm.expect(jsonData.user_state_update.week).to.be.an('object');

    // Проверяем наличие и тип days внутри week
    pm.expect(jsonData.user_state_update.week).to.have.property('days');
    pm.expect(jsonData.user_state_update.week.days).to.be.an('object');

    // Проверяем наличие и тип {{currentDate}} внутри days
    pm.expect(jsonData.user_state_update.week.days).to.have.property(formattedDate);
    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.be.an('array');

    // Проверяем, что formattedDate содержит 2 элемента
    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.have.lengthOf(1);

    // Проверяем первый элемент formattedDate
    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('time', "00:00");
    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('name', "тест событие 1");  
});


//-------------------------------------------------------------------------------
pm.test("4. Проверка отсутствия user_state_update", function () {
    var jsonData = pm.response.json();
    pm.expect(jsonData).to.not.have.property('user_state_update');
});

_____________________________________ 
{
                        "number": 0,
                        "valueAction": "добавь событие",
                        "operation": "ADD_EVENT"
                    },
                    {
                        "number": 1,
                        "prevOperation": "ADD_EVENT",
                        "valueAction": "вторник",
                        "operation": "ADD_DAY"
                    },
                    {
                        "number": 2,
                        "prevOperation": "ADD_DAY",
                        "valueAction": "десять часов",
                        "operation": "ADD_TIME"
                    }
					
					
__________________________________________
исправление для текущей даты от AI 

pm.test("1. Проверка text", function () {
    var jsonData = pm.response.json();

    // Получаем день недели из запроса
    let requestBody = JSON.parse(pm.request.body.raw);
    let actions =  requestBody.state.session.actions;

    var valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction

    // Функция для получения следующей даты определенного дня недели
    function getNextvalueAction(dayName) {
        const days = ['воскресенье', 'понедельник', 'вторник', 'среда', 'четверг', 'пятница', 'суббота'];
        const today = new Date();
        const dayIndex = days.indexOf(dayName);
        if (dayIndex === -1) return null;
        
        const targetDate = new Date(today);
        targetDate.setDate(today.getDate() + (dayIndex + 7 - today.getDay()) % 7);
        return targetDate;
    }
    
    // Получаем ближайшую дату для указанного дня недели
    var targetDate = getNextvalueAction(valueAction);
    if (!targetDate) {
        console.log("Некорректное значение дня недели");
        return; // Exit the test if the day name is incorrect
    }
    console.log(targetDate);
   
    // Форматируем дату в DD-MM-YYYY
    var formattedDate = targetDate.getDate().toString().padStart(2, '0') + '-' +
                        (targetDate.getMonth() + 1).toString().padStart(2, '0') + '-' +
                        targetDate.getFullYear();
    console.log("Ожидаемая дата:", formattedDate);  


     // Создание регулярного выражения с ожидаемой датой
    var expectedPattern = new RegExp('^Событие успешно добавлено на ' + formattedDate );

    
    // Проверка наличия объекта
    pm.expect(jsonData).to.have.property('response');
    
    // Проверка, что response является объектом
    pm.expect(jsonData.response).to.be.an('object');
    
    // Проверка наличия ключа внутри объекта
    pm.expect(jsonData.response).to.have.property('text');
    pm.expect(jsonData.response).to.have.property('end_session');
    
    // Проверка значения ключа внутри объекта
    pm.expect(jsonData.response.text).to.match(expectedPattern);
    pm.expect(jsonData.response.end_session).to.eql(false);

});


//-------------------------------------------------------------------------------
pm.test("3. Проверка 'prevActions'", function () {
    var jsonData = pm.response.json();

    // Проверяем наличие session_state в ответе
    pm.expect(jsonData).to.have.property('session_state');
    pm.expect(jsonData.session_state).to.be.an('object');

    // Проверяем наличие actions внутри session_state
    pm.expect(jsonData.session_state).to.have.property('actions');
    pm.expect(jsonData.session_state.actions).to.be.an('object');

    // Проверяем наличие prevActions внутри actions
    pm.expect(jsonData.session_state.actions).to.have.property('prevActions');
    pm.expect(jsonData.session_state.actions.prevActions).to.be.an('array');

    // Проверяем, что prevActions не пустой
    pm.expect(jsonData.session_state.actions.prevActions).to.have.length.above(0);

    // Проверяем ключи в первом элементе prevActions
    pm.expect(jsonData.session_state.actions.prevActions[0]).to.have.property('number');
    pm.expect(jsonData.session_state.actions.prevActions[0]).to.have.property('operation');
    pm.expect(jsonData.session_state.actions.prevActions[0]).to.have.property('valueAction');

    // Проверяем значения ключей
    pm.expect(jsonData.session_state.actions.prevActions[0].number).to.equal(0);
    pm.expect(jsonData.session_state.actions.prevActions[0].operation).to.equal("ADD_EVENT");
    pm.expect(jsonData.session_state.actions.prevActions[0].valueAction).to.equal("добавь событие");

    // Проверяем ключи во втором элементе prevActions
    pm.expect(jsonData.session_state.actions.prevActions[1]).to.have.property('number');
    pm.expect(jsonData.session_state.actions.prevActions[1]).to.have.property('operation');
    pm.expect(jsonData.session_state.actions.prevActions[1]).to.have.property('prevOperation');
    pm.expect(jsonData.session_state.actions.prevActions[1]).to.have.property('valueAction');

    // Проверяем значения ключей
    pm.expect(jsonData.session_state.actions.prevActions[1].number).to.equal(1);
    pm.expect(jsonData.session_state.actions.prevActions[1].operation).to.equal("ADD_DAY");
    pm.expect(jsonData.session_state.actions.prevActions[1].prevOperation).to.equal("ADD_EVENT");
    pm.expect(jsonData.session_state.actions.prevActions[1].valueAction).to.equal("сегодня");

        // Проверяем ключи во третьем элементе prevActions
    pm.expect(jsonData.session_state.actions.prevActions[1]).to.have.property('number');
    pm.expect(jsonData.session_state.actions.prevActions[1]).to.have.property('operation');
    pm.expect(jsonData.session_state.actions.prevActions[1]).to.have.property('prevOperation');
    pm.expect(jsonData.session_state.actions.prevActions[1]).to.have.property('valueAction');

    // Проверяем значения ключей
    pm.expect(jsonData.session_state.actions.prevActions[1].number).to.equal(2);
    pm.expect(jsonData.session_state.actions.prevActions[1].operation).to.equal("ADD_TIME");
    pm.expect(jsonData.session_state.actions.prevActions[1].prevOperation).to.equal("ADD_DAY");
    pm.expect(jsonData.session_state.actions.prevActions[1].valueAction).to.equal("ноль часов ноль");

});

        "user_id": "{{user_id}}",
        "session_id": "{{session_id}}",	
		
		        "user_id": "8783711111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "session_id": "b6dc6eee1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
		
		


 // Вывод для отладки
    console.log("Ожидаемый паттерн:", expectedPattern);
    console.log("Фактическое значение:", jsonData.response.text);		
		
_____________________ 


pm.test("1. Проверка text", function () {
    var jsonData = pm.response.json();
    
    // Проверка наличия объекта
    pm.expect(jsonData).to.have.property('response');
    
    // Проверка, что объект_тест является объектом
    pm.expect(jsonData.response).to.be.an('object');
    
    // Проверка наличия ключа внутри объекта
    pm.expect(jsonData.response).to.have.property('text');
    pm.expect(jsonData.response).to.have.property('end_session');
    
    // Проверка значения ключа внутри объекта
    pm.expect(jsonData.response.text).to.eql('Планировщик недели прощается с вами! До свидания!');
    pm.expect(jsonData.response.end_session).to.eql(false);
    });
_____________________ 
pm.expect(jsonData.response.end_session).to.eql(false);

true

//-------------------------------------------------------------------------------
pm.test("3. Проверка структуры ответа и значения 'prevActions.number'", function () {
    var jsonData = pm.response.json();

    // Проверяем наличие session_state в ответе
    pm.expect(jsonData).to.have.property('session_state');
    pm.expect(jsonData.session_state).to.be.an('object');

    // Проверяем наличие actions внутри session_state
    pm.expect(jsonData.session_state).to.have.property('actions');
    pm.expect(jsonData.session_state.actions).to.be.an('object');

    // Проверяем наличие prevActions внутри actions
    pm.expect(jsonData.session_state.actions).to.have.property('prevActions');
    pm.expect(jsonData.session_state.actions.prevActions).to.be.an('array');

    // Проверяем, что prevActions не пустой
    pm.expect(jsonData.session_state.actions.prevActions).to.have.length.above(0);

    // Проверяем наличие number в первом элементе prevActions
    pm.expect(jsonData.session_state.actions.prevActions[0]).to.have.property('number');

    // Проверяем, что number равен 0
    pm.expect(jsonData.session_state.actions.prevActions[0].number).to.equal(0);

});

//-------------------------------------------------------------------------------
pm.test("3. Проверка структуры ответа и значения 'prevActions.number'", function () {
    var jsonData = pm.response.json();

    // Проверяем наличие session_state в ответе
    pm.expect(jsonData).to.have.property('session_state');
    pm.expect(jsonData.session_state).to.be.an('object');

    // Проверяем наличие actions внутри session_state
    pm.expect(jsonData.session_state).to.have.property('actions');
    pm.expect(jsonData.session_state.actions).to.be.an('object');

    // Проверяем наличие prevActions внутри actions
    pm.expect(jsonData.session_state.actions).to.have.property('prevActions');
    pm.expect(jsonData.session_state.actions.prevActions).to.be.an('array');

    // Проверяем, что prevActions не пустой
    pm.expect(jsonData.session_state.actions.prevActions).to.have.length.above(0);

    // Проверяем ключи в первом элементе prevActions
    pm.expect(jsonData.session_state.actions.prevActions[0]).to.have.property('number');
    pm.expect(jsonData.session_state.actions.prevActions[0]).to.have.property('operation');
    pm.expect(jsonData.session_state.actions.prevActions[0]).to.have.property('valueAction');

    // Проверяем значения ключей
    pm.expect(jsonData.session_state.actions.prevActions[0].number).to.equal(0);
    pm.expect(jsonData.session_state.actions.prevActions[0].operation).to.equal("ADD_EVENT");
    pm.expect(jsonData.session_state.actions.prevActions[0].valueAction).to.equal("добавь событие");

});


//-------------------------------------------------------------------------------
pm.test("3. Проверка 'prevActions'", function () {
    var jsonData = pm.response.json();

    // Проверяем наличие session_state в ответе
    pm.expect(jsonData).to.have.property('session_state');
    pm.expect(jsonData.session_state).to.be.an('object');

    // Проверяем наличие actions внутри session_state
    pm.expect(jsonData.session_state).to.have.property('actions');
    pm.expect(jsonData.session_state.actions).to.be.an('object');

    // Проверяем наличие prevActions внутри actions
    pm.expect(jsonData.session_state.actions).to.have.property('prevActions');
    pm.expect(jsonData.session_state.actions.prevActions).to.be.an('array');

    // Проверяем, что prevActions не пустой
    pm.expect(jsonData.session_state.actions.prevActions).to.have.length.above(0);

    // Проверяем ключи в первом элементе prevActions
    pm.expect(jsonData.session_state.actions.prevActions[0]).to.have.property('number');
    pm.expect(jsonData.session_state.actions.prevActions[0]).to.have.property('operation');
    pm.expect(jsonData.session_state.actions.prevActions[0]).to.have.property('valueAction');

    // Проверяем значения ключей
    pm.expect(jsonData.session_state.actions.prevActions[0].number).to.equal(0);
    pm.expect(jsonData.session_state.actions.prevActions[0].operation).to.equal("ADD_EVENT");
    pm.expect(jsonData.session_state.actions.prevActions[0].valueAction).to.equal("добавь событие");

    // Проверяем ключи во втором элементе prevActions
    pm.expect(jsonData.session_state.actions.prevActions[1]).to.have.property('number');
    pm.expect(jsonData.session_state.actions.prevActions[1]).to.have.property('operation');
    pm.expect(jsonData.session_state.actions.prevActions[1]).to.have.property('prevOperation');
    pm.expect(jsonData.session_state.actions.prevActions[1]).to.have.property('valueAction');

    // Проверяем значения ключей
    pm.expect(jsonData.session_state.actions.prevActions[1].number).to.equal(1);
    pm.expect(jsonData.session_state.actions.prevActions[1].operation).to.equal("ADD_DAY");
    pm.expect(jsonData.session_state.actions.prevActions[1].prevOperation).to.equal("ADD_EVENT");
    pm.expect(jsonData.session_state.actions.prevActions[1].valueAction).to.equal("сегодня");

});
//-------------------------------------------------------------------------------
  pm.test("2. Значение ключей 'message_id' внутри 'session'", function () {
    var jsonData = pm.response.json();
    
    // Проверяем наличие объекта 'session' в ответе
    pm.expect(jsonData).to.have.property('session'); 
   
    // Проверяем наличие ключей внутри 'session'
	pm.expect(jsonData.session).to.have.property('message_id');
	
    // Проверяем, что значение ключей
	 pm.expect(jsonData.session.message_id).to.equal(3);
    
});

//-------------------------------------------------------------------------------

pm.test("5. Проверка структуры ответа и значений в user_state_update", function () {
    var jsonData = pm.response.json();

     // Дополнительные проверки значений
    if (jsonData.user_state_update.week.days["{{currentDate}}"][0].time !== "12:00") {
        console.log("Ошибка: ожидалось значение '01:00' для time в первом элементе, но получено", jsonData.user_state_update.week.days["{{currentDate}}"][0].time);
    }
    if (jsonData.user_state_update.week.days["{{currentDate}}"][0].name !== "Прогулка на берегу моря") {
        console.log("Ошибка: ожидалось значение 'Прогулка на берегу моря' для name в первом элементе, но получено", jsonData.user_state_update.week.days["{{currentDate}}"][0].name);
    }
	
	 if (jsonData.user_state_update.week.days["{{currentDate}}"][1].time !== "14:00") {
        console.log("Ошибка: ожидалось значение '14:00' для time во втором элементе, но получено", jsonData.user_state_update.week.days["{{currentDate}}"][1].time);	
	}
	
    if (jsonData.user_state_update.week.days["{{currentDate}}"][1].name !== "Поздний обед") {
        console.log("Ошибка: ожидалось значение 'Поздний обед' для name во втором элементе, но получено", jsonData.user_state_update.week.days["{{currentDate}}"][1].name);
    }
	

    // Проверяем наличие и тип user_state_update
    pm.expect(jsonData).to.have.property('user_state_update');
    pm.expect(jsonData.user_state_update).to.be.an('object');

    // Проверяем наличие и тип object3 внутри user_state_update
    pm.expect(jsonData.user_state_update).to.have.property('week');
    pm.expect(jsonData.user_state_update.week).to.be.an('object');

    // Проверяем наличие и тип days внутри week
    pm.expect(jsonData.user_state_update.week).to.have.property('days');
    pm.expect(jsonData.user_state_update.week.days).to.be.an('object');

    // Проверяем наличие и тип {{currentDate}} внутри days
    pm.expect(jsonData.user_state_update.week.days).to.have.property('{{currentDate}}');
    pm.expect(jsonData.user_state_update.week.days["{{currentDate}}"]).to.be.an('array');

    // Проверяем, что "{{currentDate}}" содержит 2 элемента
    pm.expect(jsonData.user_state_update.week.days["{{currentDate}}"]).to.have.lengthOf(2);

    // Проверяем первый элемент "{{currentDate}}"
    pm.expect(jsonData.user_state_update.week.days["{{currentDate}}"][0]).to.have.property('time', "12:00");
    pm.expect(jsonData.user_state_update.week.days["{{currentDate}}"][0]).to.have.property('name', "Прогулка на берегу моря");

    // Проверяем второй элемент "{{currentDate}}"
    pm.expect(jsonData.user_state_update.week.days["{{currentDate}}"][1]).to.have.property('time', "14:00");
    pm.expect(jsonData.user_state_update.week.days["{{currentDate}}"][1]).to.have.property('name', "Поздний обед");

});


//когда нет pre реквеста

pm.test("3. Проверка user_state_update", function () {
    var jsonData = pm.response.json();

     // Дополнительные проверки значений
    if (jsonData.user_state_update.week.days[formattedDate][0].time !== "00:00") {
        console.log("Ошибка: ожидалось значение '00:00' для time в первом элементе, но получено", jsonData.user_state_update.week.days[formattedDate][0].time);
    }
    if (jsonData.user_state_update.week.days[formattedDate][0].name !== "тест событие 1") {
        console.log("Ошибка: ожидалось значение 'тест событие 1' для name в первом элементе, но получено", jsonData.user_state_update.week.days[formattedDate][0].name);
    }	
	 
    // Проверяем наличие и тип user_state_update
    pm.expect(jsonData).to.have.property('user_state_update');
    pm.expect(jsonData.user_state_update).to.be.an('object');

    // Проверяем наличие и тип object3 внутри user_state_update
    pm.expect(jsonData.user_state_update).to.have.property('week');
    pm.expect(jsonData.user_state_update.week).to.be.an('object');

    // Проверяем наличие и тип days внутри week
    pm.expect(jsonData.user_state_update.week).to.have.property('days');
    pm.expect(jsonData.user_state_update.week.days).to.be.an('object');

    // Проверяем наличие и тип {{currentDate}} внутри days
    pm.expect(jsonData.user_state_update.week.days).to.have.property(formattedDate);
    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.be.an('array');

    // Проверяем, что formattedDate содержит 2 элемента
    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.have.lengthOf(1);

    // Проверяем первый элемент formattedDate
    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('time', "00:00");
    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('name', "тест событие 1");   

});

//-------------------------------------------------------------------------------
pm.test("3. Проверка структуры ответа и значений в user_state_update, pastDate и futureDate", function () {
    var jsonData = pm.response.json();

     // Дополнительные проверки значений
    if (jsonData.user_state_update.week.days[pm.variables.get('pastDate')][0].time !== "12:00") {
        console.log("Ошибка: ожидалось значение '01:00' для time в первом элементе, но получено", jsonData.user_state_update.week.days[pm.variables.get('pastDate')][0].time);
    }
    if (jsonData.user_state_update.week.days[pm.variables.get('pastDate')][0].name !== "Прогулка на берегу моря") {
        console.log("Ошибка: ожидалось значение 'Прогулка на берегу моря' для name в первом элементе, но получено", jsonData.user_state_update.week.days[pm.variables.get('pastDate')][0].name);
    }	
	if (jsonData.user_state_update.week.days[pm.variables.get('pastDate')][1].time !== "14:00") {
        console.log("Ошибка: ожидалось значение '14:00' для time во втором элементе, но получено", jsonData.user_state_update.week.days[pm.variables.get('pastDate')][1].time);	
	}	
    if (jsonData.user_state_update.week.days[pm.variables.get('pastDate')][1].name !== "Поздний обед") {
        console.log("Ошибка: ожидалось значение 'Поздний обед' для name во втором элементе, но получено", jsonData.user_state_update.week.days[pm.variables.get('pastDate')][1].name);
    }
	
	if (jsonData.user_state_update.week.days[pm.variables.get('futureDate')][0].time !== "13:30") {
        console.log("Ошибка: ожидалось значение '13:30' для time в первом элементе, но получено", jsonData.user_state_update.week.days[pm.variables.get('futureDate')][0].time);
    }
    if (jsonData.user_state_update.week.days[pm.variables.get('futureDate')][0].name !== "Приготовить асаду") {
        console.log("Ошибка: ожидалось значение 'Приготовить асаду' для name в первом элементе, но получено", jsonData.user_state_update.week.days[pm.variables.get('futureDate')][0].name);
    }
	
	 if (jsonData.user_state_update.week.days[pm.variables.get('futureDate')][1].time !== "09:10") {
        console.log("Ошибка: ожидалось значение '09:10' для time во втором элементе, но получено", jsonData.user_state_update.week.days[pm.variables.get('futureDate')][1].time);	
	}
	
    if (jsonData.user_state_update.week.days[pm.variables.get('futureDate')][1].name !== "Прогуляться по утреннему Буэнос- Айресу и выругаться по поводу эмиграции") {
        console.log("Ошибка: ожидалось значение 'Прогуляться по утреннему Буэнос- Айресу и выругаться по поводу эмиграции' для name во втором элементе, но получено", jsonData.user_state_update.week.days[pm.variables.get('futureDate')][1].name);
    }
	
    // Проверяем наличие и тип user_state_update
    pm.expect(jsonData).to.have.property('user_state_update');
    pm.expect(jsonData.user_state_update).to.be.an('object');

    // Проверяем наличие и тип object3 внутри user_state_update
    pm.expect(jsonData.user_state_update).to.have.property('week');
    pm.expect(jsonData.user_state_update.week).to.be.an('object');

    // Проверяем наличие и тип days внутри week
    pm.expect(jsonData.user_state_update.week).to.have.property('days');
    pm.expect(jsonData.user_state_update.week.days).to.be.an('object');

    // Проверяем наличие и тип {{pastDate}} внутри days
    pm.expect(jsonData.user_state_update.week.days).to.have.property(pm.variables.get('pastDate'));
    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('pastDate')]).to.be.an('array');
	
	    // Проверяем наличие и тип {{futureDate}} внутри days
    pm.expect(jsonData.user_state_update.week.days).to.have.property(pm.variables.get('futureDate'));
    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('futureDate')]).to.be.an('array');

    // Проверяем, что 'pastDate' содержит 2 элемента
    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('pastDate')]).to.have.lengthOf(2);
	
	// Проверяем, что 'futureDate' содержит 2 элемента
    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('futureDate')]).to.have.lengthOf(2);

    // Проверяем первый элемент 'pastDate'
    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('pastDate')][0]).to.have.property('time', "12:00");
    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('pastDate')][0]).to.have.property('name', "Прогулка на берегу моря");

    // Проверяем второй элемент 'pastDate'
    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('pastDate')][1]).to.have.property('time', "14:00");
    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('pastDate')][1]).to.have.property('name', "Поздний обед");
	
	// Проверяем первый элемент 'futureDate'
    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('futureDate')][0]).to.have.property('time', "13:30");
    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('futureDate')][0]).to.have.property('name', "Приготовить асаду");

    // Проверяем второй элемент 'futureDate'
    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('futureDate')][1]).to.have.property('time', "09:10");
    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('futureDate')][1]).to.have.property('name', "Прогуляться по утреннему Буэнос- Айресу и выругаться по поводу эмиграции");
});

//-------------------------------------------------------------------------------
с фунцией, когда нет пререквеста

// Генерация текущей даты в формате DD-MM-YYYY

function generateCurrentDate() {
    var currentDate = new Date();
    var day = String(currentDate.getDate()).padStart(2, '0');
    var month = String(currentDate.getMonth() + 1).padStart(2, '0'); // Январь - это 0!
    var year = currentDate.getFullYear();
    return day + '-' + month + '-' + year;
}
// 
pm.test("1. Проверка text с currentDate", function () {
    var jsonData = pm.response.json();
    var formattedDate = generateCurrentDate()

    // Создание регулярного выражения с текущей датой
    var expectedPattern = new RegExp('^Ваши события на сегодня ' + formattedDate + " 00:00 Поздний обед00, 01:00 Поздний обед01, 02:00 Поздний обед02, 03:00 Поздний обед03, 04:00 Поздний обед04, 10:00 Поздний обед10, 11:00 Поздний обед11, 12:00 Прогулка на берегу моря12, 14:00 Поздний обед14, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 17:00 Поздний обед17");

    // Проверка наличия объекта
    pm.expect(jsonData).to.have.property('response');

    // Проверка, что response является объектом
    pm.expect(jsonData.response).to.be.an('object');

    // Проверка наличия ключа внутри объекта
    pm.expect(jsonData.response).to.have.property('text');
    pm.expect(jsonData.response).to.have.property('end_session');

    // Проверка значения ключа внутри объекта
    pm.expect(jsonData.response.text).to.match(expectedPattern);
    pm.expect(jsonData.response.end_session).to.eql(false);

});
//-------------------------------------------------------------------------------




//-------------------------------------------------------------------------------
pm.test("0.2 Значение ключей user_id, session_id внутри 'session'", function () {
    var jsonData = pm.response.json();
    
    // Проверяем наличие объекта 'session' в ответе
    pm.expect(jsonData).to.have.property('session');
    
    // Проверяем наличие ключей'  
    pm.expect(jsonData.session).to.have.property('user_id');
     pm.expect(jsonData.session).to.have.property('session_id');
    
    // Проверяем значения ключей 
    pm.expect(jsonData.session.user_id).to.equal('b4fde534');
    pm.expect(jsonData.session.session_id).to.equal('ffb392fd');  
});

//-------------------------------------------------------------------------------

pm.test("1. Проверка text", function () {
    var jsonData = pm.response.json();
    
    // Генерация текущей даты в формате DD-MM-YYYY
    var currentDate = new Date();
    var day = String(currentDate.getDate()).padStart(2, '0');
    var month = String(currentDate.getMonth() + 1).padStart(2, '0'); // Январь - это 0!
    var year = currentDate.getFullYear();
    var formattedDate = day + '-' + month + '-' + year;
    
    // Создание регулярного выражения с текущей датой
    var expectedPattern = new RegExp('^Ваши события на сегодня ' + formattedDate + ' 12:00 Прогулка на берегу моря, 14:00 Поздний обед');
    
    // Проверка наличия объекта
    pm.expect(jsonData).to.have.property('response');
    
    // Проверка, что response является объектом
    pm.expect(jsonData.response).to.be.an('object');
    
    // Проверка наличия ключа внутри объекта
    pm.expect(jsonData.response).to.have.property('text');
    
    // Проверка значения ключа внутри объекта
    pm.expect(jsonData.response.text).to.match(expectedPattern);   
   
});

//-------------------------------------------------------------------------------
pm.test("1. Проверка text", function () {
    var jsonData = pm.response.json();
    
    
    // Создание регулярного выражения с текущей датой
    var expectedPattern = new RegExp('^Ваши события ' + pm.variables.get('pastDate') + ' 17:00 Велосипедная прогулка, 20:00 Ужин, ' + pm.variables.get('curDate') + ' 17:00 Ужин, 17:01 Велосипедная прогулка, ' + pm.variables.get('futureDate') + ' 09:00 Поздний обед, 15:00 Прогулка на берегу моря');
    
    // Проверка наличия объекта
    pm.expect(jsonData).to.have.property('response');
    
    // Проверка, что response является объектом
    pm.expect(jsonData.response).to.be.an('object');
    
    // Проверка наличия ключа внутри объекта
    pm.expect(jsonData.response).to.have.property('text');
    
    // Проверка значения ключа внутри объекта
    pm.expect(jsonData.response.text).to.match(expectedPattern);   
   
});
//-------------------------------------------------------------------------------
pm.test("1. Проверка text", function () {
    var jsonData = pm.response.json();
    
    
    // Создание регулярного выражения с текущей датой
    var expectedPattern = new RegExp('^Событие успешно добавлено на ' + pm.variables.get('curDate') + ' 00:00 тест событие 1! Выполнен выход в главное меню ');
    
    // Проверка наличия объекта
    pm.expect(jsonData).to.have.property('response');
    
    // Проверка, что response является объектом
    pm.expect(jsonData.response).to.be.an('object');
    
    // Проверка наличия ключа внутри объекта
    pm.expect(jsonData.response).to.have.property('text');
	pm.expect(jsonData.response).to.have.property('end_session');
    
    // Проверка значения ключа внутри объекта
    pm.expect(jsonData.response.text).to.match(expectedPattern); 
	pm.expect(jsonData.response.end_session).to.eql(false);
   
});

//------------------------------------------------------------------------------


pm.test("1. Проверка text с currentDate", function () {
    var jsonData = pm.response.json();

    // Генерация текущей даты в формате DD-MM-YYYY
    var currentDate = new Date();
    var day = String(currentDate.getDate()).padStart(2, '0');
    var month = String(currentDate.getMonth() + 1).padStart(2, '0'); // Январь - это 0!
    var year = currentDate.getFullYear();
    var formattedDate = day + '-' + month + '-' + year;

    // Создание регулярного выражения с текущей датой
    var expectedPattern = new RegExp('^Событие успешно добавлено на ' + formattedDate + " 00:00 тест событие 1! Выполнен выход в главное меню ");

    // Проверка наличия объекта
    pm.expect(jsonData).to.have.property('response');

    // Проверка, что response является объектом
    pm.expect(jsonData.response).to.be.an('object');

    // Проверка наличия ключа внутри объекта
    pm.expect(jsonData.response).to.have.property('text');
    pm.expect(jsonData.response).to.have.property('end_session');

    // Проверка значения ключа внутри объекта
    pm.expect(jsonData.response.text).to.match(expectedPattern);
    pm.expect(jsonData.response.end_session).to.eql(false);

});

//------------------------------------------------------------------------------

pm.test("1. Проверка text", function () {
    let jsonData = pm.response.json();

    // Получаем день недели из запроса
    let requestBody = JSON.parse(pm.request.body.raw);
    let actions =  requestBody.state.session.actions;
     console.log(actions);

    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction
     
    let command = requestBody.request.command;
    let is_valid_command = jsonData.response.text.includes(command);
   

    // Функция для получения следующей даты определенного дня недели
    function getNextvalueAction(dayName) {
        const days = ['воскресенье', 'понедельник', 'вторник', 'среда', 'четверг', 'пятница', 'суббота'];
        const today = new Date();
        const dayIndex = days.indexOf(dayName);
        if (dayIndex === -1) return null;
        
        const targetDate = new Date(today);
        targetDate.setDate(today.getDate() + (dayIndex + 7 - today.getDay()) % 7);
        return targetDate;
    }
    
    // Получаем ближайшую дату для указанного дня недели
    let targetDate = getNextvalueAction(valueAction);
    console.log(targetDate);
   
    // Форматируем дату в DD-MM-YYYY
    let formattedDate = targetDate.getDate().toString().padStart(2, '0') + '-' +
                        (targetDate.getMonth() + 1).toString().padStart(2, '0') + '-' +
                        targetDate.getFullYear();
   

 /*   let is_expect_date = jsonData.response.text.includes("Событие успешно добавлено на " + formattedDate);
    console.log("Ожидаемая дата?:", is_expect_date);  
 */
     // Создание регулярного выражения с ожидаемой датой
    let expectedPattern = new RegExp('^Событие успешно добавлено на ' + formattedDate + " 00:00 тест событие 1! Выполнен выход в главное меню ");

    
    // Проверка command
    pm.expect(jsonData).to.have.property('response');
    
    // Проверка, что response является объектом
    pm.expect(jsonData.response).to.be.an('object');
    
    // Проверка наличия ключа внутри объекта
    pm.expect(jsonData.response).to.have.property('text');
    pm.expect(jsonData.response).to.have.property('end_session');
    
    // Проверка значения ключа внутри объекта
    pm.expect(jsonData.response.text).to.match(expectedPattern);
    pm.expect(jsonData.response.text).to.include(command); 
    pm.expect(jsonData.response.end_session).to.eql(false);

});

_________________ 
pm.test("3. Проверка'days' {}", function () {
    var jsonData = pm.response.json();
    
    // Проверяем наличие user_state_update в ответе
    pm.expect(jsonData).to.have.property('user_state_update');
    pm.expect(jsonData.user_state_update).to.be.an('object');

    // Проверяем наличие week внутри user_state_update
    pm.expect(jsonData.user_state_update).to.have.property('week');
    pm.expect(jsonData.user_state_update.week).to.be.an('object');

    // Проверяем наличие days внутри week
    pm.expect(jsonData.user_state_update.week).to.have.property('days');

    // Проверяем, что days является пустым объектом
    pm.expect(jsonData.user_state_update.week.days).to.be.an('object').that.is.empty;   
});

//---------------------------------------------------------------------------
Функция 
// Генерация текущей даты в формате DD-MM-YYYY

function generateCurrentDate() {
    var currentDate = new Date();
    var day = String(currentDate.getDate()).padStart(2, '0');
    var month = String(currentDate.getMonth() + 1).padStart(2, '0'); // Январь - это 0!
    var year = currentDate.getFullYear();
    return day + '-' + month + '-' + year;
}
// --------------------------------------------------------------------------
pm.test("1. Проверка text с currentDate", function () {
    var jsonData = pm.response.json();
    var formattedDate = generateCurrentDate()

    // Создание регулярного выражения с текущей датой
    var expectedPattern = new RegExp('^Событие успешно добавлено на ' + formattedDate + " 00:00 тест событие 1! Выполнен выход в главное меню ");

    // Проверка наличия объекта
    pm.expect(jsonData).to.have.property('response');

    // Проверка, что response является объектом
    pm.expect(jsonData.response).to.be.an('object');

    // Проверка наличия ключа внутри объекта
    pm.expect(jsonData.response).to.have.property('text');
    pm.expect(jsonData.response).to.have.property('end_session');

    // Проверка значения ключа внутри объекта
    pm.expect(jsonData.response.text).to.match(expectedPattern);
    pm.expect(jsonData.response.end_session).to.eql(false);

});
//-------------------------------------------------------------------------------
  pm.test("2. Значение ключей 'message_id' внутри 'session'", function () {
    var jsonData = pm.response.json();
    
    // Проверяем наличие объекта 'session' в ответе
    pm.expect(jsonData).to.have.property('session'); 
   
    // Проверяем наличие ключей внутри 'session'
	pm.expect(jsonData.session).to.have.property('message_id');
	
    // Проверяем, что значение ключей
	 pm.expect(jsonData.session.message_id).to.equal(3);
    
});
//------------------------------------------------------------------------------

pm.test("3. Проверка user_state_update", function () {
    var jsonData = pm.response.json();
    var formattedDate = generateCurrentDate()

    // Дополнительные проверки значений
    if (jsonData.user_state_update.week.days[formattedDate][0].time !== "00:00") {
        console.log("Ошибка: ожидалось значение '00:00' для time в первом элементе, но получено", jsonData.user_state_update.week.days[formattedDate][0].time);
    }
    if (jsonData.user_state_update.week.days[formattedDate][0].name !== "тест событие 1") {
        console.log("Ошибка: ожидалось значение 'тест событие 1' для name в первом элементе, но получено", jsonData.user_state_update.week.days[formattedDate][0].name);
    }	
    
    // Проверяем наличие и тип user_state_update
    pm.expect(jsonData).to.have.property('user_state_update');
    pm.expect(jsonData.user_state_update).to.be.an('object');

    // Проверяем наличие и тип object3 внутри user_state_update
    pm.expect(jsonData.user_state_update).to.have.property('week');
    pm.expect(jsonData.user_state_update.week).to.be.an('object');

    // Проверяем наличие и тип days внутри week
    pm.expect(jsonData.user_state_update.week).to.have.property('days');
    pm.expect(jsonData.user_state_update.week.days).to.be.an('object');

    // Проверяем наличие и тип {{currentDate}} внутри days
    pm.expect(jsonData.user_state_update.week.days).to.have.property(formattedDate);
    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.be.an('array');

    // Проверяем, что formattedDate содержит 2 элемента
    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.have.lengthOf(1);

    // Проверяем первый элемент formattedDate
    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('time', "00:00");
    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('name', "тест событие 1");  
});


//-------------------------------------------------------------------------------
pm.test("4. Проверка отсутствия user_state_update", function () {
    var jsonData = pm.response.json();
    pm.expect(jsonData).to.not.have.property('user_state_update');
});

_____________________________________ 
{
                        "number": 0,
                        "valueAction": "добавь событие",
                        "operation": "ADD_EVENT"
                    },
                    {
                        "number": 1,
                        "prevOperation": "ADD_EVENT",
                        "valueAction": "вторник",
                        "operation": "ADD_DAY"
                    },
                    {
                        "number": 2,
                        "prevOperation": "ADD_DAY",
                        "valueAction": "десять часов",
                        "operation": "ADD_TIME"
                    }
					
					
__________________________________________
исправление для текущей даты от AI 

pm.test("1. Проверка text", function () {
    var jsonData = pm.response.json();

    // Получаем день недели из запроса
    let requestBody = JSON.parse(pm.request.body.raw);
    let actions =  requestBody.state.session.actions;

    var valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction

    // Функция для получения следующей даты определенного дня недели
    function getNextvalueAction(dayName) {
        const days = ['воскресенье', 'понедельник', 'вторник', 'среда', 'четверг', 'пятница', 'суббота'];
        const today = new Date();
        const dayIndex = days.indexOf(dayName);
        if (dayIndex === -1) return null;
        
        const targetDate = new Date(today);
        targetDate.setDate(today.getDate() + (dayIndex + 7 - today.getDay()) % 7);
        return targetDate;
    }
    
    // Получаем ближайшую дату для указанного дня недели
    var targetDate = getNextvalueAction(valueAction);
    if (!targetDate) {
        console.log("Некорректное значение дня недели");
        return; // Exit the test if the day name is incorrect
    }
    console.log(targetDate);
   
    // Форматируем дату в DD-MM-YYYY
    var formattedDate = targetDate.getDate().toString().padStart(2, '0') + '-' +
                        (targetDate.getMonth() + 1).toString().padStart(2, '0') + '-' +
                        targetDate.getFullYear();
    console.log("Ожидаемая дата:", formattedDate);  


     // Создание регулярного выражения с ожидаемой датой
    var expectedPattern = new RegExp('^Событие успешно добавлено на ' + formattedDate );

    
    // Проверка наличия объекта
    pm.expect(jsonData).to.have.property('response');
    
    // Проверка, что response является объектом
    pm.expect(jsonData.response).to.be.an('object');
    
    // Проверка наличия ключа внутри объекта
    pm.expect(jsonData.response).to.have.property('text');
    pm.expect(jsonData.response).to.have.property('end_session');
    
    // Проверка значения ключа внутри объекта
    pm.expect(jsonData.response.text).to.match(expectedPattern);
    pm.expect(jsonData.response.end_session).to.eql(false);

});


//-------------------------------------------------------------------------------
pm.test("3. Проверка 'prevActions'", function () {
    var jsonData = pm.response.json();

    // Проверяем наличие session_state в ответе
    pm.expect(jsonData).to.have.property('session_state');
    pm.expect(jsonData.session_state).to.be.an('object');

    // Проверяем наличие actions внутри session_state
    pm.expect(jsonData.session_state).to.have.property('actions');
    pm.expect(jsonData.session_state.actions).to.be.an('object');

    // Проверяем наличие prevActions внутри actions
    pm.expect(jsonData.session_state.actions).to.have.property('prevActions');
    pm.expect(jsonData.session_state.actions.prevActions).to.be.an('array');

    // Проверяем, что prevActions не пустой
    pm.expect(jsonData.session_state.actions.prevActions).to.have.length.above(0);

    // Проверяем ключи в первом элементе prevActions
    pm.expect(jsonData.session_state.actions.prevActions[0]).to.have.property('number');
    pm.expect(jsonData.session_state.actions.prevActions[0]).to.have.property('operation');
    pm.expect(jsonData.session_state.actions.prevActions[0]).to.have.property('valueAction');

    // Проверяем значения ключей
    pm.expect(jsonData.session_state.actions.prevActions[0].number).to.equal(0);
    pm.expect(jsonData.session_state.actions.prevActions[0].operation).to.equal("ADD_EVENT");
    pm.expect(jsonData.session_state.actions.prevActions[0].valueAction).to.equal("добавь событие");

    // Проверяем ключи во втором элементе prevActions
    pm.expect(jsonData.session_state.actions.prevActions[1]).to.have.property('number');
    pm.expect(jsonData.session_state.actions.prevActions[1]).to.have.property('operation');
    pm.expect(jsonData.session_state.actions.prevActions[1]).to.have.property('prevOperation');
    pm.expect(jsonData.session_state.actions.prevActions[1]).to.have.property('valueAction');

    // Проверяем значения ключей
    pm.expect(jsonData.session_state.actions.prevActions[1].number).to.equal(1);
    pm.expect(jsonData.session_state.actions.prevActions[1].operation).to.equal("ADD_DAY");
    pm.expect(jsonData.session_state.actions.prevActions[1].prevOperation).to.equal("ADD_EVENT");
    pm.expect(jsonData.session_state.actions.prevActions[1].valueAction).to.equal("сегодня");

        // Проверяем ключи во третьем элементе prevActions
    pm.expect(jsonData.session_state.actions.prevActions[1]).to.have.property('number');
    pm.expect(jsonData.session_state.actions.prevActions[1]).to.have.property('operation');
    pm.expect(jsonData.session_state.actions.prevActions[1]).to.have.property('prevOperation');
    pm.expect(jsonData.session_state.actions.prevActions[1]).to.have.property('valueAction');

    // Проверяем значения ключей
    pm.expect(jsonData.session_state.actions.prevActions[1].number).to.equal(2);
    pm.expect(jsonData.session_state.actions.prevActions[1].operation).to.equal("ADD_TIME");
    pm.expect(jsonData.session_state.actions.prevActions[1].prevOperation).to.equal("ADD_DAY");
    pm.expect(jsonData.session_state.actions.prevActions[1].valueAction).to.equal("ноль часов ноль");

});

        "user_id": "{{user_id}}",
        "session_id": "{{session_id}}",	
		
		        "user_id": "8783711111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "session_id": "b6dc6eee1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
		
		


 // Вывод для отладки
    console.log("Ожидаемый паттерн:", expectedPattern);
    console.log("Фактическое значение:", jsonData.response.text);		
		
_____________________ 


pm.test("1. Проверка text", function () {
    var jsonData = pm.response.json();
    
    // Проверка наличия объекта
    pm.expect(jsonData).to.have.property('response');
    
    // Проверка, что объект_тест является объектом
    pm.expect(jsonData.response).to.be.an('object');
    
    // Проверка наличия ключа внутри объекта
    pm.expect(jsonData.response).to.have.property('text');
    pm.expect(jsonData.response).to.have.property('end_session');
    
    // Проверка значения ключа внутри объекта
    pm.expect(jsonData.response.text).to.eql('Планировщик недели прощается с вами! До свидания!');
    pm.expect(jsonData.response.end_session).to.eql(false);
    });
_____________________ 
pm.expect(jsonData.response.end_session).to.eql(false);

true

//-------------------------------------------------------------------------------
pm.test("3. Проверка структуры ответа и значения 'prevActions.number'", function () {
    var jsonData = pm.response.json();

    // Проверяем наличие session_state в ответе
    pm.expect(jsonData).to.have.property('session_state');
    pm.expect(jsonData.session_state).to.be.an('object');

    // Проверяем наличие actions внутри session_state
    pm.expect(jsonData.session_state).to.have.property('actions');
    pm.expect(jsonData.session_state.actions).to.be.an('object');

    // Проверяем наличие prevActions внутри actions
    pm.expect(jsonData.session_state.actions).to.have.property('prevActions');
    pm.expect(jsonData.session_state.actions.prevActions).to.be.an('array');

    // Проверяем, что prevActions не пустой
    pm.expect(jsonData.session_state.actions.prevActions).to.have.length.above(0);

    // Проверяем наличие number в первом элементе prevActions
    pm.expect(jsonData.session_state.actions.prevActions[0]).to.have.property('number');

    // Проверяем, что number равен 0
    pm.expect(jsonData.session_state.actions.prevActions[0].number).to.equal(0);

});

//-------------------------------------------------------------------------------
pm.test("3. Проверка структуры ответа и значения 'prevActions.number'", function () {
    var jsonData = pm.response.json();

    // Проверяем наличие session_state в ответе
    pm.expect(jsonData).to.have.property('session_state');
    pm.expect(jsonData.session_state).to.be.an('object');

    // Проверяем наличие actions внутри session_state
    pm.expect(jsonData.session_state).to.have.property('actions');
    pm.expect(jsonData.session_state.actions).to.be.an('object');

    // Проверяем наличие prevActions внутри actions
    pm.expect(jsonData.session_state.actions).to.have.property('prevActions');
    pm.expect(jsonData.session_state.actions.prevActions).to.be.an('array');

    // Проверяем, что prevActions не пустой
    pm.expect(jsonData.session_state.actions.prevActions).to.have.length.above(0);

    // Проверяем ключи в первом элементе prevActions
    pm.expect(jsonData.session_state.actions.prevActions[0]).to.have.property('number');
    pm.expect(jsonData.session_state.actions.prevActions[0]).to.have.property('operation');
    pm.expect(jsonData.session_state.actions.prevActions[0]).to.have.property('valueAction');

    // Проверяем значения ключей
    pm.expect(jsonData.session_state.actions.prevActions[0].number).to.equal(0);
    pm.expect(jsonData.session_state.actions.prevActions[0].operation).to.equal("ADD_EVENT");
    pm.expect(jsonData.session_state.actions.prevActions[0].valueAction).to.equal("добавь событие");

});


//-------------------------------------------------------------------------------
pm.test("3. Проверка 'prevActions'", function () {
    var jsonData = pm.response.json();

    // Проверяем наличие session_state в ответе
    pm.expect(jsonData).to.have.property('session_state');
    pm.expect(jsonData.session_state).to.be.an('object');

    // Проверяем наличие actions внутри session_state
    pm.expect(jsonData.session_state).to.have.property('actions');
    pm.expect(jsonData.session_state.actions).to.be.an('object');

    // Проверяем наличие prevActions внутри actions
    pm.expect(jsonData.session_state.actions).to.have.property('prevActions');
    pm.expect(jsonData.session_state.actions.prevActions).to.be.an('array');

    // Проверяем, что prevActions не пустой
    pm.expect(jsonData.session_state.actions.prevActions).to.have.length.above(0);

    // Проверяем ключи в первом элементе prevActions
    pm.expect(jsonData.session_state.actions.prevActions[0]).to.have.property('number');
    pm.expect(jsonData.session_state.actions.prevActions[0]).to.have.property('operation');
    pm.expect(jsonData.session_state.actions.prevActions[0]).to.have.property('valueAction');

    // Проверяем значения ключей
    pm.expect(jsonData.session_state.actions.prevActions[0].number).to.equal(0);
    pm.expect(jsonData.session_state.actions.prevActions[0].operation).to.equal("ADD_EVENT");
    pm.expect(jsonData.session_state.actions.prevActions[0].valueAction).to.equal("добавь событие");

    // Проверяем ключи во втором элементе prevActions
    pm.expect(jsonData.session_state.actions.prevActions[1]).to.have.property('number');
    pm.expect(jsonData.session_state.actions.prevActions[1]).to.have.property('operation');
    pm.expect(jsonData.session_state.actions.prevActions[1]).to.have.property('prevOperation');
    pm.expect(jsonData.session_state.actions.prevActions[1]).to.have.property('valueAction');

    // Проверяем значения ключей
    pm.expect(jsonData.session_state.actions.prevActions[1].number).to.equal(1);
    pm.expect(jsonData.session_state.actions.prevActions[1].operation).to.equal("ADD_DAY");
    pm.expect(jsonData.session_state.actions.prevActions[1].prevOperation).to.equal("ADD_EVENT");
    pm.expect(jsonData.session_state.actions.prevActions[1].valueAction).to.equal("сегодня");

});
//-------------------------------------------------------------------------------
  pm.test("2. Значение ключей 'message_id' внутри 'session'", function () {
    var jsonData = pm.response.json();
    
    // Проверяем наличие объекта 'session' в ответе
    pm.expect(jsonData).to.have.property('session'); 
   
    // Проверяем наличие ключей внутри 'session'
	pm.expect(jsonData.session).to.have.property('message_id');
	
    // Проверяем, что значение ключей
	 pm.expect(jsonData.session.message_id).to.equal(3);
    
});

//-------------------------------------------------------------------------------

pm.test("5. Проверка структуры ответа и значений в user_state_update", function () {
    var jsonData = pm.response.json();

     // Дополнительные проверки значений
    if (jsonData.user_state_update.week.days["{{currentDate}}"][0].time !== "12:00") {
        console.log("Ошибка: ожидалось значение '01:00' для time в первом элементе, но получено", jsonData.user_state_update.week.days["{{currentDate}}"][0].time);
    }
    if (jsonData.user_state_update.week.days["{{currentDate}}"][0].name !== "Прогулка на берегу моря") {
        console.log("Ошибка: ожидалось значение 'Прогулка на берегу моря' для name в первом элементе, но получено", jsonData.user_state_update.week.days["{{currentDate}}"][0].name);
    }
	
	 if (jsonData.user_state_update.week.days["{{currentDate}}"][1].time !== "14:00") {
        console.log("Ошибка: ожидалось значение '14:00' для time во втором элементе, но получено", jsonData.user_state_update.week.days["{{currentDate}}"][1].time);	
	}
	
    if (jsonData.user_state_update.week.days["{{currentDate}}"][1].name !== "Поздний обед") {
        console.log("Ошибка: ожидалось значение 'Поздний обед' для name во втором элементе, но получено", jsonData.user_state_update.week.days["{{currentDate}}"][1].name);
    }
	

    // Проверяем наличие и тип user_state_update
    pm.expect(jsonData).to.have.property('user_state_update');
    pm.expect(jsonData.user_state_update).to.be.an('object');

    // Проверяем наличие и тип object3 внутри user_state_update
    pm.expect(jsonData.user_state_update).to.have.property('week');
    pm.expect(jsonData.user_state_update.week).to.be.an('object');

    // Проверяем наличие и тип days внутри week
    pm.expect(jsonData.user_state_update.week).to.have.property('days');
    pm.expect(jsonData.user_state_update.week.days).to.be.an('object');

    // Проверяем наличие и тип {{currentDate}} внутри days
    pm.expect(jsonData.user_state_update.week.days).to.have.property('{{currentDate}}');
    pm.expect(jsonData.user_state_update.week.days["{{currentDate}}"]).to.be.an('array');

    // Проверяем, что "{{currentDate}}" содержит 2 элемента
    pm.expect(jsonData.user_state_update.week.days["{{currentDate}}"]).to.have.lengthOf(2);

    // Проверяем первый элемент "{{currentDate}}"
    pm.expect(jsonData.user_state_update.week.days["{{currentDate}}"][0]).to.have.property('time', "12:00");
    pm.expect(jsonData.user_state_update.week.days["{{currentDate}}"][0]).to.have.property('name', "Прогулка на берегу моря");

    // Проверяем второй элемент "{{currentDate}}"
    pm.expect(jsonData.user_state_update.week.days["{{currentDate}}"][1]).to.have.property('time', "14:00");
    pm.expect(jsonData.user_state_update.week.days["{{currentDate}}"][1]).to.have.property('name', "Поздний обед");

});


//когда нет pre реквеста

pm.test("3. Проверка user_state_update", function () {
    var jsonData = pm.response.json();

     // Дополнительные проверки значений
    if (jsonData.user_state_update.week.days[formattedDate][0].time !== "00:00") {
        console.log("Ошибка: ожидалось значение '00:00' для time в первом элементе, но получено", jsonData.user_state_update.week.days[formattedDate][0].time);
    }
    if (jsonData.user_state_update.week.days[formattedDate][0].name !== "тест событие 1") {
        console.log("Ошибка: ожидалось значение 'тест событие 1' для name в первом элементе, но получено", jsonData.user_state_update.week.days[formattedDate][0].name);
    }	
	 
    // Проверяем наличие и тип user_state_update
    pm.expect(jsonData).to.have.property('user_state_update');
    pm.expect(jsonData.user_state_update).to.be.an('object');

    // Проверяем наличие и тип object3 внутри user_state_update
    pm.expect(jsonData.user_state_update).to.have.property('week');
    pm.expect(jsonData.user_state_update.week).to.be.an('object');

    // Проверяем наличие и тип days внутри week
    pm.expect(jsonData.user_state_update.week).to.have.property('days');
    pm.expect(jsonData.user_state_update.week.days).to.be.an('object');

    // Проверяем наличие и тип {{currentDate}} внутри days
    pm.expect(jsonData.user_state_update.week.days).to.have.property(formattedDate);
    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.be.an('array');

    // Проверяем, что formattedDate содержит 2 элемента
    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.have.lengthOf(1);

    // Проверяем первый элемент formattedDate
    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('time', "00:00");
    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('name', "тест событие 1");   

});

//-------------------------------------------------------------------------------
pm.test("3. Проверка структуры ответа и значений в user_state_update, pastDate и futureDate", function () {
    var jsonData = pm.response.json();

     // Дополнительные проверки значений
    if (jsonData.user_state_update.week.days[pm.variables.get('pastDate')][0].time !== "12:00") {
        console.log("Ошибка: ожидалось значение '01:00' для time в первом элементе, но получено", jsonData.user_state_update.week.days[pm.variables.get('pastDate')][0].time);
    }
    if (jsonData.user_state_update.week.days[pm.variables.get('pastDate')][0].name !== "Прогулка на берегу моря") {
        console.log("Ошибка: ожидалось значение 'Прогулка на берегу моря' для name в первом элементе, но получено", jsonData.user_state_update.week.days[pm.variables.get('pastDate')][0].name);
    }	
	if (jsonData.user_state_update.week.days[pm.variables.get('pastDate')][1].time !== "14:00") {
        console.log("Ошибка: ожидалось значение '14:00' для time во втором элементе, но получено", jsonData.user_state_update.week.days[pm.variables.get('pastDate')][1].time);	
	}	
    if (jsonData.user_state_update.week.days[pm.variables.get('pastDate')][1].name !== "Поздний обед") {
        console.log("Ошибка: ожидалось значение 'Поздний обед' для name во втором элементе, но получено", jsonData.user_state_update.week.days[pm.variables.get('pastDate')][1].name);
    }
	
	if (jsonData.user_state_update.week.days[pm.variables.get('futureDate')][0].time !== "13:30") {
        console.log("Ошибка: ожидалось значение '13:30' для time в первом элементе, но получено", jsonData.user_state_update.week.days[pm.variables.get('futureDate')][0].time);
    }
    if (jsonData.user_state_update.week.days[pm.variables.get('futureDate')][0].name !== "Приготовить асаду") {
        console.log("Ошибка: ожидалось значение 'Приготовить асаду' для name в первом элементе, но получено", jsonData.user_state_update.week.days[pm.variables.get('futureDate')][0].name);
    }
	
	 if (jsonData.user_state_update.week.days[pm.variables.get('futureDate')][1].time !== "09:10") {
        console.log("Ошибка: ожидалось значение '09:10' для time во втором элементе, но получено", jsonData.user_state_update.week.days[pm.variables.get('futureDate')][1].time);	
	}
	
    if (jsonData.user_state_update.week.days[pm.variables.get('futureDate')][1].name !== "Прогуляться по утреннему Буэнос- Айресу и выругаться по поводу эмиграции") {
        console.log("Ошибка: ожидалось значение 'Прогуляться по утреннему Буэнос- Айресу и выругаться по поводу эмиграции' для name во втором элементе, но получено", jsonData.user_state_update.week.days[pm.variables.get('futureDate')][1].name);
    }
	
    // Проверяем наличие и тип user_state_update
    pm.expect(jsonData).to.have.property('user_state_update');
    pm.expect(jsonData.user_state_update).to.be.an('object');

    // Проверяем наличие и тип object3 внутри user_state_update
    pm.expect(jsonData.user_state_update).to.have.property('week');
    pm.expect(jsonData.user_state_update.week).to.be.an('object');

    // Проверяем наличие и тип days внутри week
    pm.expect(jsonData.user_state_update.week).to.have.property('days');
    pm.expect(jsonData.user_state_update.week.days).to.be.an('object');

    // Проверяем наличие и тип {{pastDate}} внутри days
    pm.expect(jsonData.user_state_update.week.days).to.have.property(pm.variables.get('pastDate'));
    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('pastDate')]).to.be.an('array');
	
	    // Проверяем наличие и тип {{futureDate}} внутри days
    pm.expect(jsonData.user_state_update.week.days).to.have.property(pm.variables.get('futureDate'));
    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('futureDate')]).to.be.an('array');

    // Проверяем, что 'pastDate' содержит 2 элемента
    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('pastDate')]).to.have.lengthOf(2);
	
	// Проверяем, что 'futureDate' содержит 2 элемента
    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('futureDate')]).to.have.lengthOf(2);

    // Проверяем первый элемент 'pastDate'
    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('pastDate')][0]).to.have.property('time', "12:00");
    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('pastDate')][0]).to.have.property('name', "Прогулка на берегу моря");

    // Проверяем второй элемент 'pastDate'
    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('pastDate')][1]).to.have.property('time', "14:00");
    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('pastDate')][1]).to.have.property('name', "Поздний обед");
	
	// Проверяем первый элемент 'futureDate'
    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('futureDate')][0]).to.have.property('time', "13:30");
    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('futureDate')][0]).to.have.property('name', "Приготовить асаду");

    // Проверяем второй элемент 'futureDate'
    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('futureDate')][1]).to.have.property('time', "09:10");
    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('futureDate')][1]).to.have.property('name', "Прогуляться по утреннему Буэнос- Айресу и выругаться по поводу эмиграции");
});

//-------------------------------------------------------------------------------
с фунцией, когда нет пререквеста

// Генерация текущей даты в формате DD-MM-YYYY

function generateCurrentDate() {
    var currentDate = new Date();
    var day = String(currentDate.getDate()).padStart(2, '0');
    var month = String(currentDate.getMonth() + 1).padStart(2, '0'); // Январь - это 0!
    var year = currentDate.getFullYear();
    return day + '-' + month + '-' + year;
}
// 
pm.test("1. Проверка text с currentDate", function () {
    var jsonData = pm.response.json();
    var formattedDate = generateCurrentDate()

    // Создание регулярного выражения с текущей датой
    var expectedPattern = new RegExp('^Ваши события на сегодня ' + formattedDate + " 00:00 Поздний обед00, 01:00 Поздний обед01, 02:00 Поздний обед02, 03:00 Поздний обед03, 04:00 Поздний обед04, 10:00 Поздний обед10, 11:00 Поздний обед11, 12:00 Прогулка на берегу моря12, 14:00 Поздний обед14, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 17:00 Поздний обед17");

    // Проверка наличия объекта
    pm.expect(jsonData).to.have.property('response');

    // Проверка, что response является объектом
    pm.expect(jsonData.response).to.be.an('object');

    // Проверка наличия ключа внутри объекта
    pm.expect(jsonData.response).to.have.property('text');
    pm.expect(jsonData.response).to.have.property('end_session');

    // Проверка значения ключа внутри объекта
    pm.expect(jsonData.response.text).to.match(expectedPattern);
    pm.expect(jsonData.response.end_session).to.eql(false);

});
//-------------------------------------------------------------------------------




//-------------------------------------------------------------------------------
pm.test("0.2 Значение ключей user_id, session_id внутри 'session'", function () {
    var jsonData = pm.response.json();
    
    // Проверяем наличие объекта 'session' в ответе
    pm.expect(jsonData).to.have.property('session');
    
    // Проверяем наличие ключей'  
    pm.expect(jsonData.session).to.have.property('user_id');
     pm.expect(jsonData.session).to.have.property('session_id');
    
    // Проверяем значения ключей 
    pm.expect(jsonData.session.user_id).to.equal('b4fde534');
    pm.expect(jsonData.session.session_id).to.equal('ffb392fd');  
});

//-------------------------------------------------------------------------------

pm.test("1. Проверка text", function () {
    var jsonData = pm.response.json();
    
    // Генерация текущей даты в формате DD-MM-YYYY
    var currentDate = new Date();
    var day = String(currentDate.getDate()).padStart(2, '0');
    var month = String(currentDate.getMonth() + 1).padStart(2, '0'); // Январь - это 0!
    var year = currentDate.getFullYear();
    var formattedDate = day + '-' + month + '-' + year;
    
    // Создание регулярного выражения с текущей датой
    var expectedPattern = new RegExp('^Ваши события на сегодня ' + formattedDate + ' 12:00 Прогулка на берегу моря, 14:00 Поздний обед');
    
    // Проверка наличия объекта
    pm.expect(jsonData).to.have.property('response');
    
    // Проверка, что response является объектом
    pm.expect(jsonData.response).to.be.an('object');
    
    // Проверка наличия ключа внутри объекта
    pm.expect(jsonData.response).to.have.property('text');
    
    // Проверка значения ключа внутри объекта
    pm.expect(jsonData.response.text).to.match(expectedPattern);   
   
});

//-------------------------------------------------------------------------------
pm.test("1. Проверка text", function () {
    var jsonData = pm.response.json();
    
    
    // Создание регулярного выражения с текущей датой
    var expectedPattern = new RegExp('^Ваши события ' + pm.variables.get('pastDate') + ' 17:00 Велосипедная прогулка, 20:00 Ужин, ' + pm.variables.get('curDate') + ' 17:00 Ужин, 17:01 Велосипедная прогулка, ' + pm.variables.get('futureDate') + ' 09:00 Поздний обед, 15:00 Прогулка на берегу моря');
    
    // Проверка наличия объекта
    pm.expect(jsonData).to.have.property('response');
    
    // Проверка, что response является объектом
    pm.expect(jsonData.response).to.be.an('object');
    
    // Проверка наличия ключа внутри объекта
    pm.expect(jsonData.response).to.have.property('text');
    
    // Проверка значения ключа внутри объекта
    pm.expect(jsonData.response.text).to.match(expectedPattern);   
   
});
//-------------------------------------------------------------------------------
pm.test("1. Проверка text", function () {
    var jsonData = pm.response.json();
    
    
    // Создание регулярного выражения с текущей датой
    var expectedPattern = new RegExp('^Событие успешно добавлено на ' + pm.variables.get('curDate') + ' 00:00 тест событие 1! Выполнен выход в главное меню ');
    
    // Проверка наличия объекта
    pm.expect(jsonData).to.have.property('response');
    
    // Проверка, что response является объектом
    pm.expect(jsonData.response).to.be.an('object');
    
    // Проверка наличия ключа внутри объекта
    pm.expect(jsonData.response).to.have.property('text');
	pm.expect(jsonData.response).to.have.property('end_session');
    
    // Проверка значения ключа внутри объекта
    pm.expect(jsonData.response.text).to.match(expectedPattern); 
	pm.expect(jsonData.response.end_session).to.eql(false);
   
});

//------------------------------------------------------------------------------


pm.test("1. Проверка text с currentDate", function () {
    var jsonData = pm.response.json();

    // Генерация текущей даты в формате DD-MM-YYYY
    var currentDate = new Date();
    var day = String(currentDate.getDate()).padStart(2, '0');
    var month = String(currentDate.getMonth() + 1).padStart(2, '0'); // Январь - это 0!
    var year = currentDate.getFullYear();
    var formattedDate = day + '-' + month + '-' + year;

    // Создание регулярного выражения с текущей датой
    var expectedPattern = new RegExp('^Событие успешно добавлено на ' + formattedDate + " 00:00 тест событие 1! Выполнен выход в главное меню ");

    // Проверка наличия объекта
    pm.expect(jsonData).to.have.property('response');

    // Проверка, что response является объектом
    pm.expect(jsonData.response).to.be.an('object');

    // Проверка наличия ключа внутри объекта
    pm.expect(jsonData.response).to.have.property('text');
    pm.expect(jsonData.response).to.have.property('end_session');

    // Проверка значения ключа внутри объекта
    pm.expect(jsonData.response.text).to.match(expectedPattern);
    pm.expect(jsonData.response.end_session).to.eql(false);

});

//------------------------------------------------------------------------------

pm.test("1. Проверка text", function () {
    let jsonData = pm.response.json();

    // Получаем день недели из запроса
    let requestBody = JSON.parse(pm.request.body.raw);
    let actions =  requestBody.state.session.actions;
     console.log(actions);

    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction
     
    let command = requestBody.request.command;
    let is_valid_command = jsonData.response.text.includes(command);
   

    // Функция для получения следующей даты определенного дня недели
    function getNextvalueAction(dayName) {
        const days = ['воскресенье', 'понедельник', 'вторник', 'среда', 'четверг', 'пятница', 'суббота'];
        const today = new Date();
        const dayIndex = days.indexOf(dayName);
        if (dayIndex === -1) return null;
        
        const targetDate = new Date(today);
        targetDate.setDate(today.getDate() + (dayIndex + 7 - today.getDay()) % 7);
        return targetDate;
    }
    
    // Получаем ближайшую дату для указанного дня недели
    let targetDate = getNextvalueAction(valueAction);
    console.log(targetDate);
   
    // Форматируем дату в DD-MM-YYYY
    let formattedDate = targetDate.getDate().toString().padStart(2, '0') + '-' +
                        (targetDate.getMonth() + 1).toString().padStart(2, '0') + '-' +
                        targetDate.getFullYear();
   

 /*   let is_expect_date = jsonData.response.text.includes("Событие успешно добавлено на " + formattedDate);
    console.log("Ожидаемая дата?:", is_expect_date);  
 */
     // Создание регулярного выражения с ожидаемой датой
    let expectedPattern = new RegExp('^Событие успешно добавлено на ' + formattedDate + " 00:00 тест событие 1! Выполнен выход в главное меню ");

    
    // Проверка command
    pm.expect(jsonData).to.have.property('response');
    
    // Проверка, что response является объектом
    pm.expect(jsonData.response).to.be.an('object');
    
    // Проверка наличия ключа внутри объекта
    pm.expect(jsonData.response).to.have.property('text');
    pm.expect(jsonData.response).to.have.property('end_session');
    
    // Проверка значения ключа внутри объекта
    pm.expect(jsonData.response.text).to.match(expectedPattern);
    pm.expect(jsonData.response.text).to.include(command); 
    pm.expect(jsonData.response.end_session).to.eql(false);

});

_________________ 
pm.test("3. Проверка'days' {}", function () {
    var jsonData = pm.response.json();
    
    // Проверяем наличие user_state_update в ответе
    pm.expect(jsonData).to.have.property('user_state_update');
    pm.expect(jsonData.user_state_update).to.be.an('object');

    // Проверяем наличие week внутри user_state_update
    pm.expect(jsonData.user_state_update).to.have.property('week');
    pm.expect(jsonData.user_state_update.week).to.be.an('object');

    // Проверяем наличие days внутри week
    pm.expect(jsonData.user_state_update.week).to.have.property('days');

    // Проверяем, что days является пустым объектом
    pm.expect(jsonData.user_state_update.week.days).to.be.an('object').that.is.empty;   
});

//---------------------------------------------------------------------------
Функция 
// Генерация текущей даты в формате DD-MM-YYYY

function generateCurrentDate() {
    var currentDate = new Date();
    var day = String(currentDate.getDate()).padStart(2, '0');
    var month = String(currentDate.getMonth() + 1).padStart(2, '0'); // Январь - это 0!
    var year = currentDate.getFullYear();
    return day + '-' + month + '-' + year;
}
// --------------------------------------------------------------------------
pm.test("1. Проверка text с currentDate", function () {
    var jsonData = pm.response.json();
    var formattedDate = generateCurrentDate()

    // Создание регулярного выражения с текущей датой
    var expectedPattern = new RegExp('^Событие успешно добавлено на ' + formattedDate + " 00:00 тест событие 1! Выполнен выход в главное меню ");

    // Проверка наличия объекта
    pm.expect(jsonData).to.have.property('response');

    // Проверка, что response является объектом
    pm.expect(jsonData.response).to.be.an('object');

    // Проверка наличия ключа внутри объекта
    pm.expect(jsonData.response).to.have.property('text');
    pm.expect(jsonData.response).to.have.property('end_session');

    // Проверка значения ключа внутри объекта
    pm.expect(jsonData.response.text).to.match(expectedPattern);
    pm.expect(jsonData.response.end_session).to.eql(false);

});
//-------------------------------------------------------------------------------
  pm.test("2. Значение ключей 'message_id' внутри 'session'", function () {
    var jsonData = pm.response.json();
    
    // Проверяем наличие объекта 'session' в ответе
    pm.expect(jsonData).to.have.property('session'); 
   
    // Проверяем наличие ключей внутри 'session'
	pm.expect(jsonData.session).to.have.property('message_id');
	
    // Проверяем, что значение ключей
	 pm.expect(jsonData.session.message_id).to.equal(3);
    
});
//------------------------------------------------------------------------------

pm.test("3. Проверка user_state_update", function () {
    var jsonData = pm.response.json();
    var formattedDate = generateCurrentDate()

    // Дополнительные проверки значений
    if (jsonData.user_state_update.week.days[formattedDate][0].time !== "00:00") {
        console.log("Ошибка: ожидалось значение '00:00' для time в первом элементе, но получено", jsonData.user_state_update.week.days[formattedDate][0].time);
    }
    if (jsonData.user_state_update.week.days[formattedDate][0].name !== "тест событие 1") {
        console.log("Ошибка: ожидалось значение 'тест событие 1' для name в первом элементе, но получено", jsonData.user_state_update.week.days[formattedDate][0].name);
    }	
    
    // Проверяем наличие и тип user_state_update
    pm.expect(jsonData).to.have.property('user_state_update');
    pm.expect(jsonData.user_state_update).to.be.an('object');

    // Проверяем наличие и тип object3 внутри user_state_update
    pm.expect(jsonData.user_state_update).to.have.property('week');
    pm.expect(jsonData.user_state_update.week).to.be.an('object');

    // Проверяем наличие и тип days внутри week
    pm.expect(jsonData.user_state_update.week).to.have.property('days');
    pm.expect(jsonData.user_state_update.week.days).to.be.an('object');

    // Проверяем наличие и тип {{currentDate}} внутри days
    pm.expect(jsonData.user_state_update.week.days).to.have.property(formattedDate);
    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.be.an('array');

    // Проверяем, что formattedDate содержит 2 элемента
    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.have.lengthOf(1);

    // Проверяем первый элемент formattedDate
    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('time', "00:00");
    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('name', "тест событие 1");  
});


//-------------------------------------------------------------------------------
pm.test("4. Проверка отсутствия user_state_update", function () {
    var jsonData = pm.response.json();
    pm.expect(jsonData).to.not.have.property('user_state_update');
});

_____________________________________ 
{
                        "number": 0,
                        "valueAction": "добавь событие",
                        "operation": "ADD_EVENT"
                    },
                    {
                        "number": 1,
                        "prevOperation": "ADD_EVENT",
                        "valueAction": "вторник",
                        "operation": "ADD_DAY"
                    },
                    {
                        "number": 2,
                        "prevOperation": "ADD_DAY",
                        "valueAction": "десять часов",
                        "operation": "ADD_TIME"
                    }
					
					
__________________________________________
исправление для текущей даты от AI 

pm.test("1. Проверка text", function () {
    var jsonData = pm.response.json();

    // Получаем день недели из запроса
    let requestBody = JSON.parse(pm.request.body.raw);
    let actions =  requestBody.state.session.actions;

    var valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction

    // Функция для получения следующей даты определенного дня недели
    function getNextvalueAction(dayName) {
        const days = ['воскресенье', 'понедельник', 'вторник', 'среда', 'четверг', 'пятница', 'суббота'];
        const today = new Date();
        const dayIndex = days.indexOf(dayName);
        if (dayIndex === -1) return null;
        
        const targetDate = new Date(today);
        targetDate.setDate(today.getDate() + (dayIndex + 7 - today.getDay()) % 7);
        return targetDate;
    }
    
    // Получаем ближайшую дату для указанного дня недели
    var targetDate = getNextvalueAction(valueAction);
    if (!targetDate) {
        console.log("Некорректное значение дня недели");
        return; // Exit the test if the day name is incorrect
    }
    console.log(targetDate);
   
    // Форматируем дату в DD-MM-YYYY
    var formattedDate = targetDate.getDate().toString().padStart(2, '0') + '-' +
                        (targetDate.getMonth() + 1).toString().padStart(2, '0') + '-' +
                        targetDate.getFullYear();
    console.log("Ожидаемая дата:", formattedDate);  


     // Создание регулярного выражения с ожидаемой датой
    var expectedPattern = new RegExp('^Событие успешно добавлено на ' + formattedDate );

    
    // Проверка наличия объекта
    pm.expect(jsonData).to.have.property('response');
    
    // Проверка, что response является объектом
    pm.expect(jsonData.response).to.be.an('object');
    
    // Проверка наличия ключа внутри объекта
    pm.expect(jsonData.response).to.have.property('text');
    pm.expect(jsonData.response).to.have.property('end_session');
    
    // Проверка значения ключа внутри объекта
    pm.expect(jsonData.response.text).to.match(expectedPattern);
    pm.expect(jsonData.response.end_session).to.eql(false);

});


//-------------------------------------------------------------------------------
pm.test("3. Проверка 'prevActions'", function () {
    var jsonData = pm.response.json();

    // Проверяем наличие session_state в ответе
    pm.expect(jsonData).to.have.property('session_state');
    pm.expect(jsonData.session_state).to.be.an('object');

    // Проверяем наличие actions внутри session_state
    pm.expect(jsonData.session_state).to.have.property('actions');
    pm.expect(jsonData.session_state.actions).to.be.an('object');

    // Проверяем наличие prevActions внутри actions
    pm.expect(jsonData.session_state.actions).to.have.property('prevActions');
    pm.expect(jsonData.session_state.actions.prevActions).to.be.an('array');

    // Проверяем, что prevActions не пустой
    pm.expect(jsonData.session_state.actions.prevActions).to.have.length.above(0);

    // Проверяем ключи в первом элементе prevActions
    pm.expect(jsonData.session_state.actions.prevActions[0]).to.have.property('number');
    pm.expect(jsonData.session_state.actions.prevActions[0]).to.have.property('operation');
    pm.expect(jsonData.session_state.actions.prevActions[0]).to.have.property('valueAction');

    // Проверяем значения ключей
    pm.expect(jsonData.session_state.actions.prevActions[0].number).to.equal(0);
    pm.expect(jsonData.session_state.actions.prevActions[0].operation).to.equal("ADD_EVENT");
    pm.expect(jsonData.session_state.actions.prevActions[0].valueAction).to.equal("добавь событие");

    // Проверяем ключи во втором элементе prevActions
    pm.expect(jsonData.session_state.actions.prevActions[1]).to.have.property('number');
    pm.expect(jsonData.session_state.actions.prevActions[1]).to.have.property('operation');
    pm.expect(jsonData.session_state.actions.prevActions[1]).to.have.property('prevOperation');
    pm.expect(jsonData.session_state.actions.prevActions[1]).to.have.property('valueAction');

    // Проверяем значения ключей
    pm.expect(jsonData.session_state.actions.prevActions[1].number).to.equal(1);
    pm.expect(jsonData.session_state.actions.prevActions[1].operation).to.equal("ADD_DAY");
    pm.expect(jsonData.session_state.actions.prevActions[1].prevOperation).to.equal("ADD_EVENT");
    pm.expect(jsonData.session_state.actions.prevActions[1].valueAction).to.equal("сегодня");

        // Проверяем ключи во третьем элементе prevActions
    pm.expect(jsonData.session_state.actions.prevActions[1]).to.have.property('number');
    pm.expect(jsonData.session_state.actions.prevActions[1]).to.have.property('operation');
    pm.expect(jsonData.session_state.actions.prevActions[1]).to.have.property('prevOperation');
    pm.expect(jsonData.session_state.actions.prevActions[1]).to.have.property('valueAction');

    // Проверяем значения ключей
    pm.expect(jsonData.session_state.actions.prevActions[1].number).to.equal(2);
    pm.expect(jsonData.session_state.actions.prevActions[1].operation).to.equal("ADD_TIME");
    pm.expect(jsonData.session_state.actions.prevActions[1].prevOperation).to.equal("ADD_DAY");
    pm.expect(jsonData.session_state.actions.prevActions[1].valueAction).to.equal("ноль часов ноль");

});

        "user_id": "{{user_id}}",
        "session_id": "{{session_id}}",	
		
		        "user_id": "8783711111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "session_id": "b6dc6eee1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
		
		


 // Вывод для отладки
    console.log("Ожидаемый паттерн:", expectedPattern);
    console.log("Фактическое значение:", jsonData.response.text);		
		
_____________________ 


pm.test("1. Проверка text", function () {
    var jsonData = pm.response.json();
    
    // Проверка наличия объекта
    pm.expect(jsonData).to.have.property('response');
    
    // Проверка, что объект_тест является объектом
    pm.expect(jsonData.response).to.be.an('object');
    
    // Проверка наличия ключа внутри объекта
    pm.expect(jsonData.response).to.have.property('text');
    pm.expect(jsonData.response).to.have.property('end_session');
    
    // Проверка значения ключа внутри объекта
    pm.expect(jsonData.response.text).to.eql('Планировщик недели прощается с вами! До свидания!');
    pm.expect(jsonData.response.end_session).to.eql(false);
    });
_____________________ 
pm.expect(jsonData.response.end_session).to.eql(false);

true

//-------------------------------------------------------------------------------
pm.test("3. Проверка структуры ответа и значения 'prevActions.number'", function () {
    var jsonData = pm.response.json();

    // Проверяем наличие session_state в ответе
    pm.expect(jsonData).to.have.property('session_state');
    pm.expect(jsonData.session_state).to.be.an('object');

    // Проверяем наличие actions внутри session_state
    pm.expect(jsonData.session_state).to.have.property('actions');
    pm.expect(jsonData.session_state.actions).to.be.an('object');

    // Проверяем наличие prevActions внутри actions
    pm.expect(jsonData.session_state.actions).to.have.property('prevActions');
    pm.expect(jsonData.session_state.actions.prevActions).to.be.an('array');

    // Проверяем, что prevActions не пустой
    pm.expect(jsonData.session_state.actions.prevActions).to.have.length.above(0);

    // Проверяем наличие number в первом элементе prevActions
    pm.expect(jsonData.session_state.actions.prevActions[0]).to.have.property('number');

    // Проверяем, что number равен 0
    pm.expect(jsonData.session_state.actions.prevActions[0].number).to.equal(0);

});

//-------------------------------------------------------------------------------
pm.test("3. Проверка структуры ответа и значения 'prevActions.number'", function () {
    var jsonData = pm.response.json();

    // Проверяем наличие session_state в ответе
    pm.expect(jsonData).to.have.property('session_state');
    pm.expect(jsonData.session_state).to.be.an('object');

    // Проверяем наличие actions внутри session_state
    pm.expect(jsonData.session_state).to.have.property('actions');
    pm.expect(jsonData.session_state.actions).to.be.an('object');

    // Проверяем наличие prevActions внутри actions
    pm.expect(jsonData.session_state.actions).to.have.property('prevActions');
    pm.expect(jsonData.session_state.actions.prevActions).to.be.an('array');

    // Проверяем, что prevActions не пустой
    pm.expect(jsonData.session_state.actions.prevActions).to.have.length.above(0);

    // Проверяем ключи в первом элементе prevActions
    pm.expect(jsonData.session_state.actions.prevActions[0]).to.have.property('number');
    pm.expect(jsonData.session_state.actions.prevActions[0]).to.have.property('operation');
    pm.expect(jsonData.session_state.actions.prevActions[0]).to.have.property('valueAction');

    // Проверяем значения ключей
    pm.expect(jsonData.session_state.actions.prevActions[0].number).to.equal(0);
    pm.expect(jsonData.session_state.actions.prevActions[0].operation).to.equal("ADD_EVENT");
    pm.expect(jsonData.session_state.actions.prevActions[0].valueAction).to.equal("добавь событие");

});


//-------------------------------------------------------------------------------
pm.test("3. Проверка 'prevActions'", function () {
    var jsonData = pm.response.json();

    // Проверяем наличие session_state в ответе
    pm.expect(jsonData).to.have.property('session_state');
    pm.expect(jsonData.session_state).to.be.an('object');

    // Проверяем наличие actions внутри session_state
    pm.expect(jsonData.session_state).to.have.property('actions');
    pm.expect(jsonData.session_state.actions).to.be.an('object');

    // Проверяем наличие prevActions внутри actions
    pm.expect(jsonData.session_state.actions).to.have.property('prevActions');
    pm.expect(jsonData.session_state.actions.prevActions).to.be.an('array');

    // Проверяем, что prevActions не пустой
    pm.expect(jsonData.session_state.actions.prevActions).to.have.length.above(0);

    // Проверяем ключи в первом элементе prevActions
    pm.expect(jsonData.session_state.actions.prevActions[0]).to.have.property('number');
    pm.expect(jsonData.session_state.actions.prevActions[0]).to.have.property('operation');
    pm.expect(jsonData.session_state.actions.prevActions[0]).to.have.property('valueAction');

    // Проверяем значения ключей
    pm.expect(jsonData.session_state.actions.prevActions[0].number).to.equal(0);
    pm.expect(jsonData.session_state.actions.prevActions[0].operation).to.equal("ADD_EVENT");
    pm.expect(jsonData.session_state.actions.prevActions[0].valueAction).to.equal("добавь событие");

    // Проверяем ключи во втором элементе prevActions
    pm.expect(jsonData.session_state.actions.prevActions[1]).to.have.property('number');
    pm.expect(jsonData.session_state.actions.prevActions[1]).to.have.property('operation');
    pm.expect(jsonData.session_state.actions.prevActions[1]).to.have.property('prevOperation');
    pm.expect(jsonData.session_state.actions.prevActions[1]).to.have.property('valueAction');

    // Проверяем значения ключей
    pm.expect(jsonData.session_state.actions.prevActions[1].number).to.equal(1);
    pm.expect(jsonData.session_state.actions.prevActions[1].operation).to.equal("ADD_DAY");
    pm.expect(jsonData.session_state.actions.prevActions[1].prevOperation).to.equal("ADD_EVENT");
    pm.expect(jsonData.session_state.actions.prevActions[1].valueAction).to.equal("сегодня");

});
//-------------------------------------------------------------------------------
  pm.test("2. Значение ключей 'message_id' внутри 'session'", function () {
    var jsonData = pm.response.json();
    
    // Проверяем наличие объекта 'session' в ответе
    pm.expect(jsonData).to.have.property('session'); 
   
    // Проверяем наличие ключей внутри 'session'
	pm.expect(jsonData.session).to.have.property('message_id');
	
    // Проверяем, что значение ключей
	 pm.expect(jsonData.session.message_id).to.equal(3);
    
});

//-------------------------------------------------------------------------------

pm.test("5. Проверка структуры ответа и значений в user_state_update", function () {
    var jsonData = pm.response.json();

     // Дополнительные проверки значений
    if (jsonData.user_state_update.week.days["{{currentDate}}"][0].time !== "12:00") {
        console.log("Ошибка: ожидалось значение '01:00' для time в первом элементе, но получено", jsonData.user_state_update.week.days["{{currentDate}}"][0].time);
    }
    if (jsonData.user_state_update.week.days["{{currentDate}}"][0].name !== "Прогулка на берегу моря") {
        console.log("Ошибка: ожидалось значение 'Прогулка на берегу моря' для name в первом элементе, но получено", jsonData.user_state_update.week.days["{{currentDate}}"][0].name);
    }
	
	 if (jsonData.user_state_update.week.days["{{currentDate}}"][1].time !== "14:00") {
        console.log("Ошибка: ожидалось значение '14:00' для time во втором элементе, но получено", jsonData.user_state_update.week.days["{{currentDate}}"][1].time);	
	}
	
    if (jsonData.user_state_update.week.days["{{currentDate}}"][1].name !== "Поздний обед") {
        console.log("Ошибка: ожидалось значение 'Поздний обед' для name во втором элементе, но получено", jsonData.user_state_update.week.days["{{currentDate}}"][1].name);
    }
	

    // Проверяем наличие и тип user_state_update
    pm.expect(jsonData).to.have.property('user_state_update');
    pm.expect(jsonData.user_state_update).to.be.an('object');

    // Проверяем наличие и тип object3 внутри user_state_update
    pm.expect(jsonData.user_state_update).to.have.property('week');
    pm.expect(jsonData.user_state_update.week).to.be.an('object');

    // Проверяем наличие и тип days внутри week
    pm.expect(jsonData.user_state_update.week).to.have.property('days');
    pm.expect(jsonData.user_state_update.week.days).to.be.an('object');

    // Проверяем наличие и тип {{currentDate}} внутри days
    pm.expect(jsonData.user_state_update.week.days).to.have.property('{{currentDate}}');
    pm.expect(jsonData.user_state_update.week.days["{{currentDate}}"]).to.be.an('array');

    // Проверяем, что "{{currentDate}}" содержит 2 элемента
    pm.expect(jsonData.user_state_update.week.days["{{currentDate}}"]).to.have.lengthOf(2);

    // Проверяем первый элемент "{{currentDate}}"
    pm.expect(jsonData.user_state_update.week.days["{{currentDate}}"][0]).to.have.property('time', "12:00");
    pm.expect(jsonData.user_state_update.week.days["{{currentDate}}"][0]).to.have.property('name', "Прогулка на берегу моря");

    // Проверяем второй элемент "{{currentDate}}"
    pm.expect(jsonData.user_state_update.week.days["{{currentDate}}"][1]).to.have.property('time', "14:00");
    pm.expect(jsonData.user_state_update.week.days["{{currentDate}}"][1]).to.have.property('name', "Поздний обед");

});


//когда нет pre реквеста

pm.test("3. Проверка user_state_update", function () {
    var jsonData = pm.response.json();

     // Дополнительные проверки значений
    if (jsonData.user_state_update.week.days[formattedDate][0].time !== "00:00") {
        console.log("Ошибка: ожидалось значение '00:00' для time в первом элементе, но получено", jsonData.user_state_update.week.days[formattedDate][0].time);
    }
    if (jsonData.user_state_update.week.days[formattedDate][0].name !== "тест событие 1") {
        console.log("Ошибка: ожидалось значение 'тест событие 1' для name в первом элементе, но получено", jsonData.user_state_update.week.days[formattedDate][0].name);
    }	
	 
    // Проверяем наличие и тип user_state_update
    pm.expect(jsonData).to.have.property('user_state_update');
    pm.expect(jsonData.user_state_update).to.be.an('object');

    // Проверяем наличие и тип object3 внутри user_state_update
    pm.expect(jsonData.user_state_update).to.have.property('week');
    pm.expect(jsonData.user_state_update.week).to.be.an('object');

    // Проверяем наличие и тип days внутри week
    pm.expect(jsonData.user_state_update.week).to.have.property('days');
    pm.expect(jsonData.user_state_update.week.days).to.be.an('object');

    // Проверяем наличие и тип {{currentDate}} внутри days
    pm.expect(jsonData.user_state_update.week.days).to.have.property(formattedDate);
    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.be.an('array');

    // Проверяем, что formattedDate содержит 2 элемента
    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.have.lengthOf(1);

    // Проверяем первый элемент formattedDate
    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('time', "00:00");
    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('name', "тест событие 1");   

});

//-------------------------------------------------------------------------------
pm.test("3. Проверка структуры ответа и значений в user_state_update, pastDate и futureDate", function () {
    var jsonData = pm.response.json();

     // Дополнительные проверки значений
    if (jsonData.user_state_update.week.days[pm.variables.get('pastDate')][0].time !== "12:00") {
        console.log("Ошибка: ожидалось значение '01:00' для time в первом элементе, но получено", jsonData.user_state_update.week.days[pm.variables.get('pastDate')][0].time);
    }
    if (jsonData.user_state_update.week.days[pm.variables.get('pastDate')][0].name !== "Прогулка на берегу моря") {
        console.log("Ошибка: ожидалось значение 'Прогулка на берегу моря' для name в первом элементе, но получено", jsonData.user_state_update.week.days[pm.variables.get('pastDate')][0].name);
    }	
	if (jsonData.user_state_update.week.days[pm.variables.get('pastDate')][1].time !== "14:00") {
        console.log("Ошибка: ожидалось значение '14:00' для time во втором элементе, но получено", jsonData.user_state_update.week.days[pm.variables.get('pastDate')][1].time);	
	}	
    if (jsonData.user_state_update.week.days[pm.variables.get('pastDate')][1].name !== "Поздний обед") {
        console.log("Ошибка: ожидалось значение 'Поздний обед' для name во втором элементе, но получено", jsonData.user_state_update.week.days[pm.variables.get('pastDate')][1].name);
    }
	
	if (jsonData.user_state_update.week.days[pm.variables.get('futureDate')][0].time !== "13:30") {
        console.log("Ошибка: ожидалось значение '13:30' для time в первом элементе, но получено", jsonData.user_state_update.week.days[pm.variables.get('futureDate')][0].time);
    }
    if (jsonData.user_state_update.week.days[pm.variables.get('futureDate')][0].name !== "Приготовить асаду") {
        console.log("Ошибка: ожидалось значение 'Приготовить асаду' для name в первом элементе, но получено", jsonData.user_state_update.week.days[pm.variables.get('futureDate')][0].name);
    }
	
	 if (jsonData.user_state_update.week.days[pm.variables.get('futureDate')][1].time !== "09:10") {
        console.log("Ошибка: ожидалось значение '09:10' для time во втором элементе, но получено", jsonData.user_state_update.week.days[pm.variables.get('futureDate')][1].time);	
	}
	
    if (jsonData.user_state_update.week.days[pm.variables.get('futureDate')][1].name !== "Прогуляться по утреннему Буэнос- Айресу и выругаться по поводу эмиграции") {
        console.log("Ошибка: ожидалось значение 'Прогуляться по утреннему Буэнос- Айресу и выругаться по поводу эмиграции' для name во втором элементе, но получено", jsonData.user_state_update.week.days[pm.variables.get('futureDate')][1].name);
    }
	
    // Проверяем наличие и тип user_state_update
    pm.expect(jsonData).to.have.property('user_state_update');
    pm.expect(jsonData.user_state_update).to.be.an('object');

    // Проверяем наличие и тип object3 внутри user_state_update
    pm.expect(jsonData.user_state_update).to.have.property('week');
    pm.expect(jsonData.user_state_update.week).to.be.an('object');

    // Проверяем наличие и тип days внутри week
    pm.expect(jsonData.user_state_update.week).to.have.property('days');
    pm.expect(jsonData.user_state_update.week.days).to.be.an('object');

    // Проверяем наличие и тип {{pastDate}} внутри days
    pm.expect(jsonData.user_state_update.week.days).to.have.property(pm.variables.get('pastDate'));
    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('pastDate')]).to.be.an('array');
	
	    // Проверяем наличие и тип {{futureDate}} внутри days
    pm.expect(jsonData.user_state_update.week.days).to.have.property(pm.variables.get('futureDate'));
    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('futureDate')]).to.be.an('array');

    // Проверяем, что 'pastDate' содержит 2 элемента
    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('pastDate')]).to.have.lengthOf(2);
	
	// Проверяем, что 'futureDate' содержит 2 элемента
    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('futureDate')]).to.have.lengthOf(2);

    // Проверяем первый элемент 'pastDate'
    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('pastDate')][0]).to.have.property('time', "12:00");
    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('pastDate')][0]).to.have.property('name', "Прогулка на берегу моря");

    // Проверяем второй элемент 'pastDate'
    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('pastDate')][1]).to.have.property('time', "14:00");
    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('pastDate')][1]).to.have.property('name', "Поздний обед");
	
	// Проверяем первый элемент 'futureDate'
    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('futureDate')][0]).to.have.property('time', "13:30");
    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('futureDate')][0]).to.have.property('name', "Приготовить асаду");

    // Проверяем второй элемент 'futureDate'
    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('futureDate')][1]).to.have.property('time', "09:10");
    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('futureDate')][1]).to.have.property('name', "Прогуляться по утреннему Буэнос- Айресу и выругаться по поводу эмиграции");
});

//-------------------------------------------------------------------------------
с фунцией, когда нет пререквеста

// Генерация текущей даты в формате DD-MM-YYYY

function generateCurrentDate() {
    var currentDate = new Date();
    var day = String(currentDate.getDate()).padStart(2, '0');
    var month = String(currentDate.getMonth() + 1).padStart(2, '0'); // Январь - это 0!
    var year = currentDate.getFullYear();
    return day + '-' + month + '-' + year;
}
// 
pm.test("1. Проверка text с currentDate", function () {
    var jsonData = pm.response.json();
    var formattedDate = generateCurrentDate()

    // Создание регулярного выражения с текущей датой
    var expectedPattern = new RegExp('^Ваши события на сегодня ' + formattedDate + " 00:00 Поздний обед00, 01:00 Поздний обед01, 02:00 Поздний обед02, 03:00 Поздний обед03, 04:00 Поздний обед04, 10:00 Поздний обед10, 11:00 Поздний обед11, 12:00 Прогулка на берегу моря12, 14:00 Поздний обед14, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 17:00 Поздний обед17");

    // Проверка наличия объекта
    pm.expect(jsonData).to.have.property('response');

    // Проверка, что response является объектом
    pm.expect(jsonData.response).to.be.an('object');

    // Проверка наличия ключа внутри объекта
    pm.expect(jsonData.response).to.have.property('text');
    pm.expect(jsonData.response).to.have.property('end_session');

    // Проверка значения ключа внутри объекта
    pm.expect(jsonData.response.text).to.match(expectedPattern);
    pm.expect(jsonData.response.end_session).to.eql(false);

});
//-------------------------------------------------------------------------------




//-------------------------------------------------------------------------------
pm.test("0.2 Значение ключей user_id, session_id внутри 'session'", function () {
    var jsonData = pm.response.json();
    
    // Проверяем наличие объекта 'session' в ответе
    pm.expect(jsonData).to.have.property('session');
    
    // Проверяем наличие ключей'  
    pm.expect(jsonData.session).to.have.property('user_id');
     pm.expect(jsonData.session).to.have.property('session_id');
    
    // Проверяем значения ключей 
    pm.expect(jsonData.session.user_id).to.equal('b4fde534');
    pm.expect(jsonData.session.session_id).to.equal('ffb392fd');  
});

//-------------------------------------------------------------------------------

pm.test("1. Проверка text", function () {
    var jsonData = pm.response.json();
    
    // Генерация текущей даты в формате DD-MM-YYYY
    var currentDate = new Date();
    var day = String(currentDate.getDate()).padStart(2, '0');
    var month = String(currentDate.getMonth() + 1).padStart(2, '0'); // Январь - это 0!
    var year = currentDate.getFullYear();
    var formattedDate = day + '-' + month + '-' + year;
    
    // Создание регулярного выражения с текущей датой
    var expectedPattern = new RegExp('^Ваши события на сегодня ' + formattedDate + ' 12:00 Прогулка на берегу моря, 14:00 Поздний обед');
    
    // Проверка наличия объекта
    pm.expect(jsonData).to.have.property('response');
    
    // Проверка, что response является объектом
    pm.expect(jsonData.response).to.be.an('object');
    
    // Проверка наличия ключа внутри объекта
    pm.expect(jsonData.response).to.have.property('text');
    
    // Проверка значения ключа внутри объекта
    pm.expect(jsonData.response.text).to.match(expectedPattern);   
   
});

//-------------------------------------------------------------------------------
pm.test("1. Проверка text", function () {
    var jsonData = pm.response.json();
    
    
    // Создание регулярного выражения с текущей датой
    var expectedPattern = new RegExp('^Ваши события ' + pm.variables.get('pastDate') + ' 17:00 Велосипедная прогулка, 20:00 Ужин, ' + pm.variables.get('curDate') + ' 17:00 Ужин, 17:01 Велосипедная прогулка, ' + pm.variables.get('futureDate') + ' 09:00 Поздний обед, 15:00 Прогулка на берегу моря');
    
    // Проверка наличия объекта
    pm.expect(jsonData).to.have.property('response');
    
    // Проверка, что response является объектом
    pm.expect(jsonData.response).to.be.an('object');
    
    // Проверка наличия ключа внутри объекта
    pm.expect(jsonData.response).to.have.property('text');
    
    // Проверка значения ключа внутри объекта
    pm.expect(jsonData.response.text).to.match(expectedPattern);   
   
});
//-------------------------------------------------------------------------------
pm.test("1. Проверка text", function () {
    var jsonData = pm.response.json();
    
    
    // Создание регулярного выражения с текущей датой
    var expectedPattern = new RegExp('^Событие успешно добавлено на ' + pm.variables.get('curDate') + ' 00:00 тест событие 1! Выполнен выход в главное меню ');
    
    // Проверка наличия объекта
    pm.expect(jsonData).to.have.property('response');
    
    // Проверка, что response является объектом
    pm.expect(jsonData.response).to.be.an('object');
    
    // Проверка наличия ключа внутри объекта
    pm.expect(jsonData.response).to.have.property('text');
	pm.expect(jsonData.response).to.have.property('end_session');
    
    // Проверка значения ключа внутри объекта
    pm.expect(jsonData.response.text).to.match(expectedPattern); 
	pm.expect(jsonData.response.end_session).to.eql(false);
   
});

//------------------------------------------------------------------------------


pm.test("1. Проверка text с currentDate", function () {
    var jsonData = pm.response.json();

    // Генерация текущей даты в формате DD-MM-YYYY
    var currentDate = new Date();
    var day = String(currentDate.getDate()).padStart(2, '0');
    var month = String(currentDate.getMonth() + 1).padStart(2, '0'); // Январь - это 0!
    var year = currentDate.getFullYear();
    var formattedDate = day + '-' + month + '-' + year;

    // Создание регулярного выражения с текущей датой
    var expectedPattern = new RegExp('^Событие успешно добавлено на ' + formattedDate + " 00:00 тест событие 1! Выполнен выход в главное меню ");

    // Проверка наличия объекта
    pm.expect(jsonData).to.have.property('response');

    // Проверка, что response является объектом
    pm.expect(jsonData.response).to.be.an('object');

    // Проверка наличия ключа внутри объекта
    pm.expect(jsonData.response).to.have.property('text');
    pm.expect(jsonData.response).to.have.property('end_session');

    // Проверка значения ключа внутри объекта
    pm.expect(jsonData.response.text).to.match(expectedPattern);
    pm.expect(jsonData.response.end_session).to.eql(false);

});

//------------------------------------------------------------------------------

pm.test("1. Проверка text", function () {
    let jsonData = pm.response.json();

    // Получаем день недели из запроса
    let requestBody = JSON.parse(pm.request.body.raw);
    let actions =  requestBody.state.session.actions;
     console.log(actions);

    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction
     
    let command = requestBody.request.command;
    let is_valid_command = jsonData.response.text.includes(command);
   

    // Функция для получения следующей даты определенного дня недели
    function getNextvalueAction(dayName) {
        const days = ['воскресенье', 'понедельник', 'вторник', 'среда', 'четверг', 'пятница', 'суббота'];
        const today = new Date();
        const dayIndex = days.indexOf(dayName);
        if (dayIndex === -1) return null;
        
        const targetDate = new Date(today);
        targetDate.setDate(today.getDate() + (dayIndex + 7 - today.getDay()) % 7);
        return targetDate;
    }
    
    // Получаем ближайшую дату для указанного дня недели
    let targetDate = getNextvalueAction(valueAction);
    console.log(targetDate);
   
    // Форматируем дату в DD-MM-YYYY
    let formattedDate = targetDate.getDate().toString().padStart(2, '0') + '-' +
                        (targetDate.getMonth() + 1).toString().padStart(2, '0') + '-' +
                        targetDate.getFullYear();
   

 /*   let is_expect_date = jsonData.response.text.includes("Событие успешно добавлено на " + formattedDate);
    console.log("Ожидаемая дата?:", is_expect_date);  
 */
     // Создание регулярного выражения с ожидаемой датой
    let expectedPattern = new RegExp('^Событие успешно добавлено на ' + formattedDate + " 00:00 тест событие 1! Выполнен выход в главное меню ");

    
    // Проверка command
    pm.expect(jsonData).to.have.property('response');
    
    // Проверка, что response является объектом
    pm.expect(jsonData.response).to.be.an('object');
    
    // Проверка наличия ключа внутри объекта
    pm.expect(jsonData.response).to.have.property('text');
    pm.expect(jsonData.response).to.have.property('end_session');
    
    // Проверка значения ключа внутри объекта
    pm.expect(jsonData.response.text).to.match(expectedPattern);
    pm.expect(jsonData.response.text).to.include(command); 
    pm.expect(jsonData.response.end_session).to.eql(false);

});

_________________ 
pm.test("3. Проверка'days' {}", function () {
    var jsonData = pm.response.json();
    
    // Проверяем наличие user_state_update в ответе
    pm.expect(jsonData).to.have.property('user_state_update');
    pm.expect(jsonData.user_state_update).to.be.an('object');

    // Проверяем наличие week внутри user_state_update
    pm.expect(jsonData.user_state_update).to.have.property('week');
    pm.expect(jsonData.user_state_update.week).to.be.an('object');

    // Проверяем наличие days внутри week
    pm.expect(jsonData.user_state_update.week).to.have.property('days');

    // Проверяем, что days является пустым объектом
    pm.expect(jsonData.user_state_update.week.days).to.be.an('object').that.is.empty;   
});

//---------------------------------------------------------------------------
Функция 
// Генерация текущей даты в формате DD-MM-YYYY

function generateCurrentDate() {
    var currentDate = new Date();
    var day = String(currentDate.getDate()).padStart(2, '0');
    var month = String(currentDate.getMonth() + 1).padStart(2, '0'); // Январь - это 0!
    var year = currentDate.getFullYear();
    return day + '-' + month + '-' + year;
}
// --------------------------------------------------------------------------
pm.test("1. Проверка text с currentDate", function () {
    var jsonData = pm.response.json();
    var formattedDate = generateCurrentDate()

    // Создание регулярного выражения с текущей датой
    var expectedPattern = new RegExp('^Событие успешно добавлено на ' + formattedDate + " 00:00 тест событие 1! Выполнен выход в главное меню ");

    // Проверка наличия объекта
    pm.expect(jsonData).to.have.property('response');

    // Проверка, что response является объектом
    pm.expect(jsonData.response).to.be.an('object');

    // Проверка наличия ключа внутри объекта
    pm.expect(jsonData.response).to.have.property('text');
    pm.expect(jsonData.response).to.have.property('end_session');

    // Проверка значения ключа внутри объекта
    pm.expect(jsonData.response.text).to.match(expectedPattern);
    pm.expect(jsonData.response.end_session).to.eql(false);

});
//-------------------------------------------------------------------------------
  pm.test("2. Значение ключей 'message_id' внутри 'session'", function () {
    var jsonData = pm.response.json();
    
    // Проверяем наличие объекта 'session' в ответе
    pm.expect(jsonData).to.have.property('session'); 
   
    // Проверяем наличие ключей внутри 'session'
	pm.expect(jsonData.session).to.have.property('message_id');
	
    // Проверяем, что значение ключей
	 pm.expect(jsonData.session.message_id).to.equal(3);
    
});
//------------------------------------------------------------------------------

pm.test("3. Проверка user_state_update", function () {
    var jsonData = pm.response.json();
    var formattedDate = generateCurrentDate()

    // Дополнительные проверки значений
    if (jsonData.user_state_update.week.days[formattedDate][0].time !== "00:00") {
        console.log("Ошибка: ожидалось значение '00:00' для time в первом элементе, но получено", jsonData.user_state_update.week.days[formattedDate][0].time);
    }
    if (jsonData.user_state_update.week.days[formattedDate][0].name !== "тест событие 1") {
        console.log("Ошибка: ожидалось значение 'тест событие 1' для name в первом элементе, но получено", jsonData.user_state_update.week.days[formattedDate][0].name);
    }	
    
    // Проверяем наличие и тип user_state_update
    pm.expect(jsonData).to.have.property('user_state_update');
    pm.expect(jsonData.user_state_update).to.be.an('object');

    // Проверяем наличие и тип object3 внутри user_state_update
    pm.expect(jsonData.user_state_update).to.have.property('week');
    pm.expect(jsonData.user_state_update.week).to.be.an('object');

    // Проверяем наличие и тип days внутри week
    pm.expect(jsonData.user_state_update.week).to.have.property('days');
    pm.expect(jsonData.user_state_update.week.days).to.be.an('object');

    // Проверяем наличие и тип {{currentDate}} внутри days
    pm.expect(jsonData.user_state_update.week.days).to.have.property(formattedDate);
    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.be.an('array');

    // Проверяем, что formattedDate содержит 2 элемента
    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.have.lengthOf(1);

    // Проверяем первый элемент formattedDate
    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('time', "00:00");
    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('name', "тест событие 1");  
});


//-------------------------------------------------------------------------------
pm.test("4. Проверка отсутствия user_state_update", function () {
    var jsonData = pm.response.json();
    pm.expect(jsonData).to.not.have.property('user_state_update');
});

_____________________________________ 
{
                        "number": 0,
                        "valueAction": "добавь событие",
                        "operation": "ADD_EVENT"
                    },
                    {
                        "number": 1,
                        "prevOperation": "ADD_EVENT",
                        "valueAction": "вторник",
                        "operation": "ADD_DAY"
                    },
                    {
                        "number": 2,
                        "prevOperation": "ADD_DAY",
                        "valueAction": "десять часов",
                        "operation": "ADD_TIME"
                    }
					
					
__________________________________________
исправление для текущей даты от AI 

pm.test("1. Проверка text", function () {
    var jsonData = pm.response.json();

    // Получаем день недели из запроса
    let requestBody = JSON.parse(pm.request.body.raw);
    let actions =  requestBody.state.session.actions;

    var valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction

    // Функция для получения следующей даты определенного дня недели
    function getNextvalueAction(dayName) {
        const days = ['воскресенье', 'понедельник', 'вторник', 'среда', 'четверг', 'пятница', 'суббота'];
        const today = new Date();
        const dayIndex = days.indexOf(dayName);
        if (dayIndex === -1) return null;
        
        const targetDate = new Date(today);
        targetDate.setDate(today.getDate() + (dayIndex + 7 - today.getDay()) % 7);
        return targetDate;
    }
    
    // Получаем ближайшую дату для указанного дня недели
    var targetDate = getNextvalueAction(valueAction);
    if (!targetDate) {
        console.log("Некорректное значение дня недели");
        return; // Exit the test if the day name is incorrect
    }
    console.log(targetDate);
   
    // Форматируем дату в DD-MM-YYYY
    var formattedDate = targetDate.getDate().toString().padStart(2, '0') + '-' +
                        (targetDate.getMonth() + 1).toString().padStart(2, '0') + '-' +
                        targetDate.getFullYear();
    console.log("Ожидаемая дата:", formattedDate);  


     // Создание регулярного выражения с ожидаемой датой
    var expectedPattern = new RegExp('^Событие успешно добавлено на ' + formattedDate );

    
    // Проверка наличия объекта
    pm.expect(jsonData).to.have.property('response');
    
    // Проверка, что response является объектом
    pm.expect(jsonData.response).to.be.an('object');
    
    // Проверка наличия ключа внутри объекта
    pm.expect(jsonData.response).to.have.property('text');
    pm.expect(jsonData.response).to.have.property('end_session');
    
    // Проверка значения ключа внутри объекта
    pm.expect(jsonData.response.text).to.match(expectedPattern);
    pm.expect(jsonData.response.end_session).to.eql(false);

});


//-------------------------------------------------------------------------------
pm.test("3. Проверка 'prevActions'", function () {
    var jsonData = pm.response.json();

    // Проверяем наличие session_state в ответе
    pm.expect(jsonData).to.have.property('session_state');
    pm.expect(jsonData.session_state).to.be.an('object');

    // Проверяем наличие actions внутри session_state
    pm.expect(jsonData.session_state).to.have.property('actions');
    pm.expect(jsonData.session_state.actions).to.be.an('object');

    // Проверяем наличие prevActions внутри actions
    pm.expect(jsonData.session_state.actions).to.have.property('prevActions');
    pm.expect(jsonData.session_state.actions.prevActions).to.be.an('array');

    // Проверяем, что prevActions не пустой
    pm.expect(jsonData.session_state.actions.prevActions).to.have.length.above(0);

    // Проверяем ключи в первом элементе prevActions
    pm.expect(jsonData.session_state.actions.prevActions[0]).to.have.property('number');
    pm.expect(jsonData.session_state.actions.prevActions[0]).to.have.property('operation');
    pm.expect(jsonData.session_state.actions.prevActions[0]).to.have.property('valueAction');

    // Проверяем значения ключей
    pm.expect(jsonData.session_state.actions.prevActions[0].number).to.equal(0);
    pm.expect(jsonData.session_state.actions.prevActions[0].operation).to.equal("ADD_EVENT");
    pm.expect(jsonData.session_state.actions.prevActions[0].valueAction).to.equal("добавь событие");

    // Проверяем ключи во втором элементе prevActions
    pm.expect(jsonData.session_state.actions.prevActions[1]).to.have.property('number');
    pm.expect(jsonData.session_state.actions.prevActions[1]).to.have.property('operation');
    pm.expect(jsonData.session_state.actions.prevActions[1]).to.have.property('prevOperation');
    pm.expect(jsonData.session_state.actions.prevActions[1]).to.have.property('valueAction');

    // Проверяем значения ключей
    pm.expect(jsonData.session_state.actions.prevActions[1].number).to.equal(1);
    pm.expect(jsonData.session_state.actions.prevActions[1].operation).to.equal("ADD_DAY");
    pm.expect(jsonData.session_state.actions.prevActions[1].prevOperation).to.equal("ADD_EVENT");
    pm.expect(jsonData.session_state.actions.prevActions[1].valueAction).to.equal("сегодня");

        // Проверяем ключи во третьем элементе prevActions
    pm.expect(jsonData.session_state.actions.prevActions[1]).to.have.property('number');
    pm.expect(jsonData.session_state.actions.prevActions[1]).to.have.property('operation');
    pm.expect(jsonData.session_state.actions.prevActions[1]).to.have.property('prevOperation');
    pm.expect(jsonData.session_state.actions.prevActions[1]).to.have.property('valueAction');

    // Проверяем значения ключей
    pm.expect(jsonData.session_state.actions.prevActions[1].number).to.equal(2);
    pm.expect(jsonData.session_state.actions.prevActions[1].operation).to.equal("ADD_TIME");
    pm.expect(jsonData.session_state.actions.prevActions[1].prevOperation).to.equal("ADD_DAY");
    pm.expect(jsonData.session_state.actions.prevActions[1].valueAction).to.equal("ноль часов ноль");

});

        "user_id": "{{user_id}}",
        "session_id": "{{session_id}}",	
		
		        "user_id": "8783711111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "session_id": "b6dc6eee1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
		
		


 // Вывод для отладки
    console.log("Ожидаемый паттерн:", expectedPattern);
    console.log("Фактическое значение:", jsonData.response.text);		
		
_____________________ 


pm.test("1. Проверка text", function () {
    var jsonData = pm.response.json();
    
    // Проверка наличия объекта
    pm.expect(jsonData).to.have.property('response');
    
    // Проверка, что объект_тест является объектом
    pm.expect(jsonData.response).to.be.an('object');
    
    // Проверка наличия ключа внутри объекта
    pm.expect(jsonData.response).to.have.property('text');
    pm.expect(jsonData.response).to.have.property('end_session');
    
    // Проверка значения ключа внутри объекта
    pm.expect(jsonData.response.text).to.eql('Планировщик недели прощается с вами! До свидания!');
    pm.expect(jsonData.response.end_session).to.eql(false);
    });
_____________________ 
pm.expect(jsonData.response.end_session).to.eql(false);

true

//-------------------------------------------------------------------------------
pm.test("3. Проверка структуры ответа и значения 'prevActions.number'", function () {
    var jsonData = pm.response.json();

    // Проверяем наличие session_state в ответе
    pm.expect(jsonData).to.have.property('session_state');
    pm.expect(jsonData.session_state).to.be.an('object');

    // Проверяем наличие actions внутри session_state
    pm.expect(jsonData.session_state).to.have.property('actions');
    pm.expect(jsonData.session_state.actions).to.be.an('object');

    // Проверяем наличие prevActions внутри actions
    pm.expect(jsonData.session_state.actions).to.have.property('prevActions');
    pm.expect(jsonData.session_state.actions.prevActions).to.be.an('array');

    // Проверяем, что prevActions не пустой
    pm.expect(jsonData.session_state.actions.prevActions).to.have.length.above(0);

    // Проверяем наличие number в первом элементе prevActions
    pm.expect(jsonData.session_state.actions.prevActions[0]).to.have.property('number');

    // Проверяем, что number равен 0
    pm.expect(jsonData.session_state.actions.prevActions[0].number).to.equal(0);

});

//-------------------------------------------------------------------------------
pm.test("3. Проверка структуры ответа и значения 'prevActions.number'", function () {
    var jsonData = pm.response.json();

    // Проверяем наличие session_state в ответе
    pm.expect(jsonData).to.have.property('session_state');
    pm.expect(jsonData.session_state).to.be.an('object');

    // Проверяем наличие actions внутри session_state
    pm.expect(jsonData.session_state).to.have.property('actions');
    pm.expect(jsonData.session_state.actions).to.be.an('object');

    // Проверяем наличие prevActions внутри actions
    pm.expect(jsonData.session_state.actions).to.have.property('prevActions');
    pm.expect(jsonData.session_state.actions.prevActions).to.be.an('array');

    // Проверяем, что prevActions не пустой
    pm.expect(jsonData.session_state.actions.prevActions).to.have.length.above(0);

    // Проверяем ключи в первом элементе prevActions
    pm.expect(jsonData.session_state.actions.prevActions[0]).to.have.property('number');
    pm.expect(jsonData.session_state.actions.prevActions[0]).to.have.property('operation');
    pm.expect(jsonData.session_state.actions.prevActions[0]).to.have.property('valueAction');

    // Проверяем значения ключей
    pm.expect(jsonData.session_state.actions.prevActions[0].number).to.equal(0);
    pm.expect(jsonData.session_state.actions.prevActions[0].operation).to.equal("ADD_EVENT");
    pm.expect(jsonData.session_state.actions.prevActions[0].valueAction).to.equal("добавь событие");

});


//-------------------------------------------------------------------------------
pm.test("3. Проверка 'prevActions'", function () {
    var jsonData = pm.response.json();

    // Проверяем наличие session_state в ответе
    pm.expect(jsonData).to.have.property('session_state');
    pm.expect(jsonData.session_state).to.be.an('object');

    // Проверяем наличие actions внутри session_state
    pm.expect(jsonData.session_state).to.have.property('actions');
    pm.expect(jsonData.session_state.actions).to.be.an('object');

    // Проверяем наличие prevActions внутри actions
    pm.expect(jsonData.session_state.actions).to.have.property('prevActions');
    pm.expect(jsonData.session_state.actions.prevActions).to.be.an('array');

    // Проверяем, что prevActions не пустой
    pm.expect(jsonData.session_state.actions.prevActions).to.have.length.above(0);

    // Проверяем ключи в первом элементе prevActions
    pm.expect(jsonData.session_state.actions.prevActions[0]).to.have.property('number');
    pm.expect(jsonData.session_state.actions.prevActions[0]).to.have.property('operation');
    pm.expect(jsonData.session_state.actions.prevActions[0]).to.have.property('valueAction');

    // Проверяем значения ключей
    pm.expect(jsonData.session_state.actions.prevActions[0].number).to.equal(0);
    pm.expect(jsonData.session_state.actions.prevActions[0].operation).to.equal("ADD_EVENT");
    pm.expect(jsonData.session_state.actions.prevActions[0].valueAction).to.equal("добавь событие");

    // Проверяем ключи во втором элементе prevActions
    pm.expect(jsonData.session_state.actions.prevActions[1]).to.have.property('number');
    pm.expect(jsonData.session_state.actions.prevActions[1]).to.have.property('operation');
    pm.expect(jsonData.session_state.actions.prevActions[1]).to.have.property('prevOperation');
    pm.expect(jsonData.session_state.actions.prevActions[1]).to.have.property('valueAction');

    // Проверяем значения ключей
    pm.expect(jsonData.session_state.actions.prevActions[1].number).to.equal(1);
    pm.expect(jsonData.session_state.actions.prevActions[1].operation).to.equal("ADD_DAY");
    pm.expect(jsonData.session_state.actions.prevActions[1].prevOperation).to.equal("ADD_EVENT");
    pm.expect(jsonData.session_state.actions.prevActions[1].valueAction).to.equal("сегодня");

});
//-------------------------------------------------------------------------------
  pm.test("2. Значение ключей 'message_id' внутри 'session'", function () {
    var jsonData = pm.response.json();
    
    // Проверяем наличие объекта 'session' в ответе
    pm.expect(jsonData).to.have.property('session'); 
   
    // Проверяем наличие ключей внутри 'session'
	pm.expect(jsonData.session).to.have.property('message_id');
	
    // Проверяем, что значение ключей
	 pm.expect(jsonData.session.message_id).to.equal(3);
    
});

//-------------------------------------------------------------------------------

pm.test("5. Проверка структуры ответа и значений в user_state_update", function () {
    var jsonData = pm.response.json();

     // Дополнительные проверки значений
    if (jsonData.user_state_update.week.days["{{currentDate}}"][0].time !== "12:00") {
        console.log("Ошибка: ожидалось значение '01:00' для time в первом элементе, но получено", jsonData.user_state_update.week.days["{{currentDate}}"][0].time);
    }
    if (jsonData.user_state_update.week.days["{{currentDate}}"][0].name !== "Прогулка на берегу моря") {
        console.log("Ошибка: ожидалось значение 'Прогулка на берегу моря' для name в первом элементе, но получено", jsonData.user_state_update.week.days["{{currentDate}}"][0].name);
    }
	
	 if (jsonData.user_state_update.week.days["{{currentDate}}"][1].time !== "14:00") {
        console.log("Ошибка: ожидалось значение '14:00' для time во втором элементе, но получено", jsonData.user_state_update.week.days["{{currentDate}}"][1].time);	
	}
	
    if (jsonData.user_state_update.week.days["{{currentDate}}"][1].name !== "Поздний обед") {
        console.log("Ошибка: ожидалось значение 'Поздний обед' для name во втором элементе, но получено", jsonData.user_state_update.week.days["{{currentDate}}"][1].name);
    }
	

    // Проверяем наличие и тип user_state_update
    pm.expect(jsonData).to.have.property('user_state_update');
    pm.expect(jsonData.user_state_update).to.be.an('object');

    // Проверяем наличие и тип object3 внутри user_state_update
    pm.expect(jsonData.user_state_update).to.have.property('week');
    pm.expect(jsonData.user_state_update.week).to.be.an('object');

    // Проверяем наличие и тип days внутри week
    pm.expect(jsonData.user_state_update.week).to.have.property('days');
    pm.expect(jsonData.user_state_update.week.days).to.be.an('object');

    // Проверяем наличие и тип {{currentDate}} внутри days
    pm.expect(jsonData.user_state_update.week.days).to.have.property('{{currentDate}}');
    pm.expect(jsonData.user_state_update.week.days["{{currentDate}}"]).to.be.an('array');

    // Проверяем, что "{{currentDate}}" содержит 2 элемента
    pm.expect(jsonData.user_state_update.week.days["{{currentDate}}"]).to.have.lengthOf(2);

    // Проверяем первый элемент "{{currentDate}}"
    pm.expect(jsonData.user_state_update.week.days["{{currentDate}}"][0]).to.have.property('time', "12:00");
    pm.expect(jsonData.user_state_update.week.days["{{currentDate}}"][0]).to.have.property('name', "Прогулка на берегу моря");

    // Проверяем второй элемент "{{currentDate}}"
    pm.expect(jsonData.user_state_update.week.days["{{currentDate}}"][1]).to.have.property('time', "14:00");
    pm.expect(jsonData.user_state_update.week.days["{{currentDate}}"][1]).to.have.property('name', "Поздний обед");

});


//когда нет pre реквеста

pm.test("3. Проверка user_state_update", function () {
    var jsonData = pm.response.json();

     // Дополнительные проверки значений
    if (jsonData.user_state_update.week.days[formattedDate][0].time !== "00:00") {
        console.log("Ошибка: ожидалось значение '00:00' для time в первом элементе, но получено", jsonData.user_state_update.week.days[formattedDate][0].time);
    }
    if (jsonData.user_state_update.week.days[formattedDate][0].name !== "тест событие 1") {
        console.log("Ошибка: ожидалось значение 'тест событие 1' для name в первом элементе, но получено", jsonData.user_state_update.week.days[formattedDate][0].name);
    }	
	 
    // Проверяем наличие и тип user_state_update
    pm.expect(jsonData).to.have.property('user_state_update');
    pm.expect(jsonData.user_state_update).to.be.an('object');

    // Проверяем наличие и тип object3 внутри user_state_update
    pm.expect(jsonData.user_state_update).to.have.property('week');
    pm.expect(jsonData.user_state_update.week).to.be.an('object');

    // Проверяем наличие и тип days внутри week
    pm.expect(jsonData.user_state_update.week).to.have.property('days');
    pm.expect(jsonData.user_state_update.week.days).to.be.an('object');

    // Проверяем наличие и тип {{currentDate}} внутри days
    pm.expect(jsonData.user_state_update.week.days).to.have.property(formattedDate);
    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.be.an('array');

    // Проверяем, что formattedDate содержит 2 элемента
    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.have.lengthOf(1);

    // Проверяем первый элемент formattedDate
    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('time', "00:00");
    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('name', "тест событие 1");   

});

//-------------------------------------------------------------------------------
pm.test("3. Проверка структуры ответа и значений в user_state_update, pastDate и futureDate", function () {
    var jsonData = pm.response.json();

     // Дополнительные проверки значений
    if (jsonData.user_state_update.week.days[pm.variables.get('pastDate')][0].time !== "12:00") {
        console.log("Ошибка: ожидалось значение '01:00' для time в первом элементе, но получено", jsonData.user_state_update.week.days[pm.variables.get('pastDate')][0].time);
    }
    if (jsonData.user_state_update.week.days[pm.variables.get('pastDate')][0].name !== "Прогулка на берегу моря") {
        console.log("Ошибка: ожидалось значение 'Прогулка на берегу моря' для name в первом элементе, но получено", jsonData.user_state_update.week.days[pm.variables.get('pastDate')][0].name);
    }	
	if (jsonData.user_state_update.week.days[pm.variables.get('pastDate')][1].time !== "14:00") {
        console.log("Ошибка: ожидалось значение '14:00' для time во втором элементе, но получено", jsonData.user_state_update.week.days[pm.variables.get('pastDate')][1].time);	
	}	
    if (jsonData.user_state_update.week.days[pm.variables.get('pastDate')][1].name !== "Поздний обед") {
        console.log("Ошибка: ожидалось значение 'Поздний обед' для name во втором элементе, но получено", jsonData.user_state_update.week.days[pm.variables.get('pastDate')][1].name);
    }
	
	if (jsonData.user_state_update.week.days[pm.variables.get('futureDate')][0].time !== "13:30") {
        console.log("Ошибка: ожидалось значение '13:30' для time в первом элементе, но получено", jsonData.user_state_update.week.days[pm.variables.get('futureDate')][0].time);
    }
    if (jsonData.user_state_update.week.days[pm.variables.get('futureDate')][0].name !== "Приготовить асаду") {
        console.log("Ошибка: ожидалось значение 'Приготовить асаду' для name в первом элементе, но получено", jsonData.user_state_update.week.days[pm.variables.get('futureDate')][0].name);
    }
	
	 if (jsonData.user_state_update.week.days[pm.variables.get('futureDate')][1].time !== "09:10") {
        console.log("Ошибка: ожидалось значение '09:10' для time во втором элементе, но получено", jsonData.user_state_update.week.days[pm.variables.get('futureDate')][1].time);	
	}
	
    if (jsonData.user_state_update.week.days[pm.variables.get('futureDate')][1].name !== "Прогуляться по утреннему Буэнос- Айресу и выругаться по поводу эмиграции") {
        console.log("Ошибка: ожидалось значение 'Прогуляться по утреннему Буэнос- Айресу и выругаться по поводу эмиграции' для name во втором элементе, но получено", jsonData.user_state_update.week.days[pm.variables.get('futureDate')][1].name);
    }
	
    // Проверяем наличие и тип user_state_update
    pm.expect(jsonData).to.have.property('user_state_update');
    pm.expect(jsonData.user_state_update).to.be.an('object');

    // Проверяем наличие и тип object3 внутри user_state_update
    pm.expect(jsonData.user_state_update).to.have.property('week');
    pm.expect(jsonData.user_state_update.week).to.be.an('object');

    // Проверяем наличие и тип days внутри week
    pm.expect(jsonData.user_state_update.week).to.have.property('days');
    pm.expect(jsonData.user_state_update.week.days).to.be.an('object');

    // Проверяем наличие и тип {{pastDate}} внутри days
    pm.expect(jsonData.user_state_update.week.days).to.have.property(pm.variables.get('pastDate'));
    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('pastDate')]).to.be.an('array');
	
	    // Проверяем наличие и тип {{futureDate}} внутри days
    pm.expect(jsonData.user_state_update.week.days).to.have.property(pm.variables.get('futureDate'));
    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('futureDate')]).to.be.an('array');

    // Проверяем, что 'pastDate' содержит 2 элемента
    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('pastDate')]).to.have.lengthOf(2);
	
	// Проверяем, что 'futureDate' содержит 2 элемента
    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('futureDate')]).to.have.lengthOf(2);

    // Проверяем первый элемент 'pastDate'
    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('pastDate')][0]).to.have.property('time', "12:00");
    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('pastDate')][0]).to.have.property('name', "Прогулка на берегу моря");

    // Проверяем второй элемент 'pastDate'
    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('pastDate')][1]).to.have.property('time', "14:00");
    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('pastDate')][1]).to.have.property('name', "Поздний обед");
	
	// Проверяем первый элемент 'futureDate'
    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('futureDate')][0]).to.have.property('time', "13:30");
    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('futureDate')][0]).to.have.property('name', "Приготовить асаду");

    // Проверяем второй элемент 'futureDate'
    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('futureDate')][1]).to.have.property('time', "09:10");
    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('futureDate')][1]).to.have.property('name', "Прогуляться по утреннему Буэнос- Айресу и выругаться по поводу эмиграции");
});

//-------------------------------------------------------------------------------
с фунцией, когда нет пререквеста

// Генерация текущей даты в формате DD-MM-YYYY

function generateCurrentDate() {
    var currentDate = new Date();
    var day = String(currentDate.getDate()).padStart(2, '0');
    var month = String(currentDate.getMonth() + 1).padStart(2, '0'); // Январь - это 0!
    var year = currentDate.getFullYear();
    return day + '-' + month + '-' + year;
}
// 
pm.test("1. Проверка text с currentDate", function () {
    var jsonData = pm.response.json();
    var formattedDate = generateCurrentDate()

    // Создание регулярного выражения с текущей датой
    var expectedPattern = new RegExp('^Ваши события на сегодня ' + formattedDate + " 00:00 Поздний обед00, 01:00 Поздний обед01, 02:00 Поздний обед02, 03:00 Поздний обед03, 04:00 Поздний обед04, 10:00 Поздний обед10, 11:00 Поздний обед11, 12:00 Прогулка на берегу моря12, 14:00 Поздний обед14, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 17:00 Поздний обед17");

    // Проверка наличия объекта
    pm.expect(jsonData).to.have.property('response');

    // Проверка, что response является объектом
    pm.expect(jsonData.response).to.be.an('object');

    // Проверка наличия ключа внутри объекта
    pm.expect(jsonData.response).to.have.property('text');
    pm.expect(jsonData.response).to.have.property('end_session');

    // Проверка значения ключа внутри объекта
    pm.expect(jsonData.response.text).to.match(expectedPattern);
    pm.expect(jsonData.response.end_session).to.eql(false);

});
//-------------------------------------------------------------------------------




//-------------------------------------------------------------------------------
pm.test("0.2 Значение ключей user_id, session_id внутри 'session'", function () {
    var jsonData = pm.response.json();
    
    // Проверяем наличие объекта 'session' в ответе
    pm.expect(jsonData).to.have.property('session');
    
    // Проверяем наличие ключей'  
    pm.expect(jsonData.session).to.have.property('user_id');
     pm.expect(jsonData.session).to.have.property('session_id');
    
    // Проверяем значения ключей 
    pm.expect(jsonData.session.user_id).to.equal('b4fde534');
    pm.expect(jsonData.session.session_id).to.equal('ffb392fd');  
});

//-------------------------------------------------------------------------------

pm.test("1. Проверка text", function () {
    var jsonData = pm.response.json();
    
    // Генерация текущей даты в формате DD-MM-YYYY
    var currentDate = new Date();
    var day = String(currentDate.getDate()).padStart(2, '0');
    var month = String(currentDate.getMonth() + 1).padStart(2, '0'); // Январь - это 0!
    var year = currentDate.getFullYear();
    var formattedDate = day + '-' + month + '-' + year;
    
    // Создание регулярного выражения с текущей датой
    var expectedPattern = new RegExp('^Ваши события на сегодня ' + formattedDate + ' 12:00 Прогулка на берегу моря, 14:00 Поздний обед');
    
    // Проверка наличия объекта
    pm.expect(jsonData).to.have.property('response');
    
    // Проверка, что response является объектом
    pm.expect(jsonData.response).to.be.an('object');
    
    // Проверка наличия ключа внутри объекта
    pm.expect(jsonData.response).to.have.property('text');
    
    // Проверка значения ключа внутри объекта
    pm.expect(jsonData.response.text).to.match(expectedPattern);   
   
});

//-------------------------------------------------------------------------------
pm.test("1. Проверка text", function () {
    var jsonData = pm.response.json();
    
    
    // Создание регулярного выражения с текущей датой
    var expectedPattern = new RegExp('^Ваши события ' + pm.variables.get('pastDate') + ' 17:00 Велосипедная прогулка, 20:00 Ужин, ' + pm.variables.get('curDate') + ' 17:00 Ужин, 17:01 Велосипедная прогулка, ' + pm.variables.get('futureDate') + ' 09:00 Поздний обед, 15:00 Прогулка на берегу моря');
    
    // Проверка наличия объекта
    pm.expect(jsonData).to.have.property('response');
    
    // Проверка, что response является объектом
    pm.expect(jsonData.response).to.be.an('object');
    
    // Проверка наличия ключа внутри объекта
    pm.expect(jsonData.response).to.have.property('text');
    
    // Проверка значения ключа внутри объекта
    pm.expect(jsonData.response.text).to.match(expectedPattern);   
   
});
//-------------------------------------------------------------------------------
pm.test("1. Проверка text", function () {
    var jsonData = pm.response.json();
    
    
    // Создание регулярного выражения с текущей датой
    var expectedPattern = new RegExp('^Событие успешно добавлено на ' + pm.variables.get('curDate') + ' 00:00 тест событие 1! Выполнен выход в главное меню ');
    
    // Проверка наличия объекта
    pm.expect(jsonData).to.have.property('response');
    
    // Проверка, что response является объектом
    pm.expect(jsonData.response).to.be.an('object');
    
    // Проверка наличия ключа внутри объекта
    pm.expect(jsonData.response).to.have.property('text');
	pm.expect(jsonData.response).to.have.property('end_session');
    
    // Проверка значения ключа внутри объекта
    pm.expect(jsonData.response.text).to.match(expectedPattern); 
	pm.expect(jsonData.response.end_session).to.eql(false);
   
});

//------------------------------------------------------------------------------


pm.test("1. Проверка text с currentDate", function () {
    var jsonData = pm.response.json();

    // Генерация текущей даты в формате DD-MM-YYYY
    var currentDate = new Date();
    var day = String(currentDate.getDate()).padStart(2, '0');
    var month = String(currentDate.getMonth() + 1).padStart(2, '0'); // Январь - это 0!
    var year = currentDate.getFullYear();
    var formattedDate = day + '-' + month + '-' + year;

    // Создание регулярного выражения с текущей датой
    var expectedPattern = new RegExp('^Событие успешно добавлено на ' + formattedDate + " 00:00 тест событие 1! Выполнен выход в главное меню ");

    // Проверка наличия объекта
    pm.expect(jsonData).to.have.property('response');

    // Проверка, что response является объектом
    pm.expect(jsonData.response).to.be.an('object');

    // Проверка наличия ключа внутри объекта
    pm.expect(jsonData.response).to.have.property('text');
    pm.expect(jsonData.response).to.have.property('end_session');

    // Проверка значения ключа внутри объекта
    pm.expect(jsonData.response.text).to.match(expectedPattern);
    pm.expect(jsonData.response.end_session).to.eql(false);

});

//------------------------------------------------------------------------------

pm.test("1. Проверка text", function () {
    let jsonData = pm.response.json();

    // Получаем день недели из запроса
    let requestBody = JSON.parse(pm.request.body.raw);
    let actions =  requestBody.state.session.actions;
     console.log(actions);

    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction
     
    let command = requestBody.request.command;
    let is_valid_command = jsonData.response.text.includes(command);
   

    // Функция для получения следующей даты определенного дня недели
    function getNextvalueAction(dayName) {
        const days = ['воскресенье', 'понедельник', 'вторник', 'среда', 'четверг', 'пятница', 'суббота'];
        const today = new Date();
        const dayIndex = days.indexOf(dayName);
        if (dayIndex === -1) return null;
        
        const targetDate = new Date(today);
        targetDate.setDate(today.getDate() + (dayIndex + 7 - today.getDay()) % 7);
        return targetDate;
    }
    
    // Получаем ближайшую дату для указанного дня недели
    let targetDate = getNextvalueAction(valueAction);
    console.log(targetDate);
   
    // Форматируем дату в DD-MM-YYYY
    let formattedDate = targetDate.getDate().toString().padStart(2, '0') + '-' +
                        (targetDate.getMonth() + 1).toString().padStart(2, '0') + '-' +
                        targetDate.getFullYear();
   

 /*   let is_expect_date = jsonData.response.text.includes("Событие успешно добавлено на " + formattedDate);
    console.log("Ожидаемая дата?:", is_expect_date);  
 */
     // Создание регулярного выражения с ожидаемой датой
    let expectedPattern = new RegExp('^Событие успешно добавлено на ' + formattedDate + " 00:00 тест событие 1! Выполнен выход в главное меню ");

    
    // Проверка command
    pm.expect(jsonData).to.have.property('response');
    
    // Проверка, что response является объектом
    pm.expect(jsonData.response).to.be.an('object');
    
    // Проверка наличия ключа внутри объекта
    pm.expect(jsonData.response).to.have.property('text');
    pm.expect(jsonData.response).to.have.property('end_session');
    
    // Проверка значения ключа внутри объекта
    pm.expect(jsonData.response.text).to.match(expectedPattern);
    pm.expect(jsonData.response.text).to.include(command); 
    pm.expect(jsonData.response.end_session).to.eql(false);

});

_________________ 
pm.test("3. Проверка'days' {}", function () {
    var jsonData = pm.response.json();
    
    // Проверяем наличие user_state_update в ответе
    pm.expect(jsonData).to.have.property('user_state_update');
    pm.expect(jsonData.user_state_update).to.be.an('object');

    // Проверяем наличие week внутри user_state_update
    pm.expect(jsonData.user_state_update).to.have.property('week');
    pm.expect(jsonData.user_state_update.week).to.be.an('object');

    // Проверяем наличие days внутри week
    pm.expect(jsonData.user_state_update.week).to.have.property('days');

    // Проверяем, что days является пустым объектом
    pm.expect(jsonData.user_state_update.week.days).to.be.an('object').that.is.empty;   
});

//---------------------------------------------------------------------------
Функция 
// Генерация текущей даты в формате DD-MM-YYYY

function generateCurrentDate() {
    var currentDate = new Date();
    var day = String(currentDate.getDate()).padStart(2, '0');
    var month = String(currentDate.getMonth() + 1).padStart(2, '0'); // Январь - это 0!
    var year = currentDate.getFullYear();
    return day + '-' + month + '-' + year;
}
// --------------------------------------------------------------------------
pm.test("1. Проверка text с currentDate", function () {
    var jsonData = pm.response.json();
    var formattedDate = generateCurrentDate()

    // Создание регулярного выражения с текущей датой
    var expectedPattern = new RegExp('^Событие успешно добавлено на ' + formattedDate + " 00:00 тест событие 1! Выполнен выход в главное меню ");

    // Проверка наличия объекта
    pm.expect(jsonData).to.have.property('response');

    // Проверка, что response является объектом
    pm.expect(jsonData.response).to.be.an('object');

    // Проверка наличия ключа внутри объекта
    pm.expect(jsonData.response).to.have.property('text');
    pm.expect(jsonData.response).to.have.property('end_session');

    // Проверка значения ключа внутри объекта
    pm.expect(jsonData.response.text).to.match(expectedPattern);
    pm.expect(jsonData.response.end_session).to.eql(false);

});
//-------------------------------------------------------------------------------
  pm.test("2. Значение ключей 'message_id' внутри 'session'", function () {
    var jsonData = pm.response.json();
    
    // Проверяем наличие объекта 'session' в ответе
    pm.expect(jsonData).to.have.property('session'); 
   
    // Проверяем наличие ключей внутри 'session'
	pm.expect(jsonData.session).to.have.property('message_id');
	
    // Проверяем, что значение ключей
	 pm.expect(jsonData.session.message_id).to.equal(3);
    
});
//------------------------------------------------------------------------------

pm.test("3. Проверка user_state_update", function () {
    var jsonData = pm.response.json();
    var formattedDate = generateCurrentDate()

    // Дополнительные проверки значений
    if (jsonData.user_state_update.week.days[formattedDate][0].time !== "00:00") {
        console.log("Ошибка: ожидалось значение '00:00' для time в первом элементе, но получено", jsonData.user_state_update.week.days[formattedDate][0].time);
    }
    if (jsonData.user_state_update.week.days[formattedDate][0].name !== "тест событие 1") {
        console.log("Ошибка: ожидалось значение 'тест событие 1' для name в первом элементе, но получено", jsonData.user_state_update.week.days[formattedDate][0].name);
    }	
    
    // Проверяем наличие и тип user_state_update
    pm.expect(jsonData).to.have.property('user_state_update');
    pm.expect(jsonData.user_state_update).to.be.an('object');

    // Проверяем наличие и тип object3 внутри user_state_update
    pm.expect(jsonData.user_state_update).to.have.property('week');
    pm.expect(jsonData.user_state_update.week).to.be.an('object');

    // Проверяем наличие и тип days внутри week
    pm.expect(jsonData.user_state_update.week).to.have.property('days');
    pm.expect(jsonData.user_state_update.week.days).to.be.an('object');

    // Проверяем наличие и тип {{currentDate}} внутри days
    pm.expect(jsonData.user_state_update.week.days).to.have.property(formattedDate);
    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.be.an('array');

    // Проверяем, что formattedDate содержит 2 элемента
    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.have.lengthOf(1);

    // Проверяем первый элемент formattedDate
    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('time', "00:00");
    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('name', "тест событие 1");  
});


//-------------------------------------------------------------------------------
pm.test("4. Проверка отсутствия user_state_update", function () {
    var jsonData = pm.response.json();
    pm.expect(jsonData).to.not.have.property('user_state_update');
});

_____________________________________ 
{
                        "number": 0,
                        "valueAction": "добавь событие",
                        "operation": "ADD_EVENT"
                    },
                    {
                        "number": 1,
                        "prevOperation": "ADD_EVENT",
                        "valueAction": "вторник",
                        "operation": "ADD_DAY"
                    },
                    {
                        "number": 2,
                        "prevOperation": "ADD_DAY",
                        "valueAction": "десять часов",
                        "operation": "ADD_TIME"
                    }
					
					
__________________________________________
исправление для текущей даты от AI 

pm.test("1. Проверка text", function () {
    var jsonData = pm.response.json();

    // Получаем день недели из запроса
    let requestBody = JSON.parse(pm.request.body.raw);
    let actions =  requestBody.state.session.actions;

    var valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction

    // Функция для получения следующей даты определенного дня недели
    function getNextvalueAction(dayName) {
        const days = ['воскресенье', 'понедельник', 'вторник', 'среда', 'четверг', 'пятница', 'суббота'];
        const today = new Date();
        const dayIndex = days.indexOf(dayName);
        if (dayIndex === -1) return null;
        
        const targetDate = new Date(today);
        targetDate.setDate(today.getDate() + (dayIndex + 7 - today.getDay()) % 7);
        return targetDate;
    }
    
    // Получаем ближайшую дату для указанного дня недели
    var targetDate = getNextvalueAction(valueAction);
    if (!targetDate) {
        console.log("Некорректное значение дня недели");
        return; // Exit the test if the day name is incorrect
    }
    console.log(targetDate);
   
    // Форматируем дату в DD-MM-YYYY
    var formattedDate = targetDate.getDate().toString().padStart(2, '0') + '-' +
                        (targetDate.getMonth() + 1).toString().padStart(2, '0') + '-' +
                        targetDate.getFullYear();
    console.log("Ожидаемая дата:", formattedDate);  


     // Создание регулярного выражения с ожидаемой датой
    var expectedPattern = new RegExp('^Событие успешно добавлено на ' + formattedDate );

    
    // Проверка наличия объекта
    pm.expect(jsonData).to.have.property('response');
    
    // Проверка, что response является объектом
    pm.expect(jsonData.response).to.be.an('object');
    
    // Проверка наличия ключа внутри объекта
    pm.expect(jsonData.response).to.have.property('text');
    pm.expect(jsonData.response).to.have.property('end_session');
    
    // Проверка значения ключа внутри объекта
    pm.expect(jsonData.response.text).to.match(expectedPattern);
    pm.expect(jsonData.response.end_session).to.eql(false);

});


//-------------------------------------------------------------------------------
pm.test("3. Проверка 'prevActions'", function () {
    var jsonData = pm.response.json();

    // Проверяем наличие session_state в ответе
    pm.expect(jsonData).to.have.property('session_state');
    pm.expect(jsonData.session_state).to.be.an('object');

    // Проверяем наличие actions внутри session_state
    pm.expect(jsonData.session_state).to.have.property('actions');
    pm.expect(jsonData.session_state.actions).to.be.an('object');

    // Проверяем наличие prevActions внутри actions
    pm.expect(jsonData.session_state.actions).to.have.property('prevActions');
    pm.expect(jsonData.session_state.actions.prevActions).to.be.an('array');

    // Проверяем, что prevActions не пустой
    pm.expect(jsonData.session_state.actions.prevActions).to.have.length.above(0);

    // Проверяем ключи в первом элементе prevActions
    pm.expect(jsonData.session_state.actions.prevActions[0]).to.have.property('number');
    pm.expect(jsonData.session_state.actions.prevActions[0]).to.have.property('operation');
    pm.expect(jsonData.session_state.actions.prevActions[0]).to.have.property('valueAction');

    // Проверяем значения ключей
    pm.expect(jsonData.session_state.actions.prevActions[0].number).to.equal(0);
    pm.expect(jsonData.session_state.actions.prevActions[0].operation).to.equal("ADD_EVENT");
    pm.expect(jsonData.session_state.actions.prevActions[0].valueAction).to.equal("добавь событие");

    // Проверяем ключи во втором элементе prevActions
    pm.expect(jsonData.session_state.actions.prevActions[1]).to.have.property('number');
    pm.expect(jsonData.session_state.actions.prevActions[1]).to.have.property('operation');
    pm.expect(jsonData.session_state.actions.prevActions[1]).to.have.property('prevOperation');
    pm.expect(jsonData.session_state.actions.prevActions[1]).to.have.property('valueAction');

    // Проверяем значения ключей
    pm.expect(jsonData.session_state.actions.prevActions[1].number).to.equal(1);
    pm.expect(jsonData.session_state.actions.prevActions[1].operation).to.equal("ADD_DAY");
    pm.expect(jsonData.session_state.actions.prevActions[1].prevOperation).to.equal("ADD_EVENT");
    pm.expect(jsonData.session_state.actions.prevActions[1].valueAction).to.equal("сегодня");

        // Проверяем ключи во третьем элементе prevActions
    pm.expect(jsonData.session_state.actions.prevActions[1]).to.have.property('number');
    pm.expect(jsonData.session_state.actions.prevActions[1]).to.have.property('operation');
    pm.expect(jsonData.session_state.actions.prevActions[1]).to.have.property('prevOperation');
    pm.expect(jsonData.session_state.actions.prevActions[1]).to.have.property('valueAction');

    // Проверяем значения ключей
    pm.expect(jsonData.session_state.actions.prevActions[1].number).to.equal(2);
    pm.expect(jsonData.session_state.actions.prevActions[1].operation).to.equal("ADD_TIME");
    pm.expect(jsonData.session_state.actions.prevActions[1].prevOperation).to.equal("ADD_DAY");
    pm.expect(jsonData.session_state.actions.prevActions[1].valueAction).to.equal("ноль часов ноль");

});

        "user_id": "{{user_id}}",
        "session_id": "{{session_id}}",	
		
		        "user_id": "8783711111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "session_id": "b6dc6eee1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
		
		


 // Вывод для отладки
    console.log("Ожидаемый паттерн:", expectedPattern);
    console.log("Фактическое значение:", jsonData.response.text);		
		
_____________________ 


pm.test("1. Проверка text", function () {
    var jsonData = pm.response.json();
    
    // Проверка наличия объекта
    pm.expect(jsonData).to.have.property('response');
    
    // Проверка, что объект_тест является объектом
    pm.expect(jsonData.response).to.be.an('object');
    
    // Проверка наличия ключа внутри объекта
    pm.expect(jsonData.response).to.have.property('text');
    pm.expect(jsonData.response).to.have.property('end_session');
    
    // Проверка значения ключа внутри объекта
    pm.expect(jsonData.response.text).to.eql('Планировщик недели прощается с вами! До свидания!');
    pm.expect(jsonData.response.end_session).to.eql(false);
    });
_____________________ 
pm.expect(jsonData.response.end_session).to.eql(false);

true

//-------------------------------------------------------------------------------
pm.test("3. Проверка структуры ответа и значения 'prevActions.number'", function () {
    var jsonData = pm.response.json();

    // Проверяем наличие session_state в ответе
    pm.expect(jsonData).to.have.property('session_state');
    pm.expect(jsonData.session_state).to.be.an('object');

    // Проверяем наличие actions внутри session_state
    pm.expect(jsonData.session_state).to.have.property('actions');
    pm.expect(jsonData.session_state.actions).to.be.an('object');

    // Проверяем наличие prevActions внутри actions
    pm.expect(jsonData.session_state.actions).to.have.property('prevActions');
    pm.expect(jsonData.session_state.actions.prevActions).to.be.an('array');

    // Проверяем, что prevActions не пустой
    pm.expect(jsonData.session_state.actions.prevActions).to.have.length.above(0);

    // Проверяем наличие number в первом элементе prevActions
    pm.expect(jsonData.session_state.actions.prevActions[0]).to.have.property('number');

    // Проверяем, что number равен 0
    pm.expect(jsonData.session_state.actions.prevActions[0].number).to.equal(0);

});

//-------------------------------------------------------------------------------
pm.test("3. Проверка структуры ответа и значения 'prevActions.number'", function () {
    var jsonData = pm.response.json();

    // Проверяем наличие session_state в ответе
    pm.expect(jsonData).to.have.property('session_state');
    pm.expect(jsonData.session_state).to.be.an('object');

    // Проверяем наличие actions внутри session_state
    pm.expect(jsonData.session_state).to.have.property('actions');
    pm.expect(jsonData.session_state.actions).to.be.an('object');

    // Проверяем наличие prevActions внутри actions
    pm.expect(jsonData.session_state.actions).to.have.property('prevActions');
    pm.expect(jsonData.session_state.actions.prevActions).to.be.an('array');

    // Проверяем, что prevActions не пустой
    pm.expect(jsonData.session_state.actions.prevActions).to.have.length.above(0);

    // Проверяем ключи в первом элементе prevActions
    pm.expect(jsonData.session_state.actions.prevActions[0]).to.have.property('number');
    pm.expect(jsonData.session_state.actions.prevActions[0]).to.have.property('operation');
    pm.expect(jsonData.session_state.actions.prevActions[0]).to.have.property('valueAction');

    // Проверяем значения ключей
    pm.expect(jsonData.session_state.actions.prevActions[0].number).to.equal(0);
    pm.expect(jsonData.session_state.actions.prevActions[0].operation).to.equal("ADD_EVENT");
    pm.expect(jsonData.session_state.actions.prevActions[0].valueAction).to.equal("добавь событие");

});


//-------------------------------------------------------------------------------
pm.test("3. Проверка 'prevActions'", function () {
    var jsonData = pm.response.json();

    // Проверяем наличие session_state в ответе
    pm.expect(jsonData).to.have.property('session_state');
    pm.expect(jsonData.session_state).to.be.an('object');

    // Проверяем наличие actions внутри session_state
    pm.expect(jsonData.session_state).to.have.property('actions');
    pm.expect(jsonData.session_state.actions).to.be.an('object');

    // Проверяем наличие prevActions внутри actions
    pm.expect(jsonData.session_state.actions).to.have.property('prevActions');
    pm.expect(jsonData.session_state.actions.prevActions).to.be.an('array');

    // Проверяем, что prevActions не пустой
    pm.expect(jsonData.session_state.actions.prevActions).to.have.length.above(0);

    // Проверяем ключи в первом элементе prevActions
    pm.expect(jsonData.session_state.actions.prevActions[0]).to.have.property('number');
    pm.expect(jsonData.session_state.actions.prevActions[0]).to.have.property('operation');
    pm.expect(jsonData.session_state.actions.prevActions[0]).to.have.property('valueAction');

    // Проверяем значения ключей
    pm.expect(jsonData.session_state.actions.prevActions[0].number).to.equal(0);
    pm.expect(jsonData.session_state.actions.prevActions[0].operation).to.equal("ADD_EVENT");
    pm.expect(jsonData.session_state.actions.prevActions[0].valueAction).to.equal("добавь событие");

    // Проверяем ключи во втором элементе prevActions
    pm.expect(jsonData.session_state.actions.prevActions[1]).to.have.property('number');
    pm.expect(jsonData.session_state.actions.prevActions[1]).to.have.property('operation');
    pm.expect(jsonData.session_state.actions.prevActions[1]).to.have.property('prevOperation');
    pm.expect(jsonData.session_state.actions.prevActions[1]).to.have.property('valueAction');

    // Проверяем значения ключей
    pm.expect(jsonData.session_state.actions.prevActions[1].number).to.equal(1);
    pm.expect(jsonData.session_state.actions.prevActions[1].operation).to.equal("ADD_DAY");
    pm.expect(jsonData.session_state.actions.prevActions[1].prevOperation).to.equal("ADD_EVENT");
    pm.expect(jsonData.session_state.actions.prevActions[1].valueAction).to.equal("сегодня");

});
//-------------------------------------------------------------------------------
  pm.test("2. Значение ключей 'message_id' внутри 'session'", function () {
    var jsonData = pm.response.json();
    
    // Проверяем наличие объекта 'session' в ответе
    pm.expect(jsonData).to.have.property('session'); 
   
    // Проверяем наличие ключей внутри 'session'
	pm.expect(jsonData.session).to.have.property('message_id');
	
    // Проверяем, что значение ключей
	 pm.expect(jsonData.session.message_id).to.equal(3);
    
});

//-------------------------------------------------------------------------------

pm.test("5. Проверка структуры ответа и значений в user_state_update", function () {
    var jsonData = pm.response.json();

     // Дополнительные проверки значений
    if (jsonData.user_state_update.week.days["{{currentDate}}"][0].time !== "12:00") {
        console.log("Ошибка: ожидалось значение '01:00' для time в первом элементе, но получено", jsonData.user_state_update.week.days["{{currentDate}}"][0].time);
    }
    if (jsonData.user_state_update.week.days["{{currentDate}}"][0].name !== "Прогулка на берегу моря") {
        console.log("Ошибка: ожидалось значение 'Прогулка на берегу моря' для name в первом элементе, но получено", jsonData.user_state_update.week.days["{{currentDate}}"][0].name);
    }
	
	 if (jsonData.user_state_update.week.days["{{currentDate}}"][1].time !== "14:00") {
        console.log("Ошибка: ожидалось значение '14:00' для time во втором элементе, но получено", jsonData.user_state_update.week.days["{{currentDate}}"][1].time);	
	}
	
    if (jsonData.user_state_update.week.days["{{currentDate}}"][1].name !== "Поздний обед") {
        console.log("Ошибка: ожидалось значение 'Поздний обед' для name во втором элементе, но получено", jsonData.user_state_update.week.days["{{currentDate}}"][1].name);
    }
	

    // Проверяем наличие и тип user_state_update
    pm.expect(jsonData).to.have.property('user_state_update');
    pm.expect(jsonData.user_state_update).to.be.an('object');

    // Проверяем наличие и тип object3 внутри user_state_update
    pm.expect(jsonData.user_state_update).to.have.property('week');
    pm.expect(jsonData.user_state_update.week).to.be.an('object');

    // Проверяем наличие и тип days внутри week
    pm.expect(jsonData.user_state_update.week).to.have.property('days');
    pm.expect(jsonData.user_state_update.week.days).to.be.an('object');

    // Проверяем наличие и тип {{currentDate}} внутри days
    pm.expect(jsonData.user_state_update.week.days).to.have.property('{{currentDate}}');
    pm.expect(jsonData.user_state_update.week.days["{{currentDate}}"]).to.be.an('array');

    // Проверяем, что "{{currentDate}}" содержит 2 элемента
    pm.expect(jsonData.user_state_update.week.days["{{currentDate}}"]).to.have.lengthOf(2);

    // Проверяем первый элемент "{{currentDate}}"
    pm.expect(jsonData.user_state_update.week.days["{{currentDate}}"][0]).to.have.property('time', "12:00");
    pm.expect(jsonData.user_state_update.week.days["{{currentDate}}"][0]).to.have.property('name', "Прогулка на берегу моря");

    // Проверяем второй элемент "{{currentDate}}"
    pm.expect(jsonData.user_state_update.week.days["{{currentDate}}"][1]).to.have.property('time', "14:00");
    pm.expect(jsonData.user_state_update.week.days["{{currentDate}}"][1]).to.have.property('name', "Поздний обед");

});


//когда нет pre реквеста

pm.test("3. Проверка user_state_update", function () {
    var jsonData = pm.response.json();

     // Дополнительные проверки значений
    if (jsonData.user_state_update.week.days[formattedDate][0].time !== "00:00") {
        console.log("Ошибка: ожидалось значение '00:00' для time в первом элементе, но получено", jsonData.user_state_update.week.days[formattedDate][0].time);
    }
    if (jsonData.user_state_update.week.days[formattedDate][0].name !== "тест событие 1") {
        console.log("Ошибка: ожидалось значение 'тест событие 1' для name в первом элементе, но получено", jsonData.user_state_update.week.days[formattedDate][0].name);
    }	
	 
    // Проверяем наличие и тип user_state_update
    pm.expect(jsonData).to.have.property('user_state_update');
    pm.expect(jsonData.user_state_update).to.be.an('object');

    // Проверяем наличие и тип object3 внутри user_state_update
    pm.expect(jsonData.user_state_update).to.have.property('week');
    pm.expect(jsonData.user_state_update.week).to.be.an('object');

    // Проверяем наличие и тип days внутри week
    pm.expect(jsonData.user_state_update.week).to.have.property('days');
    pm.expect(jsonData.user_state_update.week.days).to.be.an('object');

    // Проверяем наличие и тип {{currentDate}} внутри days
    pm.expect(jsonData.user_state_update.week.days).to.have.property(formattedDate);
    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.be.an('array');

    // Проверяем, что formattedDate содержит 2 элемента
    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.have.lengthOf(1);

    // Проверяем первый элемент formattedDate
    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('time', "00:00");
    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('name', "тест событие 1");   

});

//-------------------------------------------------------------------------------
pm.test("3. Проверка структуры ответа и значений в user_state_update, pastDate и futureDate", function () {
    var jsonData = pm.response.json();

     // Дополнительные проверки значений
    if (jsonData.user_state_update.week.days[pm.variables.get('pastDate')][0].time !== "12:00") {
        console.log("Ошибка: ожидалось значение '01:00' для time в первом элементе, но получено", jsonData.user_state_update.week.days[pm.variables.get('pastDate')][0].time);
    }
    if (jsonData.user_state_update.week.days[pm.variables.get('pastDate')][0].name !== "Прогулка на берегу моря") {
        console.log("Ошибка: ожидалось значение 'Прогулка на берегу моря' для name в первом элементе, но получено", jsonData.user_state_update.week.days[pm.variables.get('pastDate')][0].name);
    }	
	if (jsonData.user_state_update.week.days[pm.variables.get('pastDate')][1].time !== "14:00") {
        console.log("Ошибка: ожидалось значение '14:00' для time во втором элементе, но получено", jsonData.user_state_update.week.days[pm.variables.get('pastDate')][1].time);	
	}	
    if (jsonData.user_state_update.week.days[pm.variables.get('pastDate')][1].name !== "Поздний обед") {
        console.log("Ошибка: ожидалось значение 'Поздний обед' для name во втором элементе, но получено", jsonData.user_state_update.week.days[pm.variables.get('pastDate')][1].name);
    }
	
	if (jsonData.user_state_update.week.days[pm.variables.get('futureDate')][0].time !== "13:30") {
        console.log("Ошибка: ожидалось значение '13:30' для time в первом элементе, но получено", jsonData.user_state_update.week.days[pm.variables.get('futureDate')][0].time);
    }
    if (jsonData.user_state_update.week.days[pm.variables.get('futureDate')][0].name !== "Приготовить асаду") {
        console.log("Ошибка: ожидалось значение 'Приготовить асаду' для name в первом элементе, но получено", jsonData.user_state_update.week.days[pm.variables.get('futureDate')][0].name);
    }
	
	 if (jsonData.user_state_update.week.days[pm.variables.get('futureDate')][1].time !== "09:10") {
        console.log("Ошибка: ожидалось значение '09:10' для time во втором элементе, но получено", jsonData.user_state_update.week.days[pm.variables.get('futureDate')][1].time);	
	}
	
    if (jsonData.user_state_update.week.days[pm.variables.get('futureDate')][1].name !== "Прогуляться по утреннему Буэнос- Айресу и выругаться по поводу эмиграции") {
        console.log("Ошибка: ожидалось значение 'Прогуляться по утреннему Буэнос- Айресу и выругаться по поводу эмиграции' для name во втором элементе, но получено", jsonData.user_state_update.week.days[pm.variables.get('futureDate')][1].name);
    }
	
    // Проверяем наличие и тип user_state_update
    pm.expect(jsonData).to.have.property('user_state_update');
    pm.expect(jsonData.user_state_update).to.be.an('object');

    // Проверяем наличие и тип object3 внутри user_state_update
    pm.expect(jsonData.user_state_update).to.have.property('week');
    pm.expect(jsonData.user_state_update.week).to.be.an('object');

    // Проверяем наличие и тип days внутри week
    pm.expect(jsonData.user_state_update.week).to.have.property('days');
    pm.expect(jsonData.user_state_update.week.days).to.be.an('object');

    // Проверяем наличие и тип {{pastDate}} внутри days
    pm.expect(jsonData.user_state_update.week.days).to.have.property(pm.variables.get('pastDate'));
    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('pastDate')]).to.be.an('array');
	
	    // Проверяем наличие и тип {{futureDate}} внутри days
    pm.expect(jsonData.user_state_update.week.days).to.have.property(pm.variables.get('futureDate'));
    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('futureDate')]).to.be.an('array');

    // Проверяем, что 'pastDate' содержит 2 элемента
    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('pastDate')]).to.have.lengthOf(2);
	
	// Проверяем, что 'futureDate' содержит 2 элемента
    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('futureDate')]).to.have.lengthOf(2);

    // Проверяем первый элемент 'pastDate'
    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('pastDate')][0]).to.have.property('time', "12:00");
    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('pastDate')][0]).to.have.property('name', "Прогулка на берегу моря");

    // Проверяем второй элемент 'pastDate'
    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('pastDate')][1]).to.have.property('time', "14:00");
    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('pastDate')][1]).to.have.property('name', "Поздний обед");
	
	// Проверяем первый элемент 'futureDate'
    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('futureDate')][0]).to.have.property('time', "13:30");
    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('futureDate')][0]).to.have.property('name', "Приготовить асаду");

    // Проверяем второй элемент 'futureDate'
    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('futureDate')][1]).to.have.property('time', "09:10");
    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('futureDate')][1]).to.have.property('name', "Прогуляться по утреннему Буэнос- Айресу и выругаться по поводу эмиграции");
});

//-------------------------------------------------------------------------------
с фунцией, когда нет пререквеста

// Генерация текущей даты в формате DD-MM-YYYY

function generateCurrentDate() {
    var currentDate = new Date();
    var day = String(currentDate.getDate()).padStart(2, '0');
    var month = String(currentDate.getMonth() + 1).padStart(2, '0'); // Январь - это 0!
    var year = currentDate.getFullYear();
    return day + '-' + month + '-' + year;
}
// 
pm.test("1. Проверка text с currentDate", function () {
    var jsonData = pm.response.json();
    var formattedDate = generateCurrentDate()

    // Создание регулярного выражения с текущей датой
    var expectedPattern = new RegExp('^Ваши события на сегодня ' + formattedDate + " 00:00 Поздний обед00, 01:00 Поздний обед01, 02:00 Поздний обед02, 03:00 Поздний обед03, 04:00 Поздний обед04, 10:00 Поздний обед10, 11:00 Поздний обед11, 12:00 Прогулка на берегу моря12, 14:00 Поздний обед14, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 17:00 Поздний обед17");

    // Проверка наличия объекта
    pm.expect(jsonData).to.have.property('response');

    // Проверка, что response является объектом
    pm.expect(jsonData.response).to.be.an('object');

    // Проверка наличия ключа внутри объекта
    pm.expect(jsonData.response).to.have.property('text');
    pm.expect(jsonData.response).to.have.property('end_session');

    // Проверка значения ключа внутри объекта
    pm.expect(jsonData.response.text).to.match(expectedPattern);
    pm.expect(jsonData.response.end_session).to.eql(false);

});
//-------------------------------------------------------------------------------




//-------------------------------------------------------------------------------
pm.test("0.2 Значение ключей user_id, session_id внутри 'session'", function () {
    var jsonData = pm.response.json();
    
    // Проверяем наличие объекта 'session' в ответе
    pm.expect(jsonData).to.have.property('session');
    
    // Проверяем наличие ключей'  
    pm.expect(jsonData.session).to.have.property('user_id');
     pm.expect(jsonData.session).to.have.property('session_id');
    
    // Проверяем значения ключей 
    pm.expect(jsonData.session.user_id).to.equal('b4fde534');
    pm.expect(jsonData.session.session_id).to.equal('ffb392fd');  
});

//-------------------------------------------------------------------------------

pm.test("1. Проверка text", function () {
    var jsonData = pm.response.json();
    
    // Генерация текущей даты в формате DD-MM-YYYY
    var currentDate = new Date();
    var day = String(currentDate.getDate()).padStart(2, '0');
    var month = String(currentDate.getMonth() + 1).padStart(2, '0'); // Январь - это 0!
    var year = currentDate.getFullYear();
    var formattedDate = day + '-' + month + '-' + year;
    
    // Создание регулярного выражения с текущей датой
    var expectedPattern = new RegExp('^Ваши события на сегодня ' + formattedDate + ' 12:00 Прогулка на берегу моря, 14:00 Поздний обед');
    
    // Проверка наличия объекта
    pm.expect(jsonData).to.have.property('response');
    
    // Проверка, что response является объектом
    pm.expect(jsonData.response).to.be.an('object');
    
    // Проверка наличия ключа внутри объекта
    pm.expect(jsonData.response).to.have.property('text');
    
    // Проверка значения ключа внутри объекта
    pm.expect(jsonData.response.text).to.match(expectedPattern);   
   
});

//-------------------------------------------------------------------------------
pm.test("1. Проверка text", function () {
    var jsonData = pm.response.json();
    
    
    // Создание регулярного выражения с текущей датой
    var expectedPattern = new RegExp('^Ваши события ' + pm.variables.get('pastDate') + ' 17:00 Велосипедная прогулка, 20:00 Ужин, ' + pm.variables.get('curDate') + ' 17:00 Ужин, 17:01 Велосипедная прогулка, ' + pm.variables.get('futureDate') + ' 09:00 Поздний обед, 15:00 Прогулка на берегу моря');
    
    // Проверка наличия объекта
    pm.expect(jsonData).to.have.property('response');
    
    // Проверка, что response является объектом
    pm.expect(jsonData.response).to.be.an('object');
    
    // Проверка наличия ключа внутри объекта
    pm.expect(jsonData.response).to.have.property('text');
    
    // Проверка значения ключа внутри объекта
    pm.expect(jsonData.response.text).to.match(expectedPattern);   
   
});
//-------------------------------------------------------------------------------
pm.test("1. Проверка text", function () {
    var jsonData = pm.response.json();
    
    
    // Создание регулярного выражения с текущей датой
    var expectedPattern = new RegExp('^Событие успешно добавлено на ' + pm.variables.get('curDate') + ' 00:00 тест событие 1! Выполнен выход в главное меню ');
    
    // Проверка наличия объекта
    pm.expect(jsonData).to.have.property('response');
    
    // Проверка, что response является объектом
    pm.expect(jsonData.response).to.be.an('object');
    
    // Проверка наличия ключа внутри объекта
    pm.expect(jsonData.response).to.have.property('text');
	pm.expect(jsonData.response).to.have.property('end_session');
    
    // Проверка значения ключа внутри объекта
    pm.expect(jsonData.response.text).to.match(expectedPattern); 
	pm.expect(jsonData.response.end_session).to.eql(false);
   
});

//------------------------------------------------------------------------------


pm.test("1. Проверка text с currentDate", function () {
    var jsonData = pm.response.json();

    // Генерация текущей даты в формате DD-MM-YYYY
    var currentDate = new Date();
    var day = String(currentDate.getDate()).padStart(2, '0');
    var month = String(currentDate.getMonth() + 1).padStart(2, '0'); // Январь - это 0!
    var year = currentDate.getFullYear();
    var formattedDate = day + '-' + month + '-' + year;

    // Создание регулярного выражения с текущей датой
    var expectedPattern = new RegExp('^Событие успешно добавлено на ' + formattedDate + " 00:00 тест событие 1! Выполнен выход в главное меню ");

    // Проверка наличия объекта
    pm.expect(jsonData).to.have.property('response');

    // Проверка, что response является объектом
    pm.expect(jsonData.response).to.be.an('object');

    // Проверка наличия ключа внутри объекта
    pm.expect(jsonData.response).to.have.property('text');
    pm.expect(jsonData.response).to.have.property('end_session');

    // Проверка значения ключа внутри объекта
    pm.expect(jsonData.response.text).to.match(expectedPattern);
    pm.expect(jsonData.response.end_session).to.eql(false);

});

//------------------------------------------------------------------------------

pm.test("1. Проверка text", function () {
    let jsonData = pm.response.json();

    // Получаем день недели из запроса
    let requestBody = JSON.parse(pm.request.body.raw);
    let actions =  requestBody.state.session.actions;
     console.log(actions);

    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction
     
    let command = requestBody.request.command;
    let is_valid_command = jsonData.response.text.includes(command);
   

    // Функция для получения следующей даты определенного дня недели
    function getNextvalueAction(dayName) {
        const days = ['воскресенье', 'понедельник', 'вторник', 'среда', 'четверг', 'пятница', 'суббота'];
        const today = new Date();
        const dayIndex = days.indexOf(dayName);
        if (dayIndex === -1) return null;
        
        const targetDate = new Date(today);
        targetDate.setDate(today.getDate() + (dayIndex + 7 - today.getDay()) % 7);
        return targetDate;
    }
    
    // Получаем ближайшую дату для указанного дня недели
    let targetDate = getNextvalueAction(valueAction);
    console.log(targetDate);
   
    // Форматируем дату в DD-MM-YYYY
    let formattedDate = targetDate.getDate().toString().padStart(2, '0') + '-' +
                        (targetDate.getMonth() + 1).toString().padStart(2, '0') + '-' +
                        targetDate.getFullYear();
   

 /*   let is_expect_date = jsonData.response.text.includes("Событие успешно добавлено на " + formattedDate);
    console.log("Ожидаемая дата?:", is_expect_date);  
 */
     // Создание регулярного выражения с ожидаемой датой
    let expectedPattern = new RegExp('^Событие успешно добавлено на ' + formattedDate + " 00:00 тест событие 1! Выполнен выход в главное меню ");

    
    // Проверка command
    pm.expect(jsonData).to.have.property('response');
    
    // Проверка, что response является объектом
    pm.expect(jsonData.response).to.be.an('object');
    
    // Проверка наличия ключа внутри объекта
    pm.expect(jsonData.response).to.have.property('text');
    pm.expect(jsonData.response).to.have.property('end_session');
    
    // Проверка значения ключа внутри объекта
    pm.expect(jsonData.response.text).to.match(expectedPattern);
    pm.expect(jsonData.response.text).to.include(command); 
    pm.expect(jsonData.response.end_session).to.eql(false);

});

_________________ 
pm.test("3. Проверка'days' {}", function () {
    var jsonData = pm.response.json();
    
    // Проверяем наличие user_state_update в ответе
    pm.expect(jsonData).to.have.property('user_state_update');
    pm.expect(jsonData.user_state_update).to.be.an('object');

    // Проверяем наличие week внутри user_state_update
    pm.expect(jsonData.user_state_update).to.have.property('week');
    pm.expect(jsonData.user_state_update.week).to.be.an('object');

    // Проверяем наличие days внутри week
    pm.expect(jsonData.user_state_update.week).to.have.property('days');

    // Проверяем, что days является пустым объектом
    pm.expect(jsonData.user_state_update.week.days).to.be.an('object').that.is.empty;   
});

//---------------------------------------------------------------------------
Функция 
// Генерация текущей даты в формате DD-MM-YYYY

function generateCurrentDate() {
    var currentDate = new Date();
    var day = String(currentDate.getDate()).padStart(2, '0');
    var month = String(currentDate.getMonth() + 1).padStart(2, '0'); // Январь - это 0!
    var year = currentDate.getFullYear();
    return day + '-' + month + '-' + year;
}
// --------------------------------------------------------------------------
pm.test("1. Проверка text с currentDate", function () {
    var jsonData = pm.response.json();
    var formattedDate = generateCurrentDate()

    // Создание регулярного выражения с текущей датой
    var expectedPattern = new RegExp('^Событие успешно добавлено на ' + formattedDate + " 00:00 тест событие 1! Выполнен выход в главное меню ");

    // Проверка наличия объекта
    pm.expect(jsonData).to.have.property('response');

    // Проверка, что response является объектом
    pm.expect(jsonData.response).to.be.an('object');

    // Проверка наличия ключа внутри объекта
    pm.expect(jsonData.response).to.have.property('text');
    pm.expect(jsonData.response).to.have.property('end_session');

    // Проверка значения ключа внутри объекта
    pm.expect(jsonData.response.text).to.match(expectedPattern);
    pm.expect(jsonData.response.end_session).to.eql(false);

});
//-------------------------------------------------------------------------------
  pm.test("2. Значение ключей 'message_id' внутри 'session'", function () {
    var jsonData = pm.response.json();
    
    // Проверяем наличие объекта 'session' в ответе
    pm.expect(jsonData).to.have.property('session'); 
   
    // Проверяем наличие ключей внутри 'session'
	pm.expect(jsonData.session).to.have.property('message_id');
	
    // Проверяем, что значение ключей
	 pm.expect(jsonData.session.message_id).to.equal(3);
    
});
//------------------------------------------------------------------------------

pm.test("3. Проверка user_state_update", function () {
    var jsonData = pm.response.json();
    var formattedDate = generateCurrentDate()

    // Дополнительные проверки значений
    if (jsonData.user_state_update.week.days[formattedDate][0].time !== "00:00") {
        console.log("Ошибка: ожидалось значение '00:00' для time в первом элементе, но получено", jsonData.user_state_update.week.days[formattedDate][0].time);
    }
    if (jsonData.user_state_update.week.days[formattedDate][0].name !== "тест событие 1") {
        console.log("Ошибка: ожидалось значение 'тест событие 1' для name в первом элементе, но получено", jsonData.user_state_update.week.days[formattedDate][0].name);
    }	
    
    // Проверяем наличие и тип user_state_update
    pm.expect(jsonData).to.have.property('user_state_update');
    pm.expect(jsonData.user_state_update).to.be.an('object');

    // Проверяем наличие и тип object3 внутри user_state_update
    pm.expect(jsonData.user_state_update).to.have.property('week');
    pm.expect(jsonData.user_state_update.week).to.be.an('object');

    // Проверяем наличие и тип days внутри week
    pm.expect(jsonData.user_state_update.week).to.have.property('days');
    pm.expect(jsonData.user_state_update.week.days).to.be.an('object');

    // Проверяем наличие и тип {{currentDate}} внутри days
    pm.expect(jsonData.user_state_update.week.days).to.have.property(formattedDate);
    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.be.an('array');

    // Проверяем, что formattedDate содержит 2 элемента
    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.have.lengthOf(1);

    // Проверяем первый элемент formattedDate
    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('time', "00:00");
    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('name', "тест событие 1");  
});


//-------------------------------------------------------------------------------
pm.test("4. Проверка отсутствия user_state_update", function () {
    var jsonData = pm.response.json();
    pm.expect(jsonData).to.not.have.property('user_state_update');
});

_____________________________________ 
{
                        "number": 0,
                        "valueAction": "добавь событие",
                        "operation": "ADD_EVENT"
                    },
                    {
                        "number": 1,
                        "prevOperation": "ADD_EVENT",
                        "valueAction": "вторник",
                        "operation": "ADD_DAY"
                    },
                    {
                        "number": 2,
                        "prevOperation": "ADD_DAY",
                        "valueAction": "десять часов",
                        "operation": "ADD_TIME"
                    }
					
					
__________________________________________
исправление для текущей даты от AI 

pm.test("1. Проверка text", function () {
    var jsonData = pm.response.json();

    // Получаем день недели из запроса
    let requestBody = JSON.parse(pm.request.body.raw);
    let actions =  requestBody.state.session.actions;

    var valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction

    // Функция для получения следующей даты определенного дня недели
    function getNextvalueAction(dayName) {
        const days = ['воскресенье', 'понедельник', 'вторник', 'среда', 'четверг', 'пятница', 'суббота'];
        const today = new Date();
        const dayIndex = days.indexOf(dayName);
        if (dayIndex === -1) return null;
        
        const targetDate = new Date(today);
        targetDate.setDate(today.getDate() + (dayIndex + 7 - today.getDay()) % 7);
        return targetDate;
    }
    
    // Получаем ближайшую дату для указанного дня недели
    var targetDate = getNextvalueAction(valueAction);
    if (!targetDate) {
        console.log("Некорректное значение дня недели");
        return; // Exit the test if the day name is incorrect
    }
    console.log(targetDate);
   
    // Форматируем дату в DD-MM-YYYY
    var formattedDate = targetDate.getDate().toString().padStart(2, '0') + '-' +
                        (targetDate.getMonth() + 1).toString().padStart(2, '0') + '-' +
                        targetDate.getFullYear();
    console.log("Ожидаемая дата:", formattedDate);  


     // Создание регулярного выражения с ожидаемой датой
    var expectedPattern = new RegExp('^Событие успешно добавлено на ' + formattedDate );

    
    // Проверка наличия объекта
    pm.expect(jsonData).to.have.property('response');
    
    // Проверка, что response является объектом
    pm.expect(jsonData.response).to.be.an('object');
    
    // Проверка наличия ключа внутри объекта
    pm.expect(jsonData.response).to.have.property('text');
    pm.expect(jsonData.response).to.have.property('end_session');
    
    // Проверка значения ключа внутри объекта
    pm.expect(jsonData.response.text).to.match(expectedPattern);
    pm.expect(jsonData.response.end_session).to.eql(false);

});


//-------------------------------------------------------------------------------
pm.test("3. Проверка 'prevActions'", function () {
    var jsonData = pm.response.json();

    // Проверяем наличие session_state в ответе
    pm.expect(jsonData).to.have.property('session_state');
    pm.expect(jsonData.session_state).to.be.an('object');

    // Проверяем наличие actions внутри session_state
    pm.expect(jsonData.session_state).to.have.property('actions');
    pm.expect(jsonData.session_state.actions).to.be.an('object');

    // Проверяем наличие prevActions внутри actions
    pm.expect(jsonData.session_state.actions).to.have.property('prevActions');
    pm.expect(jsonData.session_state.actions.prevActions).to.be.an('array');

    // Проверяем, что prevActions не пустой
    pm.expect(jsonData.session_state.actions.prevActions).to.have.length.above(0);

    // Проверяем ключи в первом элементе prevActions
    pm.expect(jsonData.session_state.actions.prevActions[0]).to.have.property('number');
    pm.expect(jsonData.session_state.actions.prevActions[0]).to.have.property('operation');
    pm.expect(jsonData.session_state.actions.prevActions[0]).to.have.property('valueAction');

    // Проверяем значения ключей
    pm.expect(jsonData.session_state.actions.prevActions[0].number).to.equal(0);
    pm.expect(jsonData.session_state.actions.prevActions[0].operation).to.equal("ADD_EVENT");
    pm.expect(jsonData.session_state.actions.prevActions[0].valueAction).to.equal("добавь событие");

    // Проверяем ключи во втором элементе prevActions
    pm.expect(jsonData.session_state.actions.prevActions[1]).to.have.property('number');
    pm.expect(jsonData.session_state.actions.prevActions[1]).to.have.property('operation');
    pm.expect(jsonData.session_state.actions.prevActions[1]).to.have.property('prevOperation');
    pm.expect(jsonData.session_state.actions.prevActions[1]).to.have.property('valueAction');

    // Проверяем значения ключей
    pm.expect(jsonData.session_state.actions.prevActions[1].number).to.equal(1);
    pm.expect(jsonData.session_state.actions.prevActions[1].operation).to.equal("ADD_DAY");
    pm.expect(jsonData.session_state.actions.prevActions[1].prevOperation).to.equal("ADD_EVENT");
    pm.expect(jsonData.session_state.actions.prevActions[1].valueAction).to.equal("сегодня");

        // Проверяем ключи во третьем элементе prevActions
    pm.expect(jsonData.session_state.actions.prevActions[1]).to.have.property('number');
    pm.expect(jsonData.session_state.actions.prevActions[1]).to.have.property('operation');
    pm.expect(jsonData.session_state.actions.prevActions[1]).to.have.property('prevOperation');
    pm.expect(jsonData.session_state.actions.prevActions[1]).to.have.property('valueAction');

    // Проверяем значения ключей
    pm.expect(jsonData.session_state.actions.prevActions[1].number).to.equal(2);
    pm.expect(jsonData.session_state.actions.prevActions[1].operation).to.equal("ADD_TIME");
    pm.expect(jsonData.session_state.actions.prevActions[1].prevOperation).to.equal("ADD_DAY");
    pm.expect(jsonData.session_state.actions.prevActions[1].valueAction).to.equal("ноль часов ноль");

});

        "user_id": "{{user_id}}",
        "session_id": "{{session_id}}",	
		
		        "user_id": "8783711111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "session_id": "b6dc6eee1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
		
		


 // Вывод для отладки
    console.log("Ожидаемый паттерн:", expectedPattern);
    console.log("Фактическое значение:", jsonData.response.text);		
		
_____________________ 


pm.test("1. Проверка text", function () {
    var jsonData = pm.response.json();
    
    // Проверка наличия объекта
    pm.expect(jsonData).to.have.property('response');
    
    // Проверка, что объект_тест является объектом
    pm.expect(jsonData.response).to.be.an('object');
    
    // Проверка наличия ключа внутри объекта
    pm.expect(jsonData.response).to.have.property('text');
    pm.expect(jsonData.response).to.have.property('end_session');
    
    // Проверка значения ключа внутри объекта
    pm.expect(jsonData.response.text).to.eql('Планировщик недели прощается с вами! До свидания!');
    pm.expect(jsonData.response.end_session).to.eql(false);
    });
_____________________ 
pm.expect(jsonData.response.end_session).to.eql(false);

true

//-------------------------------------------------------------------------------
pm.test("3. Проверка структуры ответа и значения 'prevActions.number'", function () {
    var jsonData = pm.response.json();

    // Проверяем наличие session_state в ответе
    pm.expect(jsonData).to.have.property('session_state');
    pm.expect(jsonData.session_state).to.be.an('object');

    // Проверяем наличие actions внутри session_state
    pm.expect(jsonData.session_state).to.have.property('actions');
    pm.expect(jsonData.session_state.actions).to.be.an('object');

    // Проверяем наличие prevActions внутри actions
    pm.expect(jsonData.session_state.actions).to.have.property('prevActions');
    pm.expect(jsonData.session_state.actions.prevActions).to.be.an('array');

    // Проверяем, что prevActions не пустой
    pm.expect(jsonData.session_state.actions.prevActions).to.have.length.above(0);

    // Проверяем наличие number в первом элементе prevActions
    pm.expect(jsonData.session_state.actions.prevActions[0]).to.have.property('number');

    // Проверяем, что number равен 0
    pm.expect(jsonData.session_state.actions.prevActions[0].number).to.equal(0);

});

//-------------------------------------------------------------------------------
pm.test("3. Проверка структуры ответа и значения 'prevActions.number'", function () {
    var jsonData = pm.response.json();

    // Проверяем наличие session_state в ответе
    pm.expect(jsonData).to.have.property('session_state');
    pm.expect(jsonData.session_state).to.be.an('object');

    // Проверяем наличие actions внутри session_state
    pm.expect(jsonData.session_state).to.have.property('actions');
    pm.expect(jsonData.session_state.actions).to.be.an('object');

    // Проверяем наличие prevActions внутри actions
    pm.expect(jsonData.session_state.actions).to.have.property('prevActions');
    pm.expect(jsonData.session_state.actions.prevActions).to.be.an('array');

    // Проверяем, что prevActions не пустой
    pm.expect(jsonData.session_state.actions.prevActions).to.have.length.above(0);

    // Проверяем ключи в первом элементе prevActions
    pm.expect(jsonData.session_state.actions.prevActions[0]).to.have.property('number');
    pm.expect(jsonData.session_state.actions.prevActions[0]).to.have.property('operation');
    pm.expect(jsonData.session_state.actions.prevActions[0]).to.have.property('valueAction');

    // Проверяем значения ключей
    pm.expect(jsonData.session_state.actions.prevActions[0].number).to.equal(0);
    pm.expect(jsonData.session_state.actions.prevActions[0].operation).to.equal("ADD_EVENT");
    pm.expect(jsonData.session_state.actions.prevActions[0].valueAction).to.equal("добавь событие");

});


//-------------------------------------------------------------------------------
pm.test("3. Проверка 'prevActions'", function () {
    var jsonData = pm.response.json();

    // Проверяем наличие session_state в ответе
    pm.expect(jsonData).to.have.property('session_state');
    pm.expect(jsonData.session_state).to.be.an('object');

    // Проверяем наличие actions внутри session_state
    pm.expect(jsonData.session_state).to.have.property('actions');
    pm.expect(jsonData.session_state.actions).to.be.an('object');

    // Проверяем наличие prevActions внутри actions
    pm.expect(jsonData.session_state.actions).to.have.property('prevActions');
    pm.expect(jsonData.session_state.actions.prevActions).to.be.an('array');

    // Проверяем, что prevActions не пустой
    pm.expect(jsonData.session_state.actions.prevActions).to.have.length.above(0);

    // Проверяем ключи в первом элементе prevActions
    pm.expect(jsonData.session_state.actions.prevActions[0]).to.have.property('number');
    pm.expect(jsonData.session_state.actions.prevActions[0]).to.have.property('operation');
    pm.expect(jsonData.session_state.actions.prevActions[0]).to.have.property('valueAction');

    // Проверяем значения ключей
    pm.expect(jsonData.session_state.actions.prevActions[0].number).to.equal(0);
    pm.expect(jsonData.session_state.actions.prevActions[0].operation).to.equal("ADD_EVENT");
    pm.expect(jsonData.session_state.actions.prevActions[0].valueAction).to.equal("добавь событие");

    // Проверяем ключи во втором элементе prevActions
    pm.expect(jsonData.session_state.actions.prevActions[1]).to.have.property('number');
    pm.expect(jsonData.session_state.actions.prevActions[1]).to.have.property('operation');
    pm.expect(jsonData.session_state.actions.prevActions[1]).to.have.property('prevOperation');
    pm.expect(jsonData.session_state.actions.prevActions[1]).to.have.property('valueAction');

    // Проверяем значения ключей
    pm.expect(jsonData.session_state.actions.prevActions[1].number).to.equal(1);
    pm.expect(jsonData.session_state.actions.prevActions[1].operation).to.equal("ADD_DAY");
    pm.expect(jsonData.session_state.actions.prevActions[1].prevOperation).to.equal("ADD_EVENT");
    pm.expect(jsonData.session_state.actions.prevActions[1].valueAction).to.equal("сегодня");

});
//-------------------------------------------------------------------------------
  pm.test("2. Значение ключей 'message_id' внутри 'session'", function () {
    var jsonData = pm.response.json();
    
    // Проверяем наличие объекта 'session' в ответе
    pm.expect(jsonData).to.have.property('session'); 
   
    // Проверяем наличие ключей внутри 'session'
	pm.expect(jsonData.session).to.have.property('message_id');
	
    // Проверяем, что значение ключей
	 pm.expect(jsonData.session.message_id).to.equal(3);
    
});

//-------------------------------------------------------------------------------

pm.test("5. Проверка структуры ответа и значений в user_state_update", function () {
    var jsonData = pm.response.json();

     // Дополнительные проверки значений
    if (jsonData.user_state_update.week.days["{{currentDate}}"][0].time !== "12:00") {
        console.log("Ошибка: ожидалось значение '01:00' для time в первом элементе, но получено", jsonData.user_state_update.week.days["{{currentDate}}"][0].time);
    }
    if (jsonData.user_state_update.week.days["{{currentDate}}"][0].name !== "Прогулка на берегу моря") {
        console.log("Ошибка: ожидалось значение 'Прогулка на берегу моря' для name в первом элементе, но получено", jsonData.user_state_update.week.days["{{currentDate}}"][0].name);
    }
	
	 if (jsonData.user_state_update.week.days["{{currentDate}}"][1].time !== "14:00") {
        console.log("Ошибка: ожидалось значение '14:00' для time во втором элементе, но получено", jsonData.user_state_update.week.days["{{currentDate}}"][1].time);	
	}
	
    if (jsonData.user_state_update.week.days["{{currentDate}}"][1].name !== "Поздний обед") {
        console.log("Ошибка: ожидалось значение 'Поздний обед' для name во втором элементе, но получено", jsonData.user_state_update.week.days["{{currentDate}}"][1].name);
    }
	

    // Проверяем наличие и тип user_state_update
    pm.expect(jsonData).to.have.property('user_state_update');
    pm.expect(jsonData.user_state_update).to.be.an('object');

    // Проверяем наличие и тип object3 внутри user_state_update
    pm.expect(jsonData.user_state_update).to.have.property('week');
    pm.expect(jsonData.user_state_update.week).to.be.an('object');

    // Проверяем наличие и тип days внутри week
    pm.expect(jsonData.user_state_update.week).to.have.property('days');
    pm.expect(jsonData.user_state_update.week.days).to.be.an('object');

    // Проверяем наличие и тип {{currentDate}} внутри days
    pm.expect(jsonData.user_state_update.week.days).to.have.property('{{currentDate}}');
    pm.expect(jsonData.user_state_update.week.days["{{currentDate}}"]).to.be.an('array');

    // Проверяем, что "{{currentDate}}" содержит 2 элемента
    pm.expect(jsonData.user_state_update.week.days["{{currentDate}}"]).to.have.lengthOf(2);

    // Проверяем первый элемент "{{currentDate}}"
    pm.expect(jsonData.user_state_update.week.days["{{currentDate}}"][0]).to.have.property('time', "12:00");
    pm.expect(jsonData.user_state_update.week.days["{{currentDate}}"][0]).to.have.property('name', "Прогулка на берегу моря");

    // Проверяем второй элемент "{{currentDate}}"
    pm.expect(jsonData.user_state_update.week.days["{{currentDate}}"][1]).to.have.property('time', "14:00");
    pm.expect(jsonData.user_state_update.week.days["{{currentDate}}"][1]).to.have.property('name', "Поздний обед");

});


//когда нет pre реквеста

pm.test("3. Проверка user_state_update", function () {
    var jsonData = pm.response.json();

     // Дополнительные проверки значений
    if (jsonData.user_state_update.week.days[formattedDate][0].time !== "00:00") {
        console.log("Ошибка: ожидалось значение '00:00' для time в первом элементе, но получено", jsonData.user_state_update.week.days[formattedDate][0].time);
    }
    if (jsonData.user_state_update.week.days[formattedDate][0].name !== "тест событие 1") {
        console.log("Ошибка: ожидалось значение 'тест событие 1' для name в первом элементе, но получено", jsonData.user_state_update.week.days[formattedDate][0].name);
    }	
	 
    // Проверяем наличие и тип user_state_update
    pm.expect(jsonData).to.have.property('user_state_update');
    pm.expect(jsonData.user_state_update).to.be.an('object');

    // Проверяем наличие и тип object3 внутри user_state_update
    pm.expect(jsonData.user_state_update).to.have.property('week');
    pm.expect(jsonData.user_state_update.week).to.be.an('object');

    // Проверяем наличие и тип days внутри week
    pm.expect(jsonData.user_state_update.week).to.have.property('days');
    pm.expect(jsonData.user_state_update.week.days).to.be.an('object');

    // Проверяем наличие и тип {{currentDate}} внутри days
    pm.expect(jsonData.user_state_update.week.days).to.have.property(formattedDate);
    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.be.an('array');

    // Проверяем, что formattedDate содержит 2 элемента
    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.have.lengthOf(1);

    // Проверяем первый элемент formattedDate
    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('time', "00:00");
    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('name', "тест событие 1");   

});

//-------------------------------------------------------------------------------
pm.test("3. Проверка структуры ответа и значений в user_state_update, pastDate и futureDate", function () {
    var jsonData = pm.response.json();

     // Дополнительные проверки значений
    if (jsonData.user_state_update.week.days[pm.variables.get('pastDate')][0].time !== "12:00") {
        console.log("Ошибка: ожидалось значение '01:00' для time в первом элементе, но получено", jsonData.user_state_update.week.days[pm.variables.get('pastDate')][0].time);
    }
    if (jsonData.user_state_update.week.days[pm.variables.get('pastDate')][0].name !== "Прогулка на берегу моря") {
        console.log("Ошибка: ожидалось значение 'Прогулка на берегу моря' для name в первом элементе, но получено", jsonData.user_state_update.week.days[pm.variables.get('pastDate')][0].name);
    }	
	if (jsonData.user_state_update.week.days[pm.variables.get('pastDate')][1].time !== "14:00") {
        console.log("Ошибка: ожидалось значение '14:00' для time во втором элементе, но получено", jsonData.user_state_update.week.days[pm.variables.get('pastDate')][1].time);	
	}	
    if (jsonData.user_state_update.week.days[pm.variables.get('pastDate')][1].name !== "Поздний обед") {
        console.log("Ошибка: ожидалось значение 'Поздний обед' для name во втором элементе, но получено", jsonData.user_state_update.week.days[pm.variables.get('pastDate')][1].name);
    }
	
	if (jsonData.user_state_update.week.days[pm.variables.get('futureDate')][0].time !== "13:30") {
        console.log("Ошибка: ожидалось значение '13:30' для time в первом элементе, но получено", jsonData.user_state_update.week.days[pm.variables.get('futureDate')][0].time);
    }
    if (jsonData.user_state_update.week.days[pm.variables.get('futureDate')][0].name !== "Приготовить асаду") {
        console.log("Ошибка: ожидалось значение 'Приготовить асаду' для name в первом элементе, но получено", jsonData.user_state_update.week.days[pm.variables.get('futureDate')][0].name);
    }
	
	 if (jsonData.user_state_update.week.days[pm.variables.get('futureDate')][1].time !== "09:10") {
        console.log("Ошибка: ожидалось значение '09:10' для time во втором элементе, но получено", jsonData.user_state_update.week.days[pm.variables.get('futureDate')][1].time);	
	}
	
    if (jsonData.user_state_update.week.days[pm.variables.get('futureDate')][1].name !== "Прогуляться по утреннему Буэнос- Айресу и выругаться по поводу эмиграции") {
        console.log("Ошибка: ожидалось значение 'Прогуляться по утреннему Буэнос- Айресу и выругаться по поводу эмиграции' для name во втором элементе, но получено", jsonData.user_state_update.week.days[pm.variables.get('futureDate')][1].name);
    }
	
    // Проверяем наличие и тип user_state_update
    pm.expect(jsonData).to.have.property('user_state_update');
    pm.expect(jsonData.user_state_update).to.be.an('object');

    // Проверяем наличие и тип object3 внутри user_state_update
    pm.expect(jsonData.user_state_update).to.have.property('week');
    pm.expect(jsonData.user_state_update.week).to.be.an('object');

    // Проверяем наличие и тип days внутри week
    pm.expect(jsonData.user_state_update.week).to.have.property('days');
    pm.expect(jsonData.user_state_update.week.days).to.be.an('object');

    // Проверяем наличие и тип {{pastDate}} внутри days
    pm.expect(jsonData.user_state_update.week.days).to.have.property(pm.variables.get('pastDate'));
    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('pastDate')]).to.be.an('array');
	
	    // Проверяем наличие и тип {{futureDate}} внутри days
    pm.expect(jsonData.user_state_update.week.days).to.have.property(pm.variables.get('futureDate'));
    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('futureDate')]).to.be.an('array');

    // Проверяем, что 'pastDate' содержит 2 элемента
    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('pastDate')]).to.have.lengthOf(2);
	
	// Проверяем, что 'futureDate' содержит 2 элемента
    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('futureDate')]).to.have.lengthOf(2);

    // Проверяем первый элемент 'pastDate'
    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('pastDate')][0]).to.have.property('time', "12:00");
    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('pastDate')][0]).to.have.property('name', "Прогулка на берегу моря");

    // Проверяем второй элемент 'pastDate'
    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('pastDate')][1]).to.have.property('time', "14:00");
    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('pastDate')][1]).to.have.property('name', "Поздний обед");
	
	// Проверяем первый элемент 'futureDate'
    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('futureDate')][0]).to.have.property('time', "13:30");
    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('futureDate')][0]).to.have.property('name', "Приготовить асаду");

    // Проверяем второй элемент 'futureDate'
    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('futureDate')][1]).to.have.property('time', "09:10");
    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('futureDate')][1]).to.have.property('name', "Прогуляться по утреннему Буэнос- Айресу и выругаться по поводу эмиграции");
});

//-------------------------------------------------------------------------------
с фунцией, когда нет пререквеста

// Генерация текущей даты в формате DD-MM-YYYY

function generateCurrentDate() {
    var currentDate = new Date();
    var day = String(currentDate.getDate()).padStart(2, '0');
    var month = String(currentDate.getMonth() + 1).padStart(2, '0'); // Январь - это 0!
    var year = currentDate.getFullYear();
    return day + '-' + month + '-' + year;
}
// 
pm.test("1. Проверка text с currentDate", function () {
    var jsonData = pm.response.json();
    var formattedDate = generateCurrentDate()

    // Создание регулярного выражения с текущей датой
    var expectedPattern = new RegExp('^Ваши события на сегодня ' + formattedDate + " 00:00 Поздний обед00, 01:00 Поздний обед01, 02:00 Поздний обед02, 03:00 Поздний обед03, 04:00 Поздний обед04, 10:00 Поздний обед10, 11:00 Поздний обед11, 12:00 Прогулка на берегу моря12, 14:00 Поздний обед14, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 17:00 Поздний обед17");

    // Проверка наличия объекта
    pm.expect(jsonData).to.have.property('response');

    // Проверка, что response является объектом
    pm.expect(jsonData.response).to.be.an('object');

    // Проверка наличия ключа внутри объекта
    pm.expect(jsonData.response).to.have.property('text');
    pm.expect(jsonData.response).to.have.property('end_session');

    // Проверка значения ключа внутри объекта
    pm.expect(jsonData.response.text).to.match(expectedPattern);
    pm.expect(jsonData.response.end_session).to.eql(false);

});
//-------------------------------------------------------------------------------




//-------------------------------------------------------------------------------
pm.test("0.2 Значение ключей user_id, session_id внутри 'session'", function () {
    var jsonData = pm.response.json();
    
    // Проверяем наличие объекта 'session' в ответе
    pm.expect(jsonData).to.have.property('session');
    
    // Проверяем наличие ключей'  
    pm.expect(jsonData.session).to.have.property('user_id');
     pm.expect(jsonData.session).to.have.property('session_id');
    
    // Проверяем значения ключей 
    pm.expect(jsonData.session.user_id).to.equal('b4fde534');
    pm.expect(jsonData.session.session_id).to.equal('ffb392fd');  
});

//-------------------------------------------------------------------------------

pm.test("1. Проверка text", function () {
    var jsonData = pm.response.json();
    
    // Генерация текущей даты в формате DD-MM-YYYY
    var currentDate = new Date();
    var day = String(currentDate.getDate()).padStart(2, '0');
    var month = String(currentDate.getMonth() + 1).padStart(2, '0'); // Январь - это 0!
    var year = currentDate.getFullYear();
    var formattedDate = day + '-' + month + '-' + year;
    
    // Создание регулярного выражения с текущей датой
    var expectedPattern = new RegExp('^Ваши события на сегодня ' + formattedDate + ' 12:00 Прогулка на берегу моря, 14:00 Поздний обед');
    
    // Проверка наличия объекта
    pm.expect(jsonData).to.have.property('response');
    
    // Проверка, что response является объектом
    pm.expect(jsonData.response).to.be.an('object');
    
    // Проверка наличия ключа внутри объекта
    pm.expect(jsonData.response).to.have.property('text');
    
    // Проверка значения ключа внутри объекта
    pm.expect(jsonData.response.text).to.match(expectedPattern);   
   
});

//-------------------------------------------------------------------------------
pm.test("1. Проверка text", function () {
    var jsonData = pm.response.json();
    
    
    // Создание регулярного выражения с текущей датой
    var expectedPattern = new RegExp('^Ваши события ' + pm.variables.get('pastDate') + ' 17:00 Велосипедная прогулка, 20:00 Ужин, ' + pm.variables.get('curDate') + ' 17:00 Ужин, 17:01 Велосипедная прогулка, ' + pm.variables.get('futureDate') + ' 09:00 Поздний обед, 15:00 Прогулка на берегу моря');
    
    // Проверка наличия объекта
    pm.expect(jsonData).to.have.property('response');
    
    // Проверка, что response является объектом
    pm.expect(jsonData.response).to.be.an('object');
    
    // Проверка наличия ключа внутри объекта
    pm.expect(jsonData.response).to.have.property('text');
    
    // Проверка значения ключа внутри объекта
    pm.expect(jsonData.response.text).to.match(expectedPattern);   
   
});
//-------------------------------------------------------------------------------
pm.test("1. Проверка text", function () {
    var jsonData = pm.response.json();
    
    
    // Создание регулярного выражения с текущей датой
    var expectedPattern = new RegExp('^Событие успешно добавлено на ' + pm.variables.get('curDate') + ' 00:00 тест событие 1! Выполнен выход в главное меню ');
    
    // Проверка наличия объекта
    pm.expect(jsonData).to.have.property('response');
    
    // Проверка, что response является объектом
    pm.expect(jsonData.response).to.be.an('object');
    
    // Проверка наличия ключа внутри объекта
    pm.expect(jsonData.response).to.have.property('text');
	pm.expect(jsonData.response).to.have.property('end_session');
    
    // Проверка значения ключа внутри объекта
    pm.expect(jsonData.response.text).to.match(expectedPattern); 
	pm.expect(jsonData.response.end_session).to.eql(false);
   
});

//------------------------------------------------------------------------------


pm.test("1. Проверка text с currentDate", function () {
    var jsonData = pm.response.json();

    // Генерация текущей даты в формате DD-MM-YYYY
    var currentDate = new Date();
    var day = String(currentDate.getDate()).padStart(2, '0');
    var month = String(currentDate.getMonth() + 1).padStart(2, '0'); // Январь - это 0!
    var year = currentDate.getFullYear();
    var formattedDate = day + '-' + month + '-' + year;

    // Создание регулярного выражения с текущей датой
    var expectedPattern = new RegExp('^Событие успешно добавлено на ' + formattedDate + " 00:00 тест событие 1! Выполнен выход в главное меню ");

    // Проверка наличия объекта
    pm.expect(jsonData).to.have.property('response');

    // Проверка, что response является объектом
    pm.expect(jsonData.response).to.be.an('object');

    // Проверка наличия ключа внутри объекта
    pm.expect(jsonData.response).to.have.property('text');
    pm.expect(jsonData.response).to.have.property('end_session');

    // Проверка значения ключа внутри объекта
    pm.expect(jsonData.response.text).to.match(expectedPattern);
    pm.expect(jsonData.response.end_session).to.eql(false);

});

//------------------------------------------------------------------------------

pm.test("1. Проверка text", function () {
    let jsonData = pm.response.json();

    // Получаем день недели из запроса
    let requestBody = JSON.parse(pm.request.body.raw);
    let actions =  requestBody.state.session.actions;
     console.log(actions);

    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction
     
    let command = requestBody.request.command;
    let is_valid_command = jsonData.response.text.includes(command);
   

    // Функция для получения следующей даты определенного дня недели
    function getNextvalueAction(dayName) {
        const days = ['воскресенье', 'понедельник', 'вторник', 'среда', 'четверг', 'пятница', 'суббота'];
        const today = new Date();
        const dayIndex = days.indexOf(dayName);
        if (dayIndex === -1) return null;
        
        const targetDate = new Date(today);
        targetDate.setDate(today.getDate() + (dayIndex + 7 - today.getDay()) % 7);
        return targetDate;
    }
    
    // Получаем ближайшую дату для указанного дня недели
    let targetDate = getNextvalueAction(valueAction);
    console.log(targetDate);
   
    // Форматируем дату в DD-MM-YYYY
    let formattedDate = targetDate.getDate().toString().padStart(2, '0') + '-' +
                        (targetDate.getMonth() + 1).toString().padStart(2, '0') + '-' +
                        targetDate.getFullYear();
   

 /*   let is_expect_date = jsonData.response.text.includes("Событие успешно добавлено на " + formattedDate);
    console.log("Ожидаемая дата?:", is_expect_date);  
 */
     // Создание регулярного выражения с ожидаемой датой
    let expectedPattern = new RegExp('^Событие успешно добавлено на ' + formattedDate + " 00:00 тест событие 1! Выполнен выход в главное меню ");

    
    // Проверка command
    pm.expect(jsonData).to.have.property('response');
    
    // Проверка, что response является объектом
    pm.expect(jsonData.response).to.be.an('object');
    
    // Проверка наличия ключа внутри объекта
    pm.expect(jsonData.response).to.have.property('text');
    pm.expect(jsonData.response).to.have.property('end_session');
    
    // Проверка значения ключа внутри объекта
    pm.expect(jsonData.response.text).to.match(expectedPattern);
    pm.expect(jsonData.response.text).to.include(command); 
    pm.expect(jsonData.response.end_session).to.eql(false);

});

_________________ 
pm.test("3. Проверка'days' {}", function () {
    var jsonData = pm.response.json();
    
    // Проверяем наличие user_state_update в ответе
    pm.expect(jsonData).to.have.property('user_state_update');
    pm.expect(jsonData.user_state_update).to.be.an('object');

    // Проверяем наличие week внутри user_state_update
    pm.expect(jsonData.user_state_update).to.have.property('week');
    pm.expect(jsonData.user_state_update.week).to.be.an('object');

    // Проверяем наличие days внутри week
    pm.expect(jsonData.user_state_update.week).to.have.property('days');

    // Проверяем, что days является пустым объектом
    pm.expect(jsonData.user_state_update.week.days).to.be.an('object').that.is.empty;   
});

//---------------------------------------------------------------------------
Функция 
// Генерация текущей даты в формате DD-MM-YYYY

function generateCurrentDate() {
    var currentDate = new Date();
    var day = String(currentDate.getDate()).padStart(2, '0');
    var month = String(currentDate.getMonth() + 1).padStart(2, '0'); // Январь - это 0!
    var year = currentDate.getFullYear();
    return day + '-' + month + '-' + year;
}
// --------------------------------------------------------------------------
pm.test("1. Проверка text с currentDate", function () {
    var jsonData = pm.response.json();
    var formattedDate = generateCurrentDate()

    // Создание регулярного выражения с текущей датой
    var expectedPattern = new RegExp('^Событие успешно добавлено на ' + formattedDate + " 00:00 тест событие 1! Выполнен выход в главное меню ");

    // Проверка наличия объекта
    pm.expect(jsonData).to.have.property('response');

    // Проверка, что response является объектом
    pm.expect(jsonData.response).to.be.an('object');

    // Проверка наличия ключа внутри объекта
    pm.expect(jsonData.response).to.have.property('text');
    pm.expect(jsonData.response).to.have.property('end_session');

    // Проверка значения ключа внутри объекта
    pm.expect(jsonData.response.text).to.match(expectedPattern);
    pm.expect(jsonData.response.end_session).to.eql(false);

});
//-------------------------------------------------------------------------------
  pm.test("2. Значение ключей 'message_id' внутри 'session'", function () {
    var jsonData = pm.response.json();
    
    // Проверяем наличие объекта 'session' в ответе
    pm.expect(jsonData).to.have.property('session'); 
   
    // Проверяем наличие ключей внутри 'session'
	pm.expect(jsonData.session).to.have.property('message_id');
	
    // Проверяем, что значение ключей
	 pm.expect(jsonData.session.message_id).to.equal(3);
    
});
//------------------------------------------------------------------------------

pm.test("3. Проверка user_state_update", function () {
    var jsonData = pm.response.json();
    var formattedDate = generateCurrentDate()

    // Дополнительные проверки значений
    if (jsonData.user_state_update.week.days[formattedDate][0].time !== "00:00") {
        console.log("Ошибка: ожидалось значение '00:00' для time в первом элементе, но получено", jsonData.user_state_update.week.days[formattedDate][0].time);
    }
    if (jsonData.user_state_update.week.days[formattedDate][0].name !== "тест событие 1") {
        console.log("Ошибка: ожидалось значение 'тест событие 1' для name в первом элементе, но получено", jsonData.user_state_update.week.days[formattedDate][0].name);
    }	
    
    // Проверяем наличие и тип user_state_update
    pm.expect(jsonData).to.have.property('user_state_update');
    pm.expect(jsonData.user_state_update).to.be.an('object');

    // Проверяем наличие и тип object3 внутри user_state_update
    pm.expect(jsonData.user_state_update).to.have.property('week');
    pm.expect(jsonData.user_state_update.week).to.be.an('object');

    // Проверяем наличие и тип days внутри week
    pm.expect(jsonData.user_state_update.week).to.have.property('days');
    pm.expect(jsonData.user_state_update.week.days).to.be.an('object');

    // Проверяем наличие и тип {{currentDate}} внутри days
    pm.expect(jsonData.user_state_update.week.days).to.have.property(formattedDate);
    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.be.an('array');

    // Проверяем, что formattedDate содержит 2 элемента
    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.have.lengthOf(1);

    // Проверяем первый элемент formattedDate
    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('time', "00:00");
    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('name', "тест событие 1");  
});


//-------------------------------------------------------------------------------
pm.test("4. Проверка отсутствия user_state_update", function () {
    var jsonData = pm.response.json();
    pm.expect(jsonData).to.not.have.property('user_state_update');
});

_____________________________________ 
{
                        "number": 0,
                        "valueAction": "добавь событие",
                        "operation": "ADD_EVENT"
                    },
                    {
                        "number": 1,
                        "prevOperation": "ADD_EVENT",
                        "valueAction": "вторник",
                        "operation": "ADD_DAY"
                    },
                    {
                        "number": 2,
                        "prevOperation": "ADD_DAY",
                        "valueAction": "десять часов",
                        "operation": "ADD_TIME"
                    }
					
					
__________________________________________
исправление для текущей даты от AI 

pm.test("1. Проверка text", function () {
    var jsonData = pm.response.json();

    // Получаем день недели из запроса
    let requestBody = JSON.parse(pm.request.body.raw);
    let actions =  requestBody.state.session.actions;

    var valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction

    // Функция для получения следующей даты определенного дня недели
    function getNextvalueAction(dayName) {
        const days = ['воскресенье', 'понедельник', 'вторник', 'среда', 'четверг', 'пятница', 'суббота'];
        const today = new Date();
        const dayIndex = days.indexOf(dayName);
        if (dayIndex === -1) return null;
        
        const targetDate = new Date(today);
        targetDate.setDate(today.getDate() + (dayIndex + 7 - today.getDay()) % 7);
        return targetDate;
    }
    
    // Получаем ближайшую дату для указанного дня недели
    var targetDate = getNextvalueAction(valueAction);
    if (!targetDate) {
        console.log("Некорректное значение дня недели");
        return; // Exit the test if the day name is incorrect
    }
    console.log(targetDate);
   
    // Форматируем дату в DD-MM-YYYY
    var formattedDate = targetDate.getDate().toString().padStart(2, '0') + '-' +
                        (targetDate.getMonth() + 1).toString().padStart(2, '0') + '-' +
                        targetDate.getFullYear();
    console.log("Ожидаемая дата:", formattedDate);  


     // Создание регулярного выражения с ожидаемой датой
    var expectedPattern = new RegExp('^Событие успешно добавлено на ' + formattedDate );

    
    // Проверка наличия объекта
    pm.expect(jsonData).to.have.property('response');
    
    // Проверка, что response является объектом
    pm.expect(jsonData.response).to.be.an('object');
    
    // Проверка наличия ключа внутри объекта
    pm.expect(jsonData.response).to.have.property('text');
    pm.expect(jsonData.response).to.have.property('end_session');
    
    // Проверка значения ключа внутри объекта
    pm.expect(jsonData.response.text).to.match(expectedPattern);
    pm.expect(jsonData.response.end_session).to.eql(false);

});


//-------------------------------------------------------------------------------
pm.test("3. Проверка 'prevActions'", function () {
    var jsonData = pm.response.json();

    // Проверяем наличие session_state в ответе
    pm.expect(jsonData).to.have.property('session_state');
    pm.expect(jsonData.session_state).to.be.an('object');

    // Проверяем наличие actions внутри session_state
    pm.expect(jsonData.session_state).to.have.property('actions');
    pm.expect(jsonData.session_state.actions).to.be.an('object');

    // Проверяем наличие prevActions внутри actions
    pm.expect(jsonData.session_state.actions).to.have.property('prevActions');
    pm.expect(jsonData.session_state.actions.prevActions).to.be.an('array');

    // Проверяем, что prevActions не пустой
    pm.expect(jsonData.session_state.actions.prevActions).to.have.length.above(0);

    // Проверяем ключи в первом элементе prevActions
    pm.expect(jsonData.session_state.actions.prevActions[0]).to.have.property('number');
    pm.expect(jsonData.session_state.actions.prevActions[0]).to.have.property('operation');
    pm.expect(jsonData.session_state.actions.prevActions[0]).to.have.property('valueAction');

    // Проверяем значения ключей
    pm.expect(jsonData.session_state.actions.prevActions[0].number).to.equal(0);
    pm.expect(jsonData.session_state.actions.prevActions[0].operation).to.equal("ADD_EVENT");
    pm.expect(jsonData.session_state.actions.prevActions[0].valueAction).to.equal("добавь событие");

    // Проверяем ключи во втором элементе prevActions
    pm.expect(jsonData.session_state.actions.prevActions[1]).to.have.property('number');
    pm.expect(jsonData.session_state.actions.prevActions[1]).to.have.property('operation');
    pm.expect(jsonData.session_state.actions.prevActions[1]).to.have.property('prevOperation');
    pm.expect(jsonData.session_state.actions.prevActions[1]).to.have.property('valueAction');

    // Проверяем значения ключей
    pm.expect(jsonData.session_state.actions.prevActions[1].number).to.equal(1);
    pm.expect(jsonData.session_state.actions.prevActions[1].operation).to.equal("ADD_DAY");
    pm.expect(jsonData.session_state.actions.prevActions[1].prevOperation).to.equal("ADD_EVENT");
    pm.expect(jsonData.session_state.actions.prevActions[1].valueAction).to.equal("сегодня");

        // Проверяем ключи во третьем элементе prevActions
    pm.expect(jsonData.session_state.actions.prevActions[1]).to.have.property('number');
    pm.expect(jsonData.session_state.actions.prevActions[1]).to.have.property('operation');
    pm.expect(jsonData.session_state.actions.prevActions[1]).to.have.property('prevOperation');
    pm.expect(jsonData.session_state.actions.prevActions[1]).to.have.property('valueAction');

    // Проверяем значения ключей
    pm.expect(jsonData.session_state.actions.prevActions[1].number).to.equal(2);
    pm.expect(jsonData.session_state.actions.prevActions[1].operation).to.equal("ADD_TIME");
    pm.expect(jsonData.session_state.actions.prevActions[1].prevOperation).to.equal("ADD_DAY");
    pm.expect(jsonData.session_state.actions.prevActions[1].valueAction).to.equal("ноль часов ноль");

});

